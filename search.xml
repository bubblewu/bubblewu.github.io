<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>并发模式-5：Producer-Consumer模式：生产者消费者</title>
      <link href="/ckdzpgvtp0000e7ydh7rl9onx/"/>
      <url>/ckdzpgvtp0000e7ydh7rl9onx/</url>
      
        <content type="html"><![CDATA[<p>生产者消费者模式，即<code>N个线程进行生产，同时N个线程进行消费，两种角色通过内存缓冲区进行通信。</code></p><a id="more"></a><h2 id="Producer-Consumer模式"><a href="#Producer-Consumer模式" class="headerlink" title="Producer-Consumer模式"></a>Producer-Consumer模式</h2><p>生产者消费者模式，即<code>N个线程进行生产，同时N个线程进行消费，两种角色通过内存缓冲区进行通信。</code></p><h3 id="三个角色"><a href="#三个角色" class="headerlink" title="三个角色"></a>三个角色</h3><p>在Producer-Consumer模式，承担安全守护责任的是<code>Channel角色</code>。<code>Channel角色执行线程间的互斥处理，确保Producer角色正确地将Data角色传递给Consumer角色。</code></p><h4 id="Channel角色"><a href="#Channel角色" class="headerlink" title="Channel角色"></a>Channel角色</h4><p>Producer-Consumer模式为了Producer向Consumer传递Data，在中间设置了Channel角色。</p><ul><li><code>Producer直接调用Consumer的方法</code>：<br>如Producer直接调用Consumer的方法，那么执行处理的就不是Consumer的线程，而是Producer的线程了。这样执行处理花费的时间就必须由Producer的线程来承担，准备下一个数据的处理也会发生相应的延迟，会使程序的响应性变得差。</li></ul><p>就好像：糕点师傅做好蛋糕，直接交给客人，在客人吃完后再做下一个蛋糕一样。</p><ul><li><code>借助Channel角色</code>：<br>Producer将Data传递给Channel角色后，无需等待Consumer角色对Data进行处理，就可以立即开始准备下一个Data。<br>也就是，<strong>Producer可以持续不断地创建Data，而不会受到Consumer角色的处理进度影响。</strong></li></ul><h5 id="如何传递Data"><a href="#如何传递Data" class="headerlink" title="如何传递Data"></a>如何传递Data</h5><ul><li><p><code>队列：先接收的先传递</code><br>使用FIFO先进先出的队列来实现。</p></li><li><p><code>栈：后接收的先传递</code><br>使用LIFO后进先出的栈来实现。</p></li><li><p><code>优先队列：优先级高的先传递</code><br>使用优先队列来实现，Channel角色给收到的Data设置优先级，优先级高的先传递给Consumer来处理。</p></li></ul><h5 id="存在意义"><a href="#存在意义" class="headerlink" title="存在意义"></a>存在意义</h5><p>因为Channel的存在，Producer和Consumer这些线程才能保持协调运行。<br>Channel这个中间角色可以实现线程的协调运行。</p><ul><li>线程的<code>协调运行</code>要考虑：<code>放在中间的东西</code>。</li><li>线程的<code>互斥处理</code>要考虑：<code>应该保护的东西</code>。</li></ul><p>协调运行和互斥处理是内外统一的。<br>为了让线程协调运行，必须执行互斥处理，以防止共享的内容被破坏；<br>线程的互斥处理是为了线程的协调运行才执行的。</p><h2 id="案例"><a href="#案例" class="headerlink" title="案例"></a>案例</h2><h3 id="场景"><a href="#场景" class="headerlink" title="场景"></a>场景</h3><p>生产者消费者模式Demo：<br>旋转小餐厅里，有3位师傅制作蛋糕放到桌子上，然后有3位客人来吃这些蛋糕。<br>主要业务点：</p><ul><li>师傅（MakerThread）制作蛋糕（String），并将其放置在桌子（Table）上；</li><li>桌子上最多可以放置3个蛋糕；</li><li>如果桌子上已经放满3个，就需等有空余位置时才能继续放置；</li><li>客人（EaterThread）按蛋糕放置等顺序来取桌子（Table）上等蛋糕来吃；</li><li>当桌子没有蛋糕时，客人就需等待直到有蛋糕放入；</li></ul><h3 id="实现"><a href="#实现" class="headerlink" title="实现"></a>实现</h3><ul><li><p>Main函数：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Table table = <span class="keyword">new</span> Table(<span class="number">3</span>);</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">3</span>; i++) &#123;</span><br><span class="line">            MakerThread makerThread = <span class="keyword">new</span> MakerThread(<span class="string">"-&gt; Maker."</span> + i, table, <span class="number">2020</span> + i);</span><br><span class="line">            makerThread.start();</span><br><span class="line">            EaterThread eaterThread = <span class="keyword">new</span> EaterThread(<span class="string">"Eater."</span> + i, table, <span class="number">2020</span> + i);</span><br><span class="line">            eaterThread.start();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>输出：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">-&gt; Maker.1 put: Cake No.0 by -&gt; Maker.1</span><br><span class="line">Eater.2 take: Cake No.0 by -&gt; Maker.1</span><br><span class="line">-&gt; Maker.2 put: Cake No.1 by -&gt; Maker.2</span><br><span class="line">Eater.0 take: Cake No.1 by -&gt; Maker.2</span><br><span class="line">-&gt; Maker.0 put: Cake No.2 by -&gt; Maker.0</span><br><span class="line">Eater.2 take: Cake No.2 by -&gt; Maker.0</span><br><span class="line">-&gt; Maker.1 put: Cake No.3 by -&gt; Maker.1</span><br><span class="line">Eater.1 take: Cake No.3 by -&gt; Maker.1</span><br><span class="line">-&gt; Maker.0 put: Cake No.4 by -&gt; Maker.0</span><br><span class="line">Eater.1 take: Cake No.4 by -&gt; Maker.0</span><br><span class="line">-&gt; Maker.2 put: Cake No.5 by -&gt; Maker.2</span><br><span class="line">Eater.0 take: Cake No.5 by -&gt; Maker.2</span><br><span class="line">-&gt; Maker.1 put: Cake No.6 by -&gt; Maker.1</span><br><span class="line">Eater.0 take: Cake No.6 by -&gt; Maker.1</span><br></pre></td></tr></table></figure></li><li><p>Channel角色 Table类：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Channel角色：表示桌子</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> wugang</span></span><br><span class="line"><span class="comment"> * date: 2020-07-16 19:59</span></span><br><span class="line"><span class="comment"> **/</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Table</span> </span>&#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 盘子：放置蛋糕的数组</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> String[] dishArray;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 下一次放置蛋糕的位置</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> tail;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 下一次取蛋糕的位置</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> head;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 当前桌子上放置的蛋糕个数</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> count;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Table</span><span class="params">(<span class="keyword">int</span> totalCount)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.dishArray = <span class="keyword">new</span> String[totalCount];</span><br><span class="line">        <span class="keyword">this</span>.head = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">this</span>.tail = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">this</span>.count = <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 放置蛋糕</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> cake 蛋糕</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">synchronized</span> <span class="keyword">void</span> <span class="title">put</span><span class="params">(String cake)</span> <span class="keyword">throws</span> InterruptedException </span>&#123;</span><br><span class="line">        System.out.println(Thread.currentThread().getName() + <span class="string">" put: "</span> + cake);</span><br><span class="line">        <span class="comment">// 最多只能放置3个</span></span><br><span class="line">        <span class="keyword">while</span> (count &gt;= dishArray.length) &#123;</span><br><span class="line">            wait();</span><br><span class="line">        &#125;</span><br><span class="line">        dishArray[tail] = cake;</span><br><span class="line">        <span class="comment">// 取下一次要放置的位置</span></span><br><span class="line">        tail = (tail + <span class="number">1</span>) % dishArray.length;</span><br><span class="line">        count++;</span><br><span class="line">        notifyAll();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 取蛋糕</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 蛋糕</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">synchronized</span> String <span class="title">take</span><span class="params">()</span> <span class="keyword">throws</span> InterruptedException </span>&#123;</span><br><span class="line">        <span class="comment">// 桌子上没有蛋糕，等待</span></span><br><span class="line">        <span class="keyword">while</span> (count &lt;= <span class="number">0</span>) &#123;</span><br><span class="line">            wait();</span><br><span class="line">        &#125;</span><br><span class="line">        String cake = dishArray[head];</span><br><span class="line">        <span class="comment">// 取下一次要取的位置</span></span><br><span class="line">        head = (head + <span class="number">1</span>) % dishArray.length;</span><br><span class="line">        count--;</span><br><span class="line">        notifyAll();</span><br><span class="line">        System.out.println(Thread.currentThread().getName() + <span class="string">" take: "</span> + cake);</span><br><span class="line">        <span class="keyword">return</span> cake;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>基于juc的队列来实现Table：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 基于juc的队列来实现Table</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> wugang</span></span><br><span class="line"><span class="comment"> * date: 2020-07-17 17:57</span></span><br><span class="line"><span class="comment"> **/</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TableQueue</span> <span class="keyword">extends</span> <span class="title">ArrayBlockingQueue</span>&lt;<span class="title">String</span>&gt; </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">TableQueue</span><span class="params">(<span class="keyword">int</span> capacity)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>(capacity);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">put</span><span class="params">(String cake)</span> <span class="keyword">throws</span> InterruptedException </span>&#123;</span><br><span class="line">        System.out.println(Thread.currentThread().getName() + <span class="string">" put: "</span> + cake);</span><br><span class="line">        <span class="keyword">super</span>.put(cake);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">take</span><span class="params">()</span> <span class="keyword">throws</span> InterruptedException </span>&#123;</span><br><span class="line">        String cake = <span class="keyword">super</span>.take();</span><br><span class="line">        System.out.println(Thread.currentThread().getName() + <span class="string">" take: "</span> + cake);</span><br><span class="line">        <span class="keyword">return</span> cake;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>MakerThread生产者：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 表示糕点师</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> wugang</span></span><br><span class="line"><span class="comment"> * date: 2020-07-16 20:00</span></span><br><span class="line"><span class="comment"> **/</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MakerThread</span> <span class="keyword">extends</span> <span class="title">Thread</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> Random random;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> Table table;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 蛋糕的流水号，所有糕点师共用</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">int</span> id = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">MakerThread</span><span class="params">(String name, Table table, <span class="keyword">long</span> seed)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>(name);</span><br><span class="line">        <span class="keyword">this</span>.table = table;</span><br><span class="line">        <span class="keyword">this</span>.random = <span class="keyword">new</span> Random(seed);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">while</span> (<span class="keyword">true</span>) &#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                TimeUnit.MILLISECONDS.sleep(random.nextInt(<span class="number">1000</span>));</span><br><span class="line">                String cake = <span class="string">"Cake No."</span> + nextId() + <span class="string">" by "</span> + getName();</span><br><span class="line">                table.put(cake);</span><br><span class="line">            &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">synchronized</span> <span class="keyword">int</span> <span class="title">nextId</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> id++;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>EaterThread消费者：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 表示来吃蛋糕的客人</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> wugang</span></span><br><span class="line"><span class="comment"> * date: 2020-07-16 20:00</span></span><br><span class="line"><span class="comment"> **/</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">EaterThread</span> <span class="keyword">extends</span> <span class="title">Thread</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> Random random;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> Table table;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">EaterThread</span><span class="params">(String name, Table table, <span class="keyword">long</span> seed)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>(name);</span><br><span class="line">        <span class="keyword">this</span>.table = table;</span><br><span class="line">        <span class="keyword">this</span>.random = <span class="keyword">new</span> Random(seed);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">while</span> (<span class="keyword">true</span>) &#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                String cake = table.take();</span><br><span class="line">                TimeUnit.MILLISECONDS.sleep(random.nextInt(<span class="number">1000</span>));</span><br><span class="line">            &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h2 id="扩展"><a href="#扩展" class="headerlink" title="扩展"></a>扩展</h2><h3 id="常用队列"><a href="#常用队列" class="headerlink" title="常用队列"></a>常用队列</h3><ul><li><p><code>ArrayBlockingQueue类</code>：基于数组的BlockingQueue<br>表示元素个数有最大限制的BlockingQueue。<br>当队列满了仍put数据时，或队列为空仍要take数据时，线程会阻塞，</p></li><li><p><code>LinkedBlockingQueue类</code>：基于链表的BlockingQueue<br>表示元素个数没有最大限制的BlockingQueue。<br>该类基于链表，如果没有特别指定，元素个数没有最大限制，只要还有内存，就可以put数据。</p></li><li><p><code>PriorityBlockingQueue类</code>：带有优先级的BlockingQueue<br>表示有优先级的BlockingQueue。<br>数据的优先级时根据Comparable接口的自然排序，或构造函数的Comparator接口决定的顺序指定。</p></li><li><p><code>DelayQueue类</code>：一定时间之后才可以take的BlockingQueue<br>表示用于存储java.util.concurrent.Delayed对象的队列。<br>当从该队列take时，只有在各元素指定的时间到期后才可以take。</p></li><li><p><code>SynchronousQueue类</code>：直接传递的BlockingQueue<br>SynchronousQueue类表示的是BlockingQueue，该BlockingQueue用于执行由Producer角色到Consumer角色的直接传递。<br>如果Producer先put，在Consumer进行take之前，Producer的线程会一直阻塞。相反，如Consumer先take，在Producer执行put之前，Consumer的线程将会一直阻塞。</p></li><li><p><code>ConcurrentLinkedQueue类</code>：元素个数没有最大限制的线程安全队列<br>ConcurrentLinkedQueue类并不是BlockingQueue的实现类，它表示元素个数没有最大限制的线程安全队列。<br>在ConcurrentLinkedQueue中，内部的数据结构是分开的，线程之间互不影响，所以就无需进行互斥处理。</p></li></ul><h3 id="java-util-concurrent-Exchanger类交换缓冲区"><a href="#java-util-concurrent-Exchanger类交换缓冲区" class="headerlink" title="java.util.concurrent.Exchanger类交换缓冲区"></a>java.util.concurrent.Exchanger类交换缓冲区</h3><p><code>java.util.concurrent.Exchanger类</code>用于<code>让两个线程安全地交换对象</code>。</p><p>如上案例，可以将buffer1缓冲区传递给ProducerThread，然后将buffer2缓冲区传递给ConsumerThread，同时还会将通用的Exchanger的实例分别传递给ProducerThread和ConsumerThread。</p><p><img src="https://cdn.jsdelivr.net/gh/bubblewu/cdn/images/concurrent/exchanger.png" alt="exchanger交换缓冲区"></p><ul><li>Main类：<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">Exchanger&lt;Object[]&gt; exchanger = <span class="keyword">new</span> Exchanger&lt;&gt;();</span><br><span class="line">        Object[] buffer1 = <span class="keyword">new</span> Object[<span class="number">3</span>];</span><br><span class="line">        Object[] buffer2 = <span class="keyword">new</span> Object[<span class="number">3</span>];</span><br><span class="line">        MakerExchangerThread makerThread = <span class="keyword">new</span> MakerExchangerThread(<span class="string">"-&gt; Maker."</span>, exchanger, buffer1, <span class="number">2020</span>);</span><br><span class="line">        makerThread.start();</span><br><span class="line">        EaterExchangerThread eaterThread = <span class="keyword">new</span> EaterExchangerThread(<span class="string">"Eater."</span>, exchanger, buffer2, <span class="number">2030</span>);</span><br><span class="line">        eaterThread.start();</span><br></pre></td></tr></table></figure></li></ul><p>输出</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line">Eater.: Before exchange</span><br><span class="line">-&gt; Maker. put: 0</span><br><span class="line">-&gt; Maker. put: 1</span><br><span class="line">-&gt; Maker. put: 2</span><br><span class="line">-&gt; Maker.: Before exchange</span><br><span class="line">-&gt; Maker.: After exchange</span><br><span class="line">Eater.: After exchange</span><br><span class="line">Eater. take: 0</span><br><span class="line">Eater. take: 1</span><br><span class="line">-&gt; Maker. put: 3</span><br><span class="line">Eater. take: 2</span><br><span class="line">-&gt; Maker. put: 4</span><br><span class="line">-&gt; Maker. put: 5</span><br><span class="line">-&gt; Maker.: Before exchange</span><br><span class="line">Eater.: Before exchange</span><br><span class="line">Eater.: After exchange</span><br><span class="line">-&gt; Maker.: After exchange</span><br><span class="line">Eater. take: 3</span><br><span class="line">Eater. take: 4</span><br><span class="line">-&gt; Maker. put: 6</span><br><span class="line">Eater. take: 5</span><br><span class="line">Eater.: Before exchange</span><br><span class="line">-&gt; Maker. put: 7</span><br><span class="line">-&gt; Maker. put: 8</span><br><span class="line">-&gt; Maker.: Before exchange</span><br><span class="line">-&gt; Maker.: After exchange</span><br><span class="line">Eater.: After exchange</span><br><span class="line">Eater. take: 6</span><br><span class="line">-&gt; Maker. put: 9</span><br><span class="line">Eater. take: 7</span><br><span class="line">-&gt; Maker. put: 10</span><br></pre></td></tr></table></figure><ul><li><p>MakerExchangerThread生成者：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 表示糕点师</span></span><br><span class="line"><span class="comment"> * 基于juc包下的Exchanger类： 用于让两个线程安全地交换对象。</span></span><br><span class="line"><span class="comment"> * 主要步骤：</span></span><br><span class="line"><span class="comment"> * - 生产端填充字符，直到缓冲区被填满；</span></span><br><span class="line"><span class="comment"> * - 使用exchange方法将填满的缓冲区传递给消费端；</span></span><br><span class="line"><span class="comment"> * - 传递完成后，作为交换，接收消费端已经消费完的空的缓冲区；</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> wugang</span></span><br><span class="line"><span class="comment"> * date: 2020-07-16 20:00</span></span><br><span class="line"><span class="comment"> **/</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MakerExchangerThread</span> <span class="keyword">extends</span> <span class="title">Thread</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> Exchanger&lt;Object[]&gt; exchanger;</span><br><span class="line">    <span class="keyword">private</span> Object[] dishArray;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> Random random;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 蛋糕的流水号，所有糕点师共用</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">int</span> id = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">MakerExchangerThread</span><span class="params">(String name, Exchanger&lt;Object[]&gt; exchanger, Object[] dishArray, <span class="keyword">long</span> seed)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>(name);</span><br><span class="line">        <span class="keyword">this</span>.exchanger = exchanger;</span><br><span class="line">        <span class="keyword">this</span>.dishArray = dishArray;</span><br><span class="line">        <span class="keyword">this</span>.random = <span class="keyword">new</span> Random(seed);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">while</span> (<span class="keyword">true</span>) &#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                <span class="comment">// 向缓冲区填充字符</span></span><br><span class="line">                <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; dishArray.length; i++) &#123;</span><br><span class="line">                    dishArray[i] = nextId();</span><br><span class="line">                    TimeUnit.MILLISECONDS.sleep(random.nextInt(<span class="number">1000</span>));</span><br><span class="line">                    System.out.println(getName() + <span class="string">" put: "</span> + dishArray[i]);</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="comment">// 交换缓冲区</span></span><br><span class="line">                System.out.println(getName() + <span class="string">": Before exchange"</span>);</span><br><span class="line">                dishArray = exchanger.exchange(dishArray);</span><br><span class="line">                System.out.println(getName() + <span class="string">": After exchange"</span>);</span><br><span class="line">            &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">synchronized</span> <span class="keyword">int</span> <span class="title">nextId</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> id++;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>EaterExchangerThread消费者：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 表示来吃蛋糕的客人</span></span><br><span class="line"><span class="comment"> * 基于juc包下的Exchanger类： 用于让两个线程安全地交换对象。</span></span><br><span class="line"><span class="comment"> * 主要步骤：</span></span><br><span class="line"><span class="comment"> * - 使用exchange方法将空的缓冲区传递给生产端；</span></span><br><span class="line"><span class="comment"> * - 传递完成后，作为交换，接收生产端已经填满的缓冲区；</span></span><br><span class="line"><span class="comment"> * - 使用满的缓冲区的数据；</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> wugang</span></span><br><span class="line"><span class="comment"> * date: 2020-07-16 20:00</span></span><br><span class="line"><span class="comment"> **/</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">EaterExchangerThread</span> <span class="keyword">extends</span> <span class="title">Thread</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> Exchanger&lt;Object[]&gt; exchanger;</span><br><span class="line">    <span class="keyword">private</span> Object[] dishArray;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> Random random;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">EaterExchangerThread</span><span class="params">(String name, Exchanger&lt;Object[]&gt; exchanger, Object[] dishArray, <span class="keyword">long</span> seed)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>(name);</span><br><span class="line">        <span class="keyword">this</span>.exchanger = exchanger;</span><br><span class="line">        <span class="keyword">this</span>.dishArray = dishArray;</span><br><span class="line">        <span class="keyword">this</span>.random = <span class="keyword">new</span> Random(seed);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">while</span> (<span class="keyword">true</span>) &#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                <span class="comment">// 交换缓冲区</span></span><br><span class="line">                System.out.println(getName() + <span class="string">": Before exchange"</span>);</span><br><span class="line">                dishArray = exchanger.exchange(dishArray);</span><br><span class="line">                System.out.println(getName() + <span class="string">": After exchange"</span>);</span><br><span class="line">                <span class="comment">// 从缓冲区中取出蛋糕</span></span><br><span class="line">                <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; dishArray.length; i++) &#123;</span><br><span class="line">                    System.out.println(getName() + <span class="string">" take: "</span> + dishArray[i]);</span><br><span class="line">                    TimeUnit.MILLISECONDS.sleep(random.nextInt(<span class="number">1000</span>));</span><br><span class="line">                &#125;</span><br><span class="line">            &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
          <category> 并发 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> 并发 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>并发模式-4：Balking模式：停止并返回</title>
      <link href="/ckdzpgvu20005e7yd6yeper0b/"/>
      <url>/ckdzpgvu20005e7yd6yeper0b/</url>
      
        <content type="html"><![CDATA[<p>Balking模式：<code>如果现在不适合或没必要执行这个操作，就停止处理，直接返回</code>。</p><a id="more"></a><h2 id="Balking模式"><a href="#Balking模式" class="headerlink" title="Balking模式"></a>Balking模式</h2><ul><li><p>思想：<br>Balking就是停止返回的意思。<br>Balking模式：<code>如果现在不适合或没必要执行这个操作，就停止处理，直接返回</code>。</p></li><li><p>与Guarded Suspension保护暂停模式区别<br>Balking模式Guarded Suspension保护暂停模式一样都需要守护条件。<br>在Balking模式中，如果守护条件不成立，则立即中断处理。而后者是一直等待到可执行。</p></li></ul><p><img src="https://cdn.jsdelivr.net/gh/bubblewu/cdn/images/concurrent/balking-timethreads.png" alt="Balking模式的Timethreads图"></p><h2 id="案例"><a href="#案例" class="headerlink" title="案例"></a>案例</h2><h3 id="场景"><a href="#场景" class="headerlink" title="场景"></a>场景</h3><p>例如：<code>文本的自动保存功能</code>，防止电脑突然宕机，定期的将数据保存到文件中。</p><p>定期将某些数据写入文件中。每次写入都会覆盖上次写入到内容，也就是说只有最新的内容才会被保存。<br>但需注意：当本次写入数据与上次数据内容完全相同时，就不再执行写入操作，直接返回。</p><p>也就是说，该场景下<strong>数据内容存在不同是守护条件。如果守护条件不成立，也就是数据相同，则不再执行写入操作，直接返回（Balk）</strong>。</p><h3 id="实现"><a href="#实现" class="headerlink" title="实现"></a>实现</h3><p>Data类对应文本工具的文本内容，SaverThread类对应执行自动保存的线程，而ChangerThread类是模仿用户操作，即对文本修改并随时保存的用户。</p><p><img src="https://cdn.jsdelivr.net/gh/bubblewu/cdn/images/concurrent/balking.png" alt="Balking模式案例"></p><ul><li><p>Main：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Data data = <span class="keyword">new</span> Data(<span class="string">"data.txt"</span>, <span class="string">"(empty)"</span>);</span><br><span class="line">        <span class="keyword">new</span> ChangerThread(<span class="string">"ChangerThread"</span>, data).start();</span><br><span class="line">        <span class="keyword">new</span> SaverThread(<span class="string">"SaverThread"</span>, data).start();</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>输出：<br>依次输出，没有重复的编号。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">SaverThread save content: No.0</span><br><span class="line">SaverThread save content: No.1</span><br><span class="line">ChangerThread save content: No.2</span><br><span class="line">ChangerThread save content: No.3</span><br><span class="line">SaverThread save content: No.4</span><br><span class="line">SaverThread save content: No.5</span><br><span class="line">ChangerThread save content: No.6</span><br><span class="line">ChangerThread save content: No.7</span><br><span class="line">SaverThread save content: No.8</span><br><span class="line">SaverThread save content: No.9</span><br><span class="line">ChangerThread save content: No.10</span><br><span class="line">ChangerThread save content: No.11</span><br></pre></td></tr></table></figure></li><li><p>Data类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 表示可以修改并保存的数据类</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> wugang</span></span><br><span class="line"><span class="comment"> * date: 2020-08-18 11:16</span></span><br><span class="line"><span class="comment"> **/</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Data</span> </span>&#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 保存的文件名称</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> String fileName;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 数据内容</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> String content;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 守护条件：修改后的内容如果还未保存，就未true</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">boolean</span> changed;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Data</span><span class="params">(String fileName, String content)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.fileName = fileName;</span><br><span class="line">        <span class="keyword">this</span>.content = content;</span><br><span class="line">        <span class="keyword">this</span>.changed = <span class="keyword">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 修改数据内容</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> newContent 新内容</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">synchronized</span> <span class="keyword">void</span> <span class="title">change</span><span class="params">(String newContent)</span> </span>&#123;</span><br><span class="line">        content = newContent;</span><br><span class="line">        changed = <span class="keyword">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 若数据内容已经修改，则保存到文件中</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">synchronized</span> <span class="keyword">void</span> <span class="title">save</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (!changed) &#123;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        doSave();</span><br><span class="line">        changed = <span class="keyword">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 将数据内容保存到文件</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">doSave</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(Thread.currentThread().getName() + <span class="string">" save content: "</span> + content);</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            Writer writer = <span class="keyword">new</span> FileWriter(fileName);</span><br><span class="line">            writer.write(content);</span><br><span class="line">            writer.close();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            System.err.println(String.format(<span class="string">"save error, fileName = %s, content = %s"</span>, fileName, content) + e);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>ChangerThread类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 修改并保存数据内容的类</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> wugang</span></span><br><span class="line"><span class="comment"> * date: 2020-08-18 11:18</span></span><br><span class="line"><span class="comment"> **/</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ChangerThread</span> <span class="keyword">extends</span> <span class="title">Thread</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> Data data;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> Random random;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">ChangerThread</span><span class="params">(String name, Data data)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>(name);</span><br><span class="line">        <span class="keyword">this</span>.data = data;</span><br><span class="line">        <span class="keyword">this</span>.random = <span class="keyword">new</span> Random();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; <span class="keyword">true</span> ; i++) &#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                data.change(<span class="string">"No."</span> + i);</span><br><span class="line">                Thread.sleep(random.nextInt(<span class="number">1000</span>));</span><br><span class="line">                data.save();</span><br><span class="line">            &#125; <span class="keyword">catch</span> (InterruptedException ignored) &#123;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>SaverThread类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 定期保存数据内容的类</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> wugang</span></span><br><span class="line"><span class="comment"> * date: 2020-08-18 11:17</span></span><br><span class="line"><span class="comment"> **/</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SaverThread</span> <span class="keyword">extends</span> <span class="title">Thread</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> Data data;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">SaverThread</span><span class="params">(String name, Data data)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>(name);</span><br><span class="line">        <span class="keyword">this</span>.data = data;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">while</span> (<span class="keyword">true</span>) &#123;</span><br><span class="line">            <span class="comment">// 保存数据</span></span><br><span class="line">            data.save();</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                <span class="comment">// 每隔1s就保存一次</span></span><br><span class="line">                TimeUnit.SECONDS.sleep(<span class="number">1</span>);</span><br><span class="line">            &#125; <span class="keyword">catch</span> (InterruptedException ignored) &#123;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
          <category> 并发 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> 并发 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>并发模式-3：Guarded Suspension模式：保护暂停</title>
      <link href="/ckdzm6t9500009eyd7mgih05q/"/>
      <url>/ckdzm6t9500009eyd7mgih05q/</url>
      
        <content type="html"><![CDATA[<p>Guarded Suspension模式思想就是：<code>如果执行现在的处理会造成问题，那就让执行处理的线程进行等待</code>。<br><code>Guarded Suspension模式通过让线程等待来保护实例的安全性</code>。就像你没穿衣服，让快递员在门口等你一会儿来保护你的隐私一样。<br>也就是说，<code>该模式存在一个持有状态的对象，该对象只有在自身状态合适时，才会允许线程进行目标处理</code>。</p><p><code>在Single Threaded Execution模式中，只要有一个线程进入临界区，其他线程就无法进入，只能等待</code>。而<code>在Guarded Suspension模式中，线程是否等待取决于守护条件</code>。后者是在前者基础上添加了附加条件而形成的。</p><a id="more"></a><h2 id="Guarded-Suspension模式"><a href="#Guarded-Suspension模式" class="headerlink" title="Guarded Suspension模式"></a>Guarded Suspension模式</h2><h3 id="GuardedObject（被守护的对象）"><a href="#GuardedObject（被守护的对象）" class="headerlink" title="GuardedObject（被守护的对象）"></a>GuardedObject（被守护的对象）</h3><p>GuardedObject角色是一个持有被守护方法的类。<code>当线程执行该守护方法guardedMethod时，如守护条件成立，则可以立即执行；否则就需进行等待。</code><br>守护条件的成立与否会跟随GuardedObject角色的状态不同而发生变化。<br>除了guardedMethod之外，GuardedObject角色还有可能持有其他改变实例状态的方法stateChangingMethod，特别是改变守护条件。</p><p>在Java中，可以<code>使用while语句和wait方法来实现守护方法guardedMethod</code>，而<code>改变实例状态的方法stateChangingMethod可以通过notify/notifyAll来实现</code>。</p><p><img src="https://cdn.jsdelivr.net/gh/bubblewu/cdn/images/concurrent/guarded_suspension.png" alt="GuardedSuspension模式"></p><h2 id="案例"><a href="#案例" class="headerlink" title="案例"></a>案例</h2><p>案例中的RequestQueue类扮演GuardedObject守护角色，getRequest方法就是guardedMethod守护方法，putRequest方法就是stateChangingMethod改变实例状态的方法。</p><ul><li>Main：<br>一个线程ClientThread将请求Request的实例传递给另一个线程ServerThread。<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        RequestQueue requestQueue = <span class="keyword">new</span> RequestQueue();</span><br><span class="line">        <span class="keyword">new</span> ClientThread(requestQueue, <span class="string">"大泡泡"</span>, <span class="number">2020</span>).start();</span><br><span class="line">        <span class="keyword">new</span> ServerThread(requestQueue, <span class="string">"Bubble"</span>, <span class="number">2020</span>).start();</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure></li></ul><p>输出：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">大泡泡请求：[Request: No.0]</span><br><span class="line">Bubble处理：[Request: No.0]</span><br><span class="line">大泡泡请求：[Request: No.1]</span><br><span class="line">Bubble处理：[Request: No.1]</span><br><span class="line">大泡泡请求：[Request: No.2]</span><br><span class="line">Bubble处理：[Request: No.2]</span><br><span class="line">大泡泡请求：[Request: No.3]</span><br><span class="line">Bubble处理：[Request: No.3]</span><br><span class="line">大泡泡请求：[Request: No.4]</span><br><span class="line">Bubble处理：[Request: No.4]</span><br></pre></td></tr></table></figure><ul><li><p>Request:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 表示一个请求的类</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> wugang</span></span><br><span class="line"><span class="comment"> * date: 2020-08-17 18:25</span></span><br><span class="line"><span class="comment"> **/</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Request</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> String name;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Request</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getName</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"[Request: "</span> + name + <span class="string">"]"</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>RequestQueue:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 请求存放队列</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> wugang</span></span><br><span class="line"><span class="comment"> * date: 2020-08-17 18:25</span></span><br><span class="line"><span class="comment"> **/</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">RequestQueue</span> </span>&#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * FIFO队列，存放请求。</span></span><br><span class="line"><span class="comment">     * 下面的get和put方法都是用了Synchronized来保护queue字段（LinkedList的实例），</span></span><br><span class="line"><span class="comment">     * 保证它是SingleThreadedExecution模式的即getRequest()中的两个处理（前置条件和目标处理）必须同时由一个线程来执行。</span></span><br><span class="line"><span class="comment">     * - 判断queue中是痘存在可取的元素；</span></span><br><span class="line"><span class="comment">     * - 从queue中取出一个元素</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> Queue&lt;Request&gt; queue = <span class="keyword">new</span> LinkedList&lt;&gt;();</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 取出并返回最先存放的那个请求。</span></span><br><span class="line"><span class="comment">     * 如队列为空，就一直等待，直到唤醒。</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 最先存放的那个请求</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">synchronized</span> Request <span class="title">getRequest</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 如队列存在元素，就会返回头元素（不删除）；如为空，则返回null</span></span><br><span class="line">        <span class="comment">// 也就是Guarded Suspension模式中的守护条件，即目前进行处理的前置条件</span></span><br><span class="line">        <span class="keyword">while</span> (queue.peek() == <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                <span class="comment">// 线程要执行某个实例的wait方法时，线程必须获取该实例的锁。</span></span><br><span class="line">                <span class="comment">// wait方法被调用时，获取的时this的锁。</span></span><br><span class="line">                <span class="comment">// 执行this的wait方法后，线程进入this的等待队列，并释放持有的this锁。</span></span><br><span class="line">                <span class="comment">// notify、notifyAll或interrupt会让线程退出等待队列，但在实际地继续执行处理之前，还必须再获取this的锁。</span></span><br><span class="line">                wait();</span><br><span class="line">            &#125; <span class="keyword">catch</span> (InterruptedException ignored) &#123;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 移除队列中的第一个元素并返回，如队列为空则抛出NoSuchElementException</span></span><br><span class="line">        <span class="keyword">return</span> queue.remove();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 添加一个请求到队列</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> request 请求</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">synchronized</span> <span class="keyword">void</span> <span class="title">putRequest</span><span class="params">(Request request)</span> </span>&#123;</span><br><span class="line">        queue.offer(request);</span><br><span class="line">        notifyAll();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>ClientThread:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 发送请求的类：将请求加入到队列中</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> wugang</span></span><br><span class="line"><span class="comment"> * date: 2020-08-17 18:25</span></span><br><span class="line"><span class="comment"> **/</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ClientThread</span> <span class="keyword">extends</span> <span class="title">Thread</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> Random random;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> RequestQueue queue;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">ClientThread</span><span class="params">(RequestQueue queue, String name, <span class="keyword">long</span> seed)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>(name);</span><br><span class="line">        <span class="keyword">this</span>.queue = queue;</span><br><span class="line">        <span class="keyword">this</span>.random = <span class="keyword">new</span> Random(seed);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">10000</span>; i++) &#123;</span><br><span class="line">            Request request = <span class="keyword">new</span> Request(<span class="string">"No."</span> + i);</span><br><span class="line">            System.out.println(Thread.currentThread().getName() + <span class="string">"请求："</span> + request);</span><br><span class="line">            queue.putRequest(request);</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                TimeUnit.MILLISECONDS.sleep(random.nextInt(<span class="number">1000</span>));</span><br><span class="line">            &#125; <span class="keyword">catch</span> (InterruptedException ignore) &#123;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>ServerThread:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 接收请求的类</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> wugang</span></span><br><span class="line"><span class="comment"> * date: 2020-08-17 18:26</span></span><br><span class="line"><span class="comment"> **/</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ServerThread</span> <span class="keyword">extends</span> <span class="title">Thread</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> Random random;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> RequestQueue queue;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">ServerThread</span><span class="params">(RequestQueue queue, String name, <span class="keyword">long</span> seed)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>(name);</span><br><span class="line">        <span class="keyword">this</span>.queue = queue;</span><br><span class="line">        <span class="keyword">this</span>.random = <span class="keyword">new</span> Random(seed);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">10000</span>; i++) &#123;</span><br><span class="line">            Request request = queue.getRequest();</span><br><span class="line">            System.out.println(Thread.currentThread().getName() + <span class="string">"处理："</span> + request);</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                TimeUnit.MILLISECONDS.sleep(random.nextInt(<span class="number">1000</span>));</span><br><span class="line">            &#125; <span class="keyword">catch</span> (InterruptedException ignore) &#123;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h2 id="扩展"><a href="#扩展" class="headerlink" title="扩展"></a>扩展</h2><h3 id="guarded-wait和busy-wait"><a href="#guarded-wait和busy-wait" class="headerlink" title="guarded wait和busy wait"></a>guarded wait和busy wait</h3><h4 id="guarded-wait"><a href="#guarded-wait" class="headerlink" title="guarded wait"></a>guarded wait</h4><p>guarded wait是<code>被守护而等待</code>的意思。</p><ul><li>实现方法为：<br><code>线程使用wait进行等待，被notify或notifyAll后，再次检查条件是否成立</code>。</li></ul><p><strong>由于线程在使用wait进行等待期间，是待在等待队列中停止执行的，所以不会浪费Java虚拟机的处理时间。</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 等待端</span></span><br><span class="line"><span class="keyword">while</span>(!ready) &#123;</span><br><span class="line">    wait();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 唤醒端</span></span><br><span class="line">ready = <span class="keyword">true</span>;</span><br><span class="line">notifyAll();</span><br></pre></td></tr></table></figure><h4 id="busy-wait"><a href="#busy-wait" class="headerlink" title="busy wait"></a>busy wait</h4><p>busy wait是<code>忙于等待</code>的意思。</p><ul><li>实现方法：<br>线程不使用wait进行等待，而是<code>执行yield方法（尽可能将优先级让给其他线程）的同时检查守护条件</code>。</li></ul><p><strong>由于等待端的线程也是持续运行的，所以浪费Java虚拟机的时间</strong>。</p><p>wait是Object类的final方法，而yield是Thread类的静态本地方法。</p>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
          <category> 并发 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> 并发 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>DB之Redis</title>
      <link href="/ckdpvhqe000000cyd631hfn7f/"/>
      <url>/ckdpvhqe000000cyd631hfn7f/</url>
      
        <content type="html"><![CDATA[<p>本文详细讲解了关于Redis的知识点。</p><a id="more"></a><h2 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h2><h3 id="什么是Redis"><a href="#什么是Redis" class="headerlink" title="什么是Redis"></a>什么是Redis</h3><p>Redis是基于C语言编写的、支持网络、可基于内存亦可持久化的日志型、Key-Value数据库，并提供多种语言的API。</p><h3 id="主要特性"><a href="#主要特性" class="headerlink" title="主要特性"></a>主要特性</h3><p>整理了Redis的7种特性，有：</p><ul><li><code>速度快</code>：<br>处理速度非常快，每秒能执行约11万集合，每秒约81000+记录。<blockquote><p>速度快的原因是：</p><ul><li>基于C语言实现，效率高；</li><li><code>数据存储在内存中，读取速度快</code>；（主要）</li><li>单线程模型，避免线程上下文切换和竞态消耗；</li><li>使用了<code>多路I/O复用模型</code>；<blockquote><p>这里“多路”指的是<strong>多个网络连接</strong>，“复用”指的是<strong>复用同一个线程</strong>。<br>采用多路 I/O 复用技术可以让单个线程高效的处理多个连接请求（尽量减少网络IO的时间消耗），且Redis在内存中操作数据的速度非常快（内存内的操作不会成为这里的性能瓶颈），主要以上两点造就了Redis具有很高的吞吐量。<br><code>多路 I/O 复用模型</code>是利用select、poll、epoll可以同时监察多个流的 I/O 事件的能力，在空闲的时候，会把当前线程阻塞掉，当有一个或多个流有I/O事件时，就从阻塞态中唤醒，于是程序就会轮询一遍所有的流（epoll是只轮询那些真正发出了事件的流），并且只依次顺序的处理就绪的流，这种做法就避免了大量的无用操作。</p></blockquote></li></ul></blockquote></li></ul><blockquote><blockquote><p>注意：</p><ul><li><p>单线程：<br><code>Redis内部使用文件事件处理器FileEventHandler，这个处理器是单线程的，所以Redis也被叫做单线程的模型</code>。它采用IO多路复用机制同时监听多个socket，根据socket上的事件来选择对应的事件处理器来进行处理。</p></li><li><p>非单线程：<br>Redis内部也有许多多线程操作，如fysnc file descriptor和close file descritor操作时会有独立的线程来操作。<br>持久化使用RDB时，手动使用bgsave命令触发时，会调用系统的fork函数创建子进程后台处理。即 Redis 使用操作系统的fork多进程 COW(Copy On Write) 机制来实现快照持久化。<br>持久化AOF时的瘦身操作，fork子线程进行命令合并；</p></li></ul></blockquote></blockquote><ul><li><p><code>可持久化</code>：<br>支持持久化，即使机器宕机或断电也不会丢失数据。<br>因为数据保存在内存中，对数据的更新将会异步的保存到磁盘上。</p><blockquote><p>主要有三种持久化方式：</p><ul><li><strong>快照</strong>：一种半持久模式，不时的将数据集以异步的方式从内存以RDB格式写入硬盘；</li><li><strong>AOF可追加文件</strong>：将数据集的修改操作追加记录；</li><li><strong>快照和AOF混合使用</strong>：</li></ul></blockquote></li><li><p><code>多种数据结构</code>：<br>5种常见的数据结构：字符串（String）、散列哈希（Hash）、列表（List）、集合（Set）和有序集合（Sort Set）。<br>其他的还有位图（BitMaps）、HyperLogLog（超小内存的唯一值计数）、GEO（地理信息定位）。</p></li><li><p><code>功能丰富</code>：<br>支持发布订阅、Lua脚本（原子性的操作）、事务、pipeline管道操作；</p></li><li><p><code>主从复制</code>：<br>支持主从同步，确保Master和Slave之间的数据同步。可以将数据复制到任意数量的从服务器，而从服务器也是可以关联其他从服务器的主服务器。</p></li></ul><p>由于完全实现了发布订阅机制，使得从Slave在任何地方同步数据时，就可以订阅一个频道并接收Master完整的发布记录。</p><ul><li><p><code>高可用、分布式、集群模式</code>：<br>支持集群模式，Sentinel哨兵机制支持高可用。</p></li><li><p><code>支持多种编程语言，使用简单</code>：<br>如Java、Python等热门语言，都提供了API可以使用。</p></li></ul><h3 id="应用场景"><a href="#应用场景" class="headerlink" title="应用场景"></a>应用场景</h3><h4 id="缓存系统"><a href="#缓存系统" class="headerlink" title="缓存系统"></a>缓存系统</h4><p>如JetCache中Local使用Caffeine，Remote使用Redis。</p><h5 id="为什么用Redis做缓存？"><a href="#为什么用Redis做缓存？" class="headerlink" title="为什么用Redis做缓存？"></a>为什么用Redis做缓存？</h5><p>主要是基于<code>高性能</code>和<code>高并发</code>两个方面考虑，才使用缓存。<br>缓存分为本地缓存和远程缓存。<code>本地缓存</code>的特点是轻量且快速，生命周期随着JVM的销毁而结束，如果多实例或多机器的情况下，每个实例或机器都需要保存一份本地缓存，浪费空间而且不具备一致性。<br><code>远程缓存</code>也可称为分布式缓存，如Redis或MemCached等，使用远程缓存多个实例或机器可共用一份缓存，能够保证一致性，但需要Redis自身保持高可用。</p><p>而Redis是单线程的，基于内存的数据库，支持持久化和高可用，数据结构丰富，多用于缓存系统。</p><h5 id="Redis与MemCached的区别"><a href="#Redis与MemCached的区别" class="headerlink" title="Redis与MemCached的区别"></a>Redis与MemCached的区别</h5><ul><li>Redis支持丰富的数据结构，而MemCached支持简单的String类型（新增了二进制类型）；</li><li>Redis支持数据持久化，而MemCached是数据全部存在内存中；</li><li>Redis支持集群模式，而MemCached没有原生集群模式，需要依靠客户端来实现往集群中分片写入数据；</li><li>Redis使用单线程的IO多路复用模型。MemCached是多线程的，非阻塞IO复用的网络模型。</li></ul><h4 id="消息队列系统"><a href="#消息队列系统" class="headerlink" title="消息队列系统"></a>消息队列系统</h4><p>Redis 发布订阅(pub/sub)是一种消息通信模式：发送者(pub)发送消息，订阅者(sub)接收消息。<br>Redis 客户端可以订阅任意数量的频道。</p><p>还可以基于List结构的消息队列：lpush + brpop = message queue 阻塞式先进先出</p><h4 id="计数器"><a href="#计数器" class="headerlink" title="计数器"></a>计数器</h4><p>increment方法实现。</p><ul><li>1、计数器：记录用户个人主页的访问量<br>可以使用 <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">incr userId:pageView</span><br><span class="line">&#96;&#96;&#96;&#96; </span><br><span class="line">单线程无竞争的，来记录每个用户每个页面的访问量</span><br><span class="line">- 2、计数器：记录网站每个用户某页的访问量</span><br><span class="line">&#96;&#96;&#96;redis</span><br><span class="line">hincrby user pageView count</span><br></pre></td></tr></table></figure></li></ul><h4 id="排行榜功能"><a href="#排行榜功能" class="headerlink" title="排行榜功能"></a>排行榜功能</h4><p>有序集合Zset里面的元素是唯一的，有序的，按分数从小到大排序。<br>如：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">zadd key score1 element1 score2 element2 ...</span><br></pre></td></tr></table></figure><p>score可以为：时间戳、销量、关注人数等</p><h4 id="社交网络"><a href="#社交网络" class="headerlink" title="社交网络"></a>社交网络</h4><p>如社交网络应用中的点赞数、粉丝数、关注数等。<br>可以将点赞用户存在set集合中，scard获取其大小。</p><h4 id="实时系统过滤器"><a href="#实时系统过滤器" class="headerlink" title="实时系统过滤器"></a>实时系统过滤器</h4><p>实现过滤功能，如布隆过滤器。</p><h2 id="安装部署"><a href="#安装部署" class="headerlink" title="安装部署"></a>安装部署</h2><h3 id="四种安装方式"><a href="#四种安装方式" class="headerlink" title="四种安装方式"></a>四种安装方式</h3><p>具体安装部署方式可参考官网或其他文章，比较简单。</p><ul><li>单机模式：</li><li>主从模式：</li><li>Sentinel哨兵模式；</li><li>Cluster集群模式：</li></ul><h3 id="可执行文件"><a href="#可执行文件" class="headerlink" title="可执行文件"></a>可执行文件</h3><p>基于Redis 5.0.5版本：</p><ul><li>redis-server 服务器</li><li>redis-cli 命令行客户端，连接服务端</li><li>redis-benchmark 基准和性能测试</li><li>redis-check-aof AOF文件修复工具</li><li>redis-check-rdb RDB文件修复工具</li><li>redis-sentinel  启动哨兵节点</li></ul><h3 id="启动"><a href="#启动" class="headerlink" title="启动"></a>启动</h3><h4 id="三种启动方式"><a href="#三种启动方式" class="headerlink" title="三种启动方式"></a>三种启动方式</h4><ul><li><p>简单启动：<br>直接执行redis-server (默认ip为127.0.0.1/localhost，port为6379)</p></li><li><p>动态参数启动：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">redis-server --port 6380</span><br></pre></td></tr></table></figure></li><li><p>配置文件启动（推荐）：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">redis-server redis.conf</span><br></pre></td></tr></table></figure></li></ul><h4 id="验证"><a href="#验证" class="headerlink" title="验证"></a>验证</h4><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">ps -ef | grep redis 查看pid进程；</span><br><span class="line">netstat -antp | grep redis 查看端口是否Listening；</span><br><span class="line">redis-cli -h ip -p port ping  客户端连接ping测试是否返回PONG</span><br></pre></td></tr></table></figure><h4 id="开机启动"><a href="#开机启动" class="headerlink" title="开机启动"></a>开机启动</h4><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">systemctl <span class="built_in">enable</span> redis.service</span><br></pre></td></tr></table></figure><h3 id="配置参数"><a href="#配置参数" class="headerlink" title="配置参数"></a>配置参数</h3><h4 id="线上修改配置"><a href="#线上修改配置" class="headerlink" title="线上修改配置"></a>线上修改配置</h4><p>如果已经启动服务，修改配置需重启，影响线上服务；<br><strong>可以使用客户端命令修改（不会修改配置文件，临时生效，重启后恢复原样）。</strong><br>如下案例：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">127.0.0.1:6379&gt; CONFIG GET appendonly</span><br><span class="line">1) &quot;appendonly&quot;</span><br><span class="line">2) &quot;no&quot;</span><br><span class="line">127.0.0.1:6379&gt;</span><br><span class="line">127.0.0.1:6379&gt;</span><br><span class="line">127.0.0.1:6379&gt; CONFIG SET appendonly yes</span><br></pre></td></tr></table></figure><h4 id="配置文件详解"><a href="#配置文件详解" class="headerlink" title="配置文件详解"></a>配置文件详解</h4><p>基于Redis 5.0.5版本：</p><h5 id="网络-Network"><a href="#网络-Network" class="headerlink" title="网络 Network"></a>网络 Network</h5><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">################################## NETWORK #####################################</span></span><br><span class="line"><span class="comment"># ip绑定，默认127.0.0.1。多个逗号分割</span></span><br><span class="line"><span class="comment"># 注意：0.0.0.0 仅在测试环境下，生成环境需绑定具体的ip</span></span><br><span class="line"><span class="built_in">bind</span> 127.0.0.1</span><br><span class="line"></span><br><span class="line"><span class="comment"># 是否开启保护模式，默认yes。</span></span><br><span class="line"><span class="comment"># 要是配置里没有指定bind和密码。开启该参数后，redis只会本地进行访问，拒绝外部访问</span></span><br><span class="line">protected-mode yes</span><br><span class="line"></span><br><span class="line"><span class="comment"># redis对外端口，默认6379，当单机多实例时需指定不同端口</span></span><br><span class="line">port 6379</span><br><span class="line"></span><br><span class="line"><span class="comment"># 确定了TCP连接中已完成队列(完成三次握手之后)的长度。</span></span><br><span class="line"><span class="comment"># 当然此值必须不大于Linux系统定义的/proc/sys/net/core/somaxconn值，默认是511，而Linux的默认参数值是128。</span></span><br><span class="line"><span class="comment"># 当系统并发量大并且客户端速度缓慢的时候，可以将这二个参数一起参考设定。</span></span><br><span class="line"><span class="comment"># 该内核参数默认值一般是128，对于负载很大的服务程序来说大大的不够。一般会将它修改为2048或者更大。</span></span><br><span class="line"><span class="comment"># 在/etc/sysctl.conf中添加:net.core.somaxconn = 2048，然后在终端中执行sysctl -p。</span></span><br><span class="line">tcp-backlog 511</span><br><span class="line"></span><br><span class="line"><span class="comment"># 设置客户端空闲超过timeout，服务端会断开连接，为0则服务端不会主动断开连接，不能小于0。</span></span><br><span class="line">timeout 0</span><br><span class="line"></span><br><span class="line"><span class="comment"># 如果设置不为0，就使用配置tcp的SO_KEEPALIVE值。</span></span><br><span class="line"><span class="comment"># 使用keepalive有两个好处:</span></span><br><span class="line"><span class="comment"># - 检测挂掉的对端。</span></span><br><span class="line"><span class="comment"># - 降低中间设备出问题而导致网络看似连接却已经与对端端口的问题。</span></span><br><span class="line"><span class="comment"># 在Linux内核中，设置了keepalive，redis会定时给对端发送ack。检测到对端关闭需要两倍的设置值。</span></span><br><span class="line">tcp-keepalive 300</span><br></pre></td></tr></table></figure><h5 id="通用配置-Gennral"><a href="#通用配置-Gennral" class="headerlink" title="通用配置 Gennral"></a>通用配置 Gennral</h5><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">################################# GENERAL #####################################</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 是否以守护进程（no/yes）的方式启动，</span></span><br><span class="line"><span class="comment"># 默认为no，不是作为守护进程运行的，</span></span><br><span class="line"><span class="comment"># 如果你想让它在后台运行，你就把它改成 yes。</span></span><br><span class="line"><span class="comment"># 当redis作为守护进程运行的时候，它会写一个 pid 到 /var/run/redis.pid 文件里面</span></span><br><span class="line">daemonize no</span><br><span class="line"></span><br><span class="line"><span class="comment"># 可以通过upstart和systemd管理Redis守护进程：</span></span><br><span class="line"><span class="comment"># - supervised no - 没有监督互动；</span></span><br><span class="line"><span class="comment"># - supervised upstart - 通过将Redis置于SIGSTOP模式来启动信号；</span></span><br><span class="line"><span class="comment"># - supervised systemd - signal systemd将READY = 1写入$ NOTIFY_SOCKET；</span></span><br><span class="line"><span class="comment"># - supervised auto - 检测upstart或systemd方法基于 UPSTART_JOB或NOTIFY_SOCKET环境变量；</span></span><br><span class="line">supervised no</span><br><span class="line"></span><br><span class="line"><span class="comment"># 配置PID文件路径，当redis作为守护进程运行的时候，它会把 pid 默认写到 /var/redis/run/redis_6379.pid 文件里面</span></span><br><span class="line">pidfile /var/run/redis_6379.pid</span><br><span class="line"></span><br><span class="line"><span class="comment"># 定义日志级别：</span></span><br><span class="line"><span class="comment"># - debug（记录大量日志信息，适用于开发、测试阶段）</span></span><br><span class="line"><span class="comment"># - verbose（较多日志信息）</span></span><br><span class="line"><span class="comment"># -  notice（适量日志信息，使用于生产环境）</span></span><br><span class="line"><span class="comment"># -  warning（仅有部分重要、关键信息才会被记录）</span></span><br><span class="line">loglevel notice</span><br><span class="line"></span><br><span class="line"><span class="comment"># Redis系统日志，文件名。</span></span><br><span class="line"><span class="comment"># 日志文件的位置，当指定为空字符串时，为标准输出；</span></span><br><span class="line"><span class="comment"># 如果redis已守护进程模式运行，那么日志将会输出到/dev/null</span></span><br><span class="line">logfile <span class="string">""</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 设置数据库的数目。默认的数据库是DB 0 。</span></span><br><span class="line"><span class="comment"># 可以在每个连接上使用select  &lt;dbid&gt; 命令选择一个不同的数据库。</span></span><br><span class="line">databases 16</span><br><span class="line"></span><br><span class="line"><span class="comment"># 是否总是显示logo</span></span><br><span class="line">always-show-logo yes</span><br></pre></td></tr></table></figure><h5 id="快照-SnapShotting"><a href="#快照-SnapShotting" class="headerlink" title="快照 SnapShotting"></a>快照 SnapShotting</h5><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">################################ SNAPSHOTTING  ################################</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 存 DB 到磁盘：格式：save &lt;间隔时间（秒）&gt; &lt;写入次数&gt;</span></span><br><span class="line"><span class="comment"># 根据给定的时间间隔和写入次数将数据保存到磁盘。</span></span><br><span class="line"><span class="comment"># 下面的例子的意思是：</span></span><br><span class="line"><span class="comment">#  -  900 秒内如果至少有 1 个 key 的值变化，则保存</span></span><br><span class="line"><span class="comment">#  -  300 秒内如果至少有 10 个 key 的值变化，则保存</span></span><br><span class="line"><span class="comment">#  -  60 秒内如果至少有 10000 个 key 的值变化，则保存</span></span><br><span class="line"><span class="comment">#  注意：你可以注释掉所有的 save 行来停用保存功能。</span></span><br><span class="line"><span class="comment"># 也可以直接一个空字符串来实现停用：save ""</span></span><br><span class="line">save 900 1</span><br><span class="line">save 300 10</span><br><span class="line">save 60 10000</span><br><span class="line"></span><br><span class="line"><span class="comment"># 如果用户开启了RDB快照功能，那么在redis持久化数据到磁盘时如果出现失败，默认情况下，redis会停止接受所有的写请求。</span></span><br><span class="line"><span class="comment"># 可以让用户很明确的知道内存中的数据和磁盘上的数据已经存在不一致了。</span></span><br><span class="line"><span class="comment">#   如果redis不顾这种不一致，一意孤行的继续接收写请求，就可能会引起一些灾难性的后果。</span></span><br><span class="line"><span class="comment">#   如果下一次RDB持久化成功，redis会自动恢复接受写请求。</span></span><br><span class="line"><span class="comment">#   如果不在乎这种数据不一致或者有其他的手段发现和控制这种不一致的话，可以关闭这个功能，</span></span><br><span class="line"><span class="comment">#   以便在快照写入失败时，也能确保redis继续接受新的写请求。</span></span><br><span class="line">stop-writes-on-bgsave-error yes</span><br><span class="line"></span><br><span class="line"><span class="comment"># 对于存储到磁盘中的快照，可以设置是否进行压缩存储。</span></span><br><span class="line"><span class="comment"># 如果是的话，redis会采用LZF算法进行压缩。</span></span><br><span class="line"><span class="comment"># 如果你不想消耗CPU来进行压缩的话， 可以设置为关闭此功能，但是存储在磁盘上的快照会比较大</span></span><br><span class="line">rdbcompression yes</span><br><span class="line"></span><br><span class="line"><span class="comment"># 在存储快照后，我们还可以让redis使用CRC64算法来进行数据校验，但是这样做会增加大约10%的性能消耗，</span></span><br><span class="line"><span class="comment">#   如果希望获取到最大的性能提升，可以关闭此功能。</span></span><br><span class="line">rdbchecksum yes</span><br><span class="line"></span><br><span class="line"><span class="comment"># 设置快照的文件名</span></span><br><span class="line">dbfilename dump.rdb</span><br><span class="line"></span><br><span class="line"><span class="comment"># Redis工作目录，  设置快照文件的存放路径，这个配置项一定是个目录，而不能是文件名</span></span><br><span class="line">dir ./</span><br></pre></td></tr></table></figure><h5 id="主从复制-Replication"><a href="#主从复制-Replication" class="headerlink" title="主从复制 Replication"></a>主从复制 Replication</h5><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">################################# REPLICATION #################################</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 当设置本机为从服务器时，设置master服务的IP地址及端口，在Redis启动时，它会自动从master进行数据同步</span></span><br><span class="line"><span class="comment"># replicaof &lt;masterip&gt; &lt;masterport&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 当master服务设置了密码保护时，从服务器连接master的密码</span></span><br><span class="line"><span class="comment"># masterauth &lt;master-password&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 当主从连接中断，或者主从复制建立期间，是否允许从服务器对外提供服务。</span></span><br><span class="line"><span class="comment"># 默认为yes,即允许对外提供服务，但有可能读到脏数据。</span></span><br><span class="line"><span class="comment"># slave 可能会有两种表现：</span></span><br><span class="line"><span class="comment">#   1) 如果为 yes ，slave 仍然会应答客户端请求，但返回的数据可能是过时， 或者数据可能是空的在第一次同步的时候</span></span><br><span class="line"><span class="comment">#   2) 如果为 no ，在你执行除了 info he salveof 之外的其他命令时，slave 都将返回一个 "SYNC with master in progress" 的错误</span></span><br><span class="line">replica-serve-stale-data yes</span><br><span class="line"></span><br><span class="line"><span class="comment"># 配置一个 slave 实体是否接受写入操作。</span></span><br><span class="line"><span class="comment"># 通过写入操作来存储一些短暂的数据对于一个 slave 实例来说可能是有用的，</span></span><br><span class="line"><span class="comment">#   因为相对从 master 重新同步数而言，把数据写入到 slave 会更容易被删除。</span></span><br><span class="line"><span class="comment">#   但是如果客户端因为一个错误的配置写入，也可能会导致一些问题。</span></span><br><span class="line"><span class="comment">#   从 redis 2.6 版起，默认 slaves 都是只读的。</span></span><br><span class="line">replica-read-only yes</span><br><span class="line"></span><br><span class="line"><span class="comment"># 主从数据复制是否使用无硬盘复制功能。即是否使用socket方式复制数据。</span></span><br><span class="line"><span class="comment"># 目前redis复制提供两种方式，disk和socket。</span></span><br><span class="line"><span class="comment"># 如果新的slave连上来或者重连的slave无法部分同步，就会执行全量同步，master会生成rdb文件。</span></span><br><span class="line"><span class="comment"># 有2种方式：</span></span><br><span class="line"><span class="comment"># - disk方式是master创建一个新的进程把rdb文件保存到磁盘，再把磁盘上的rdb文件传递给slave。</span></span><br><span class="line"><span class="comment"># - socket是master创建一个新的进程，直接把rdb文件以socket的方式发给slave。</span></span><br><span class="line"><span class="comment"># disk方式的时候，当一个rdb保存的过程中，多个slave都能共享这个rdb文件。</span></span><br><span class="line"><span class="comment"># socket的方式就的一个个slave顺序复制。</span></span><br><span class="line"><span class="comment"># 在磁盘速度缓慢，网速快的情况下推荐用socket方式。</span></span><br><span class="line">repl-diskless-sync no</span><br><span class="line"></span><br><span class="line"><span class="comment"># 当使用socket复制数据启用的时候，socket复制的延迟时间，如果设置成0表示禁用，默认值是5s。</span></span><br><span class="line">repl-diskless-sync-delay 5</span><br><span class="line"></span><br><span class="line"><span class="comment"># 从节点根据指定的时间间隔向主节点发起ping请求</span></span><br><span class="line"><span class="comment"># repl-ping-replica-period 10</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 复制连接超时时间。</span></span><br><span class="line"><span class="comment"># 需要注意的是repl-timeout需要设置一个比repl-ping-slave-period更大的值，不然会经常检测到超时</span></span><br><span class="line"><span class="comment"># repl-timeout 60</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 是否禁止复制tcp链接的tcp nodelay参数，可传递yes或者no。默认是no，即使用tcp nodelay。</span></span><br><span class="line"><span class="comment"># 如果master设置了yes来禁止tcp nodelay设置，在把数据复制给slave的时候，会减少包的数量和更小的网络带宽。但是这也可能带来数据的延迟。</span></span><br><span class="line"><span class="comment"># 默认我们推荐更小的延迟，但是在数据量传输很大的场景下，建议选择yes。</span></span><br><span class="line">repl-disable-tcp-nodelay no</span><br><span class="line"></span><br><span class="line"><span class="comment"># 复制缓冲区大小， 默认是1mb</span></span><br><span class="line"><span class="comment"># 当从节点在一段时间内断开连接时，主节点会收集数据到backlog这个缓冲区，</span></span><br><span class="line"><span class="comment"># 因此当一个从节点想要重新连接时，通常不需要完全的重新同步，但是部分的重新同步就足够了，只是通过在断开连接的时候传递数据的一部分。</span></span><br><span class="line"><span class="comment"># repl-backlog-size 1mb</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 单位s。当主节点不再联系从节点，则释放backlog(内存)</span></span><br><span class="line"><span class="comment"># repl-backlog-ttl 3600</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 从节点优先级。</span></span><br><span class="line"><span class="comment"># 当master不可用，Sentinel会根据slave的优先级选举一个master。</span></span><br><span class="line"><span class="comment"># 最低的优先级的slave，当选master。</span></span><br><span class="line"><span class="comment"># 而配置成0，永远不会被选举</span></span><br><span class="line">replica-priority 100</span><br><span class="line"></span><br><span class="line"><span class="comment"># 当健康的slave的个数小于N，mater就禁止写入</span></span><br><span class="line"><span class="comment"># min-replicas-to-write 3</span></span><br><span class="line"><span class="comment"># 延迟小于min-slaves-max-lag秒的slave才认为是健康的slave</span></span><br><span class="line"><span class="comment"># min-replicas-max-lag 10</span></span><br></pre></td></tr></table></figure><h5 id="安全-Security"><a href="#安全-Security" class="headerlink" title="安全 Security"></a>安全 Security</h5><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">################################## SECURITY ###################################</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># requirepass配置可以让用户使用AUTH命令来认证密码，才能使用其他命令。</span></span><br><span class="line"><span class="comment"># 这让redis可以使用在不受信任的网络中。为了保持向后的兼容性，可以注释该命令，因为大部分用户也不需要认证。</span></span><br><span class="line"><span class="comment"># 使用requirepass的时候需要注意，因为redis太快了，每秒可以认证15w次密码，简单的密码很容易被攻破，所以最好使用一个更复杂的密码。注意只有密码没有用户名。</span></span><br><span class="line"><span class="comment"># requirepass foobared</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 把危险的命令给修改成其他名称。</span></span><br><span class="line"><span class="comment"># 比如CONFIG命令可以重命名为一个很难被猜到的命令，这样用户不能使用，而内部工具还能接着使用。</span></span><br><span class="line"><span class="comment"># rename-command CONFIG b840fc02d524045429941cc15f59e41cb7be6c52</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 设置成一个空的值，可以禁止一个命令</span></span><br><span class="line"><span class="comment"># rename-command CONFIG ""</span></span><br></pre></td></tr></table></figure><h5 id="客户端-Clients"><a href="#客户端-Clients" class="headerlink" title="客户端 Clients"></a>客户端 Clients</h5><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">################################### CLIENTS ####################################</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 设置能连上redis的最大客户端连接数量。</span></span><br><span class="line"><span class="comment"># 默认是10000个客户端连接。</span></span><br><span class="line"><span class="comment"># 由于redis不区分连接是客户端连接还是内部打开文件或者和slave连接等，所以maxclients最小建议设置到32。</span></span><br><span class="line"><span class="comment"># 如果超过了maxclients，redis会给新的连接发送max number of clients reached，并关闭连接。</span></span><br><span class="line"><span class="comment"># maxclients 10000</span></span><br></pre></td></tr></table></figure><h5 id="内存管理-Memory-Management"><a href="#内存管理-Memory-Management" class="headerlink" title="内存管理 Memory Management"></a>内存管理 Memory Management</h5><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">############################## MEMORY MANAGEMENT ################################</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># redis配置的最大内存容量。</span></span><br><span class="line"><span class="comment"># 当内存满了，需要配合maxmemory-policy策略进行处理。</span></span><br><span class="line"><span class="comment"># 注意slave的输出缓冲区是不计算在maxmemory内的。</span></span><br><span class="line"><span class="comment"># 所以为了防止主机内存使用完，建议设置的maxmemory需要更小一些。</span></span><br><span class="line"><span class="comment"># maxmemory &lt;bytes&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 驱逐策略：内存容量超过maxmemory后的处理策略。</span></span><br><span class="line"><span class="comment"># LRU算法只是预测最近被访问的数据将来最有可能被访问到。我们可以转变思路，采用一种LFU(Least Frequently Used)算法，也就是最频繁被访问的数据将来最有可能被访问到。</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># - volatile-lru：利用LRU算法移除设置过过期时间的key。</span></span><br><span class="line"><span class="comment">## LRU是Least Recently Used的缩写，即最近最少使用，是一种常用的页面置换算法，选择最近最久未使用的页面予以淘汰。</span></span><br><span class="line"><span class="comment"># - volatile-random：随机移除设置过过期时间的key。</span></span><br><span class="line"><span class="comment"># - volatile-ttl：移除即将过期的key，根据最近过期时间来删除（辅以TTL）</span></span><br><span class="line"><span class="comment"># - allkeys-lru：利用LRU算法移除任何key。</span></span><br><span class="line"><span class="comment"># - allkeys-random：随机移除任何key。</span></span><br><span class="line"><span class="comment"># - noeviction：不移除任何key，只是返回一个写错误。</span></span><br><span class="line"><span class="comment"># - volatile-lfu：从已经设置过期时间的数据中，挑选最不经常使用的数据淘汰。</span></span><br><span class="line"><span class="comment"># - allkeys-lfu：当内存不足以容纳新写入数据时，在键空间中，移除最不经常使用的key。</span></span><br><span class="line"><span class="comment"># maxmemory-policy noeviction</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># lru检测的样本数。</span></span><br><span class="line"><span class="comment"># 使用lru或者ttl淘汰算法，从需要淘汰的列表中随机选择sample个key，选出闲置时间最长的key移除。</span></span><br><span class="line"><span class="comment"># maxmemory-samples 5</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 从 Redis 5 开始，默认情况下，replica 节点会忽略 maxmemory 设置（除非在发生 failover 后，此节点被提升为 master 节点）。</span></span><br><span class="line"><span class="comment"># 这意味着只有 master 才会执行过期删除策略，并且 master 在删除键之后会对 replica 发送 DEL 命令。</span></span><br><span class="line"><span class="comment"># replica-ignore-maxmemory yes</span></span><br></pre></td></tr></table></figure><h5 id="惰性-异步删除-LazyFree"><a href="#惰性-异步删除-LazyFree" class="headerlink" title="惰性/异步删除 LazyFree"></a>惰性/异步删除 LazyFree</h5><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">############################# LAZY FREEING ####################################</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Redis 有两种方式删除键。</span></span><br><span class="line"><span class="comment"># - 一种是使用如 DEL 这样的命令进行的同步删除。</span></span><br><span class="line"><span class="comment"># 同步删除意味着删除过程中服务端会停止处理新进来的命令。</span></span><br><span class="line"><span class="comment"># 若要删除的 key 关联了一个小的 object 删除耗时会很短。</span></span><br><span class="line"><span class="comment"># 若要删除的 key 管理了一个很大的 object，比如此对象有上百万个元素，服务端会阻塞相同长一段时间（甚至超过一秒）。</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># - Redis 5.0.5 同时提供了一种非阻塞的方式用于删除。</span></span><br><span class="line"><span class="comment"># 比如 UNLINK（非阻塞的 DEL）以及用于 FLUSHALL 和 FLUSHDB 的 ASYNC 选项，这些命令能在后台回收内存。</span></span><br><span class="line"><span class="comment"># 这些命令能在常数时间内执行完毕。其他线程会在后台尽快回收内存。</span></span><br><span class="line">lazyfree-lazy-eviction no</span><br><span class="line">lazyfree-lazy-expire no</span><br><span class="line">lazyfree-lazy-server-del no</span><br><span class="line">replica-lazy-flush no</span><br></pre></td></tr></table></figure><h5 id="AOF持久化-Append-Only-Mode"><a href="#AOF持久化-Append-Only-Mode" class="headerlink" title="AOF持久化 Append Only Mode"></a>AOF持久化 Append Only Mode</h5><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">############################## APPEND ONLY MODE ###############################</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 默认redis使用的是rdb方式持久化，这种方式在许多应用中已经足够用了。</span></span><br><span class="line"><span class="comment"># 但是redis如果中途宕机，会导致可能有几分钟的数据丢失。</span></span><br><span class="line"><span class="comment"># Append Only File是另一种持久化方式，可以提供更好的持久化特性。</span></span><br><span class="line"><span class="comment"># Redis会把每次写入的数据在接收后都写入 appendonly.aof 文件，每次启动时Redis都会先把这个文件的数据读入内存里，先忽略RDB文件。</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 禁用了appendonly功能，这样的风险是一旦redis实例crash，重启后只能恢复到最近1次快照(即bgsave产生的rdb文件)，可能会丢失很长时间的数据。</span></span><br><span class="line"><span class="comment"># appendonly可以实现准实时刷盘，默认每1s将数据追加到磁盘文件，也可以配置成每次修改都刷盘，当redis crash时最大限度的保证数据完整性。</span></span><br><span class="line">appendonly no</span><br><span class="line"></span><br><span class="line"><span class="comment"># The name of the append only file (default: "appendonly.aof")</span></span><br><span class="line">appendfilename <span class="string">"appendonly.aof"</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># aof持久化策略的配置：</span></span><br><span class="line"><span class="comment"># - no表示不执行fsync，由操作系统保证数据同步到磁盘，速度最快。</span></span><br><span class="line"><span class="comment"># - always表示每次写入都执行fsync，以保证数据同步到磁盘。</span></span><br><span class="line"><span class="comment"># - everysec表示每秒执行一次fsync，可能会导致丢失这1s数据</span></span><br><span class="line"><span class="comment"># appendfsync always</span></span><br><span class="line">appendfsync everysec</span><br><span class="line"><span class="comment"># appendfsync no</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 在aof重写或者写入rdb文件的时候，会执行大量IO，此时对于everysec和always的aof模式来说，执行fsync会造成阻塞过长时间。</span></span><br><span class="line"><span class="comment"># 设置为yes表示rewrite期间对新写操作不fsync,暂时存在内存中,等rewrite完成后再写入，</span></span><br><span class="line"><span class="comment"># 默认为no，建议yes。Linux的默认fsync策略是30秒。可能丢失30秒数据。</span></span><br><span class="line"><span class="comment"># 如果对延迟要求很高的应用，这个字段可以设置为yes，否则还是设置为no，这样对持久化特性来说这是更安全的选择。</span></span><br><span class="line">no-appendfsync-on-rewrite no</span><br><span class="line"></span><br><span class="line"><span class="comment"># aof自动重写配置。</span></span><br><span class="line"><span class="comment"># 当目前aof文件大小超过上一次重写的aof文件大小的百分之多少进行重写。</span></span><br><span class="line"><span class="comment"># 即当aof文件增长到一定大小的时候Redis能够调用bgrewriteaof对日志文件进行重写。</span></span><br><span class="line"><span class="comment"># 当前AOF文件大小是上次日志重写得到AOF文件大小的二倍（设置为100）时，自动启动新的日志重写过程。</span></span><br><span class="line">auto-aof-rewrite-percentage 100</span><br><span class="line"><span class="comment"># 设置允许重写的最小aof文件大小，避免了达到约定百分比但尺寸仍然很小的情况还要重写</span></span><br><span class="line">auto-aof-rewrite-min-size 64mb</span><br><span class="line"></span><br><span class="line"><span class="comment"># 是否redis在启动时可以加载被截断的AOF文件</span></span><br><span class="line">aof-load-truncated yes</span><br><span class="line"></span><br><span class="line"><span class="comment"># 混合持久化：RDB快照和AOF。</span></span><br><span class="line"><span class="comment"># 具体参考内部原理中的持久化之混合持久化</span></span><br><span class="line">aof-use-rdb-preamble yes</span><br></pre></td></tr></table></figure><h5 id="Lua脚本-LUA-SCRIPTING"><a href="#Lua脚本-LUA-SCRIPTING" class="headerlink" title="Lua脚本 LUA SCRIPTING"></a>Lua脚本 LUA SCRIPTING</h5><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">################################ LUA SCRIPTING  ###############################</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 设置lua脚本的最大运行时间,单位为毫秒</span></span><br><span class="line"><span class="comment"># 如果此值设置为0或负数，则既不会有报错也不会有时间限制。</span></span><br><span class="line">lua-time-limit 5000</span><br></pre></td></tr></table></figure><h5 id="集群-Redis-Cluster"><a href="#集群-Redis-Cluster" class="headerlink" title="集群 Redis Cluster"></a>集群 Redis Cluster</h5><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">################################ REDIS CLUSTER  ###############################</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 集群开关，默认是注释掉掉，不开启集群模式</span></span><br><span class="line"><span class="comment"># cluster-enabled yes</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 集群配置文件的名称，每个节点都有一个集群相关的配置文件，持久化保存集群的信息。</span></span><br><span class="line"><span class="comment"># 这个文件并不需要手动配置，这个配置文件有Redis生成并更新，每个Redis集群节点需要一个单独的配置文件，请确保与实例运行的系统中配置文件名称不冲突</span></span><br><span class="line"><span class="comment"># cluster-config-file nodes-6379.conf</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#  节点互连超时的阀值，集群节点超时毫秒数</span></span><br><span class="line"><span class="comment"># cluster-node-timeout 15000</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 在进行故障转移的时候，全部slave都会请求申请为master，但是有些slave可能与master断开连接一段时间了，导致数据过于陈旧，这样的slave不应该被提升为master。</span></span><br><span class="line"><span class="comment"># 该参数就是用来判断slave节点与master断线的时间是否过长。</span></span><br><span class="line"><span class="comment"># 判断方法是：</span></span><br><span class="line"><span class="comment"># 比较slave断开连接的时间和(node-timeout * slave-validity-factor) + repl-ping-slave-period</span></span><br><span class="line"><span class="comment"># 如果节点超时时间为三十秒, 并且slave-validity-factor为10,</span></span><br><span class="line"><span class="comment"># 假设默认的repl-ping-slave-period是10秒，即如果超过310秒slave将不会尝试进行故障转移</span></span><br><span class="line"><span class="comment"># cluster-replica-validity-factor 10</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># master的slave数量大于该值，slave才能迁移到其他孤立master上。</span></span><br><span class="line"><span class="comment"># 如这个参数若被设为2，那么只有当一个主节点拥有2 个可工作的从节点时，它的一个从节点会尝试迁移。</span></span><br><span class="line"><span class="comment"># cluster-migration-barrier 1</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 默认情况下，集群全部的slot由节点负责，集群状态才为ok，才能提供服务。</span></span><br><span class="line"> <span class="comment"># 设置为no，可以在slot没有全部分配的时候提供服务。</span></span><br><span class="line"> <span class="comment"># 不建议打开该配置，这样会造成分区的时候，小分区的master一直在接受写请求，而造成很长时间数据不一致</span></span><br><span class="line"><span class="comment"># cluster-require-full-coverage yes</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 控制 master 发生故障时是否自动进行 failover。</span></span><br><span class="line"><span class="comment"># 当设置为 yes 后 master 发生故障时不会自动进行 failover，这时你可以进行手动的 failover 操作。</span></span><br><span class="line"><span class="comment"># cluster-replica-no-failover no</span></span><br></pre></td></tr></table></figure><h5 id="慢查询-SlowLog"><a href="#慢查询-SlowLog" class="headerlink" title="慢查询 SlowLog"></a>慢查询 SlowLog</h5><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">################################## SLOW LOG ###################################</span></span><br><span class="line"><span class="comment"># （慢查询就是在日志中记录运行比较慢的SQL语句）</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># slog log是用来记录redis运行中执行比较慢的命令耗时。</span></span><br><span class="line"><span class="comment"># 当命令的执行超过了指定时间，就记录在slow log中，slog log保存在内存中，所以没有IO操作。</span></span><br><span class="line"><span class="comment">#  执行时间比slowlog-log-slower-than大的请求记录到slowlog里面，单位是微秒，所以1000000就是1秒。</span></span><br><span class="line"><span class="comment">#  注意，负数时间会禁用慢查询日志，而0则会强制记录所有命令。</span></span><br><span class="line">slowlog-log-slower-than 10000</span><br><span class="line"></span><br><span class="line"><span class="comment"># 慢查询日志长度。当一个新的命令被写进日志的时候，最老的那个记录会被删掉，这个长度没有限制。</span></span><br><span class="line"> <span class="comment"># 只要有足够的内存就行，你可以通过 SLOWLOG RESET 来释放内存</span></span><br><span class="line">slowlog-max-len 128</span><br></pre></td></tr></table></figure><h5 id="延迟监控-Latency-Monitor"><a href="#延迟监控-Latency-Monitor" class="headerlink" title="延迟监控 Latency Monitor"></a>延迟监控 Latency Monitor</h5><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">################################ LATENCY MONITOR ##############################</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 用来监控redis中执行比较缓慢的一些操作，用LATENCY打印redis实例在跑命令时的耗时图表。只记录大于等于下边设置的值的操作。</span></span><br><span class="line"><span class="comment"># 0的话，就是关闭监视。</span></span><br><span class="line"><span class="comment"># 默认延迟监控功能是关闭的，如果你需要打开，也可以通过CONFIG SET命令动态设置。</span></span><br><span class="line">latency-monitor-threshold 0</span><br></pre></td></tr></table></figure><h5 id="订阅通知-Event-Notification"><a href="#订阅通知-Event-Notification" class="headerlink" title="订阅通知 Event Notification"></a>订阅通知 Event Notification</h5><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">############################# EVENT NOTIFICATION ##############################</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Redis 发布订阅(pub/sub)是一种消息通信模式：发送者(pub)发送消息，订阅者(sub)接收消息。</span></span><br><span class="line"><span class="comment"># Redis 客户端可以订阅任意数量的频道。</span></span><br><span class="line"><span class="comment"># 因为开启键空间通知功能需要消耗一些 CPU，所以在默认配置下，该功能处于关闭状态。</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># &gt; 注意：因为 Redis 目前的订阅与发布功能采取的是发送即忘（fire and forget）策略，所以如果你的程序需要可靠事件通知（reliable notification of events），</span></span><br><span class="line"><span class="comment"># &gt; 么目前的键空间通知可能并不适合你：当订阅事件的客户端断线时，它会丢失所有在断线期间分发给它的事件。</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 对于每个修改数据库的操作，键空间通知都会发送两种不同类型的事件：键空间通知（key-space）和键事件通知（key-event）。</span></span><br><span class="line"><span class="comment"># &gt; 当 del mykey 命令执行时：</span></span><br><span class="line"><span class="comment"># &gt; - 键空间频道的订阅者将接收到被执行的事件的名字，在这个例子中，就是 del</span></span><br><span class="line"><span class="comment"># &gt; - 键事件频道的订阅者将接收到被执行事件的键的名字，在这个例子中，就是 mykey</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 参数可以是以下字符的任意组合， 它指定了服务器该发送哪些类型的通知。</span></span><br><span class="line"><span class="comment"># 输入的参数中至少要有一个 K 或者 E，否则的话，不管其余的参数是什么，都不会有任何通知被分发。</span></span><br><span class="line"><span class="comment"># - K： 键空间通知，所有通知以 __keyspace@__ 为前缀</span></span><br><span class="line"><span class="comment"># - E： 键事件通知，所有通知以 __keyevent@__ 为前缀</span></span><br><span class="line"><span class="comment"># - g： DEL 、 EXPIRE 、 RENAME 等类型无关的通用命令的通知</span></span><br><span class="line"><span class="comment"># - $： 字符串命令的通知</span></span><br><span class="line"><span class="comment"># - l： 列表命令的通知</span></span><br><span class="line"><span class="comment"># - s： 集合命令的通知</span></span><br><span class="line"><span class="comment"># - h： 哈希命令的通知</span></span><br><span class="line"><span class="comment"># - z： 有序集合命令的通知</span></span><br><span class="line"><span class="comment"># - x： 过期事件：每当有过期键被删除时发送</span></span><br><span class="line"><span class="comment"># - e： 驱逐(evict)事件：每当有键因为 maxmemory 政策而被删除时发送</span></span><br><span class="line"><span class="comment"># - A： 参数 g$lshzxe 的别名</span></span><br><span class="line"><span class="comment"># 可参考：[Redis事件通知](https://www.cnblogs.com/tangxuliang/p/10659439.html)</span></span><br><span class="line"><span class="comment"># 如： notify-keyspace-events "Ex"  表示对过期事件进行通知发送；</span></span><br><span class="line"><span class="comment"># notify-keyspace-events "kx" 表示想监控某个 key 的失效事件。</span></span><br><span class="line"><span class="comment"># 将参数设为字符串 AKE 表示发送所有类型的通知。</span></span><br><span class="line">notify-keyspace-events <span class="string">""</span></span><br></pre></td></tr></table></figure><h5 id="高级配置-Advance-Config"><a href="#高级配置-Advance-Config" class="headerlink" title="高级配置 Advance Config"></a>高级配置 Advance Config</h5><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">############################# EVENT NOTIFICATION ##############################</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Redis 发布订阅(pub/sub)是一种消息通信模式：发送者(pub)发送消息，订阅者(sub)接收消息。</span></span><br><span class="line"><span class="comment"># Redis 客户端可以订阅任意数量的频道。</span></span><br><span class="line"><span class="comment"># 因为开启键空间通知功能需要消耗一些 CPU，所以在默认配置下，该功能处于关闭状态。</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># &gt; 注意：因为 Redis 目前的订阅与发布功能采取的是发送即忘（fire and forget）策略，所以如果你的程序需要可靠事件通知（reliable notification of events），</span></span><br><span class="line"><span class="comment"># &gt; 么目前的键空间通知可能并不适合你：当订阅事件的客户端断线时，它会丢失所有在断线期间分发给它的事件。</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 对于每个修改数据库的操作，键空间通知都会发送两种不同类型的事件：键空间通知（key-space）和键事件通知（key-event）。</span></span><br><span class="line"><span class="comment"># &gt; 当 del mykey 命令执行时：</span></span><br><span class="line"><span class="comment"># &gt; - 键空间频道的订阅者将接收到被执行的事件的名字，在这个例子中，就是 del</span></span><br><span class="line"><span class="comment"># &gt; - 键事件频道的订阅者将接收到被执行事件的键的名字，在这个例子中，就是 mykey</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 参数可以是以下字符的任意组合， 它指定了服务器该发送哪些类型的通知。</span></span><br><span class="line"><span class="comment"># 输入的参数中至少要有一个 K 或者 E，否则的话，不管其余的参数是什么，都不会有任何通知被分发。</span></span><br><span class="line"><span class="comment"># - K： 键空间通知，所有通知以 __keyspace@__ 为前缀</span></span><br><span class="line"><span class="comment"># - E： 键事件通知，所有通知以 __keyevent@__ 为前缀</span></span><br><span class="line"><span class="comment"># - g： DEL 、 EXPIRE 、 RENAME 等类型无关的通用命令的通知</span></span><br><span class="line"><span class="comment"># - $： 字符串命令的通知</span></span><br><span class="line"><span class="comment"># - l： 列表命令的通知</span></span><br><span class="line"><span class="comment"># - s： 集合命令的通知</span></span><br><span class="line"><span class="comment"># - h： 哈希命令的通知</span></span><br><span class="line"><span class="comment"># - z： 有序集合命令的通知</span></span><br><span class="line"><span class="comment"># - x： 过期事件：每当有过期键被删除时发送</span></span><br><span class="line"><span class="comment"># - e： 驱逐(evict)事件：每当有键因为 maxmemory 政策而被删除时发送</span></span><br><span class="line"><span class="comment"># - A： 参数 g$lshzxe 的别名</span></span><br><span class="line"><span class="comment"># 可参考：[Redis事件通知](https://www.cnblogs.com/tangxuliang/p/10659439.html)</span></span><br><span class="line"><span class="comment"># 如： notify-keyspace-events "Ex"  表示对过期事件进行通知发送；</span></span><br><span class="line"><span class="comment"># notify-keyspace-events "kx" 表示想监控某个 key 的失效事件。</span></span><br><span class="line"><span class="comment"># 将参数设为字符串 AKE 表示发送所有类型的通知。</span></span><br><span class="line">notify-keyspace-events <span class="string">""</span></span><br><span class="line"></span><br><span class="line"><span class="comment">############################### ADVANCED CONFIG ###############################</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 数据量小于等于hash-max-ziplist-entries的用ziplist，大于hash-max-ziplist-entries用hash</span></span><br><span class="line"><span class="comment"># hash类型的数据结构在编码上可以使用ziplist和hashtable。</span></span><br><span class="line"><span class="comment">#  ziplist的特点就是文件存储(以及内存存储)所需的空间较小,在内容较小时,性能和hashtable几乎一样。</span></span><br><span class="line"><span class="comment">#  因此redis对hash类型默认采取ziplist。如果hash中条目的条目个数或者value长度达到阀值,将会被重构为hashtable。</span></span><br><span class="line"><span class="comment">#  这个参数指的是ziplist中允许存储的最大条目个数，默认为512，建议为128</span></span><br><span class="line"><span class="built_in">hash</span>-max-ziplist-entries 512</span><br><span class="line"> <span class="comment"># ziplist中允许条目value值最大字节数，默认为64，建议为1024</span></span><br><span class="line"><span class="built_in">hash</span>-max-ziplist-value 64</span><br><span class="line"></span><br><span class="line"><span class="comment"># 当取正值的时候，表示按照数据项个数来限定每个quicklist节点上的ziplist长度。</span></span><br><span class="line"><span class="comment"># 比如，当这个参数配置成5的时候，表示每个quicklist节点的ziplist最多包含5个数据项。</span></span><br><span class="line"><span class="comment"># 当取负值的时候，表示按照占用字节数来限定每个quicklist节点上的ziplist长度。这时，它只能取-1到-5这五个值，每个值含义如下：</span></span><br><span class="line"><span class="comment"># -5: 每个quicklist节点上的ziplist大小不能超过64 Kb。（注：1kb =&gt; 1024 bytes）</span></span><br><span class="line"><span class="comment"># -4: 每个quicklist节点上的ziplist大小不能超过32 Kb。</span></span><br><span class="line"><span class="comment"># -3: 每个quicklist节点上的ziplist大小不能超过16 Kb。</span></span><br><span class="line"><span class="comment"># -2: 每个quicklist节点上的ziplist大小不能超过8 Kb。（-2是Redis给出的默认值）</span></span><br><span class="line"><span class="comment"># -1: 每个quicklist节点上的ziplist大小不能超过4 Kb。</span></span><br><span class="line">list-max-ziplist-size -2</span><br><span class="line"></span><br><span class="line"><span class="comment"># 表示一个quicklist两端不被压缩的节点个数。</span></span><br><span class="line"><span class="comment"># 注：这里的节点个数是指quicklist双向链表的节点个数，而不是指ziplist里面的数据项个数。</span></span><br><span class="line"><span class="comment"># 实际上，一个quicklist节点上的ziplist，如果被压缩，就是整体被压缩的。</span></span><br><span class="line"><span class="comment"># 参数list-compress-depth的取值含义如下：</span></span><br><span class="line"><span class="comment"># 0: 是个特殊值，表示都不压缩。这是Redis的默认值。</span></span><br><span class="line"><span class="comment"># 1: 表示quicklist两端各有1个节点不压缩，中间的节点压缩。</span></span><br><span class="line"><span class="comment"># 2: 表示quicklist两端各有2个节点不压缩，中间的节点压缩。</span></span><br><span class="line"><span class="comment"># 3: 表示quicklist两端各有3个节点不压缩，中间的节点压缩。</span></span><br><span class="line"><span class="comment"># 依此类推…</span></span><br><span class="line"><span class="comment"># 由于0是个特殊值，很容易看出quicklist的头节点和尾节点总是不被压缩的，以便于在表的两端进行快速存取。</span></span><br><span class="line">list-compress-depth 0</span><br><span class="line"></span><br><span class="line"> <span class="comment"># 数据量小于等于set-max-intset-entries用intset，大于set-max-intset-entries用set</span></span><br><span class="line"><span class="built_in">set</span>-max-intset-entries 512</span><br><span class="line"></span><br><span class="line"> <span class="comment"># 数据量小于等于zset-max-ziplist-entries用ziplist，大于zset-max-ziplist-entries用zset</span></span><br><span class="line">zset-max-ziplist-entries 128</span><br><span class="line">zset-max-ziplist-value 64</span><br><span class="line"></span><br><span class="line"><span class="comment"># value大小小于等于hll-sparse-max-bytes使用稀疏数据结构（sparse）</span></span><br><span class="line"><span class="comment">#   大于hll-sparse-max-bytes使用稠密的数据结构（dense），一个比16000大的value是几乎没用的，</span></span><br><span class="line"><span class="comment">#   建议的value大概为3000。如果对CPU要求不高，对空间要求较高的，建议设置到10000左右</span></span><br><span class="line">hll-sparse-max-bytes 3000</span><br><span class="line"></span><br><span class="line"><span class="comment"># Streams macro node max size / items. The stream data structure is a radix</span></span><br><span class="line"><span class="comment"># tree of big nodes that encode multiple items inside. Using this configuration</span></span><br><span class="line"><span class="comment"># it is possible to configure how big a single node can be in bytes, and the</span></span><br><span class="line"><span class="comment"># maximum number of items it may contain before switching to a new node when</span></span><br><span class="line"><span class="comment"># appending new stream entries. If any of the following settings are set to</span></span><br><span class="line"><span class="comment"># zero, the limit is ignored, so for instance it is possible to set just a</span></span><br><span class="line"><span class="comment"># max entires limit by setting max-bytes to 0 and max-entries to the desired</span></span><br><span class="line"><span class="comment"># value.</span></span><br><span class="line">stream-node-max-bytes 4096</span><br><span class="line">stream-node-max-entries 100</span><br><span class="line"></span><br><span class="line"><span class="comment"># Redis将在每100毫秒时使用1毫秒的CPU时间来对redis的hash表进行重新hash，可以降低内存的使用。</span></span><br><span class="line"><span class="comment">#   当你的使用场景中，有非常严格的实时性需要，不能够接受Redis时不时的对请求有2毫秒的延迟的话，把这项配置为no。</span></span><br><span class="line"><span class="comment">#   如果没有这么严格的实时性要求，可以设置为yes，以便能够尽可能快的释放内存</span></span><br><span class="line">activerehashing yes</span><br><span class="line"></span><br><span class="line"><span class="comment"># 对客户端输出缓冲进行限制可以强迫那些不从服务器读取数据的客户端断开连接，用来强制关闭传输缓慢的客户端。</span></span><br><span class="line"><span class="comment">#  对于normal client，第一个0表示取消hard limit，第二个0和第三个0表示取消soft limit，normal client默认取消限制，因为如果没有寻问，他们是不会接收数据的</span></span><br><span class="line"><span class="comment"># 对于slave client和MONITER client，如果client-output-buffer一旦超过256mb，又或者超过64mb持续60秒，那么服务器就会立即断开客户端连接。</span></span><br><span class="line"> <span class="comment"># 对于pubsub client，如果client-output-buffer一旦超过32mb，又或者超过8mb持续60秒，那么服务器就会立即断开客户端连接。</span></span><br><span class="line">client-output-buffer-limit normal 0 0 0</span><br><span class="line">client-output-buffer-limit replica 256mb 64mb 60</span><br><span class="line">client-output-buffer-limit pubsub 32mb 8mb 60</span><br><span class="line"></span><br><span class="line"><span class="comment"># Client query buffers accumulate new commands. They are limited to a fixed</span></span><br><span class="line"><span class="comment"># amount by default in order to avoid that a protocol desynchronization (for</span></span><br><span class="line"><span class="comment"># instance due to a bug in the client) will lead to unbound memory usage in</span></span><br><span class="line"><span class="comment"># the query buffer. However you can configure it here if you have very special</span></span><br><span class="line"><span class="comment"># needs, such us huge multi/exec requests or alike.</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># client-query-buffer-limit 1gb</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># In the Redis protocol, bulk requests, that are, elements representing single</span></span><br><span class="line"><span class="comment"># strings, are normally limited ot 512 mb. However you can change this limit</span></span><br><span class="line"><span class="comment"># here.</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># proto-max-bulk-len 512mb</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># redis执行任务的频率为1s除以hz</span></span><br><span class="line">hz 10</span><br><span class="line"></span><br><span class="line"><span class="comment"># 可选值为yes和no，分别代表开启动态hz和关闭动态hz。默认值为yes。</span></span><br><span class="line"><span class="comment"># 当动态hz开启时，您设置的hz参数的值，即configured_hz，将作为基线值，</span></span><br><span class="line"><span class="comment"># 而Redis服务中的实际hz值会在基线值的基础上根据已连接到Redis的客户端数量自动调整，</span></span><br><span class="line"><span class="comment"># 连接的客户端越多，实际hz值越高，Redis执行定期任务的频率就越高。</span></span><br><span class="line">dynamic-hz yes</span><br><span class="line"></span><br><span class="line"><span class="comment"># 在aof重写的时候，如果打开了aof-rewrite-incremental-fsync开关，系统会每32MB执行一次fsync。</span></span><br><span class="line"><span class="comment">#   这对于把文件写入磁盘是有帮助的，可以避免过大的延迟峰值</span></span><br><span class="line">aof-rewrite-incremental-fsync yes</span><br><span class="line"></span><br><span class="line"><span class="comment"># RDB自动触发策略是否启用，默认为yes</span></span><br><span class="line"><span class="comment"># RDB手动触发和自动触发：</span></span><br><span class="line"><span class="comment"># 1）自动触发：</span></span><br><span class="line"><span class="comment"># 如上面配置所示，按配置情况触发</span></span><br><span class="line"><span class="comment"># 2）手动触发：</span></span><br><span class="line"><span class="comment"># 连接redis后使用命令save、bgsave触发</span></span><br><span class="line"><span class="comment"># - save：会阻塞redis服务器，直到完成持久化</span></span><br><span class="line"><span class="comment"># - bgsave：会fork一个子进程，由子进程进行持久化。</span></span><br><span class="line">rdb-save-incremental-fsync yes</span><br><span class="line"></span><br><span class="line"><span class="comment"># 可以调整计数器counter的增长速度，lfu-log-factor越大，counter增长的越慢。</span></span><br><span class="line"><span class="comment"># lfu-log-factor 10</span></span><br><span class="line"><span class="comment"># 是一个以分钟为单位的数值，可以调整counter的减少速度</span></span><br><span class="line"><span class="comment"># lfu-decay-time 1</span></span><br></pre></td></tr></table></figure><h2 id="API相关"><a href="#API相关" class="headerlink" title="API相关"></a>API相关</h2><h3 id="通用命令"><a href="#通用命令" class="headerlink" title="通用命令"></a>通用命令</h3><p>除了<code>Keys命令的时间复杂度为O(n)</code>，<code>其他都为O(1)</code>。</p><ul><li><p><code>keys pattern</code> 列出符合pattern的key<br>因为它是一个O(n)的操作且是单线程操作会阻塞其他命令。一般不在生产环境使用。</p><blockquote><p>建议使用方案：</p><ul><li>可以在热本从节点时，在从节点执行比较重的命令；</li><li>用<code>scan命令</code>：以非阻塞的方式实现key值的查找，绝大多数情况下是可以替代keys命令的，可选性更强</li></ul></blockquote></li><li><p><code>SCAN cursor [MATCH pattern] [COUNT count]</code><br>是一个基于游标的迭代器，count默认为10。<br>这意味着命令每次被调用都需要使用上一次这个调用返回的游标作为该次调用的游标参数，以此来延续之前的迭代过程。</p><blockquote><p>scan 参数提供了三个参数：</p><ul><li>第一个是 cursor 整数值；</li><li>第二个是 key 的正则模式；</li><li>第三个是遍历的 limit hint。</li></ul><p>第一次遍历时，cursor 值为 0，然后将返回结果中第一个整数值作为下一次遍历的 cursor。一直遍历到返回的 cursor 值为 0 时结束。</p></blockquote></li><li><p><code>dbsize</code> 返回当前数据库的 key 的数量<br>可以线上使用，因为redis有计数器会实时记录key的总数，时间复杂度为O(1)</p></li><li><p><code>exists key</code> 是否存在key，存在1 不存在0</p></li><li><p><code>del key...</code> 删除key，可以多个</p></li><li><p><code>expire key seconds</code> 过期时间设置，key在n秒后过期</p></li><li><p><code>ttl key</code> 查看key剩余的过期时间，返回负数-2说明key已经被删除</p></li><li><p><code>persist key</code> 去掉key的过期时间，这时在执行ttl会返回-1，说明key存在，并没有过期时间</p></li><li><p><code>type key</code> 返回 key 所储存的值的类型<br>一般为string、hash、list、set、zset、none（key不存在）</p></li><li><p><code>select db</code> 选择db，共16个db，默认0</p></li><li><p><code>MOVE key db</code> 将当前数据库的 key 移动到给定的数据库 db 当中。</p></li><li><p><code>RENAME key newkey</code> 修改 key 的名称</p></li><li><p><code>RENAMENX key newkey</code> 仅当 newkey 不存在时，将 key 改名为 newkey 。</p></li></ul><h3 id="数据结构"><a href="#数据结构" class="headerlink" title="数据结构"></a>数据结构</h3><h4 id="5种常见类型"><a href="#5种常见类型" class="headerlink" title="5种常见类型"></a>5种常见类型</h4><h5 id="String：字符串类型"><a href="#String：字符串类型" class="headerlink" title="String：字符串类型"></a><code>String：字符串类型</code></h5><p>结构：key value。<br>Value的类型可以为字符、数值型、二进制、Json串。</p><blockquote><p>注意：字符串类型的Value的大小不能大于512M；</p></blockquote><h6 id="内部编码"><a href="#内部编码" class="headerlink" title="内部编码"></a>内部编码</h6><ul><li><code>int</code>：</li></ul><p><strong>8个字节的长整型</strong>。</p><blockquote><p>如果一个字符串的内容可以转换为long，那么该字符串就会被转换成long类型，对象的ptr就会指向该long，并且对象类型也用int类型表示；</p></blockquote><ul><li><code>embstr</code>：</li></ul><p><strong>小于等于39个字节的字符串</strong>。<br>如果字符串对象的长度小于39字节，就用embstr对象，否则使用传统的raw对象。</p><ul><li><code>raw</code>：</li></ul><p><strong>大于39个字节的字符串</strong>。</p><h6 id="常见命令"><a href="#常见命令" class="headerlink" title="常见命令"></a>常见命令</h6><ul><li><p><code>get key</code> O(1)操作</p></li><li><p><code>del key</code>  O(1)操作</p></li><li><p>set操作：O(1)操作<br><code>set key value</code> 不管key是否存在都设置<br><code>setnx key value</code>  当key不存在才设置<br><code>set key value XX</code>  key存在才设置<br><code>SETEX key seconds value</code> 将值 value 关联到 key ，并将 key 的生存时间设为 seconds (以秒为单位)。如果 key 已经存在， SETEX命令将覆写旧值。<br><code>PSETEX key milliseconds value</code> 这个命令和 SETEX命令相似，但它以毫秒为单位设置 key 的生存时间，而不是像 SETEX命令那样，以秒为单位。<br><code>set key value [expiration EX seconds|PX milliseconds] [NX|XX]</code> </p><blockquote><ul><li>EX seconds ： 将键的过期时间设置为 seconds 秒。<br>执行 SET key value EX seconds 的效果等同于执行 SETEX key seconds value。</li><li>PX milliseconds ： 将键的过期时间设置为 milliseconds 毫秒。<br>执行 SET key value PX milliseconds 的效果等同于执行 PSETEX key milliseconds value 。</li><li>NX ： 只在键不存在时， 才对键进行设置操作。<br>执行 SET key value NX 的效果等同于执行 SETNX key value</li><li>XX ： 只在键已经存在时， 才对键进行设置操作。</li></ul></blockquote></li><li><p>批量操作：O(n)操作<br><code>mget key1 key2 ...</code><br>批量获取key，原子操作。</p><blockquote><p>n次get = n次网络时间 + n次命令时间<br>（一般是网络时间比较耗时）</p></blockquote></li></ul><p><code>mset key1 v1 key2 v2 ...</code><br>批量设置key。</p><blockquote><p>1次mget = 1次网络时间 + n次命令时间</p></blockquote><p><code>MSETNX key value [key value ...]</code><br>同时设置一个或多个 key-value 对，当且仅当所有给定 key 都不存在。<br><strong>即使只有一个给定 key 已存在， MSETNX也会拒绝执行所有给定 key 的设置操作。</strong></p><blockquote><ul><li>O(N)操作， N 为要设置的 key 的数量。</li><li>当所有 key 都成功设置，返回 1 。<br>如果所有给定 key 都设置失败(至少有一个 key 已经存在)，那么返回 0 。</li></ul></blockquote><ul><li><p>自增/减命令<br><code>incr key</code><br>O(1)操作。计数，key自增1，如key不存在，自增后get(key)=1<br><code>decr key</code><br>O(1)操作。key自减1，如key不存在，自减后get(key)=-1<br><code>incrby key k</code><br>O(1)操作。key自增k，如key不存在，自增后get(key)=k<br><code>decr key k</code><br>O(1)操作。key自减k，如key不存在，自减后get(key)=-k</p></li><li><p>其他操作：<br><code>getset key newValue</code><br>O(1)操作，设置key的新值，返回旧值。<br><code>append key value</code><br>O(1)操作，将value追加到旧的value。<br><code>strlen key</code><br>O(1)操作，返回字符串的长度。<br><code>incrbyfloat key 3.5</code><br>O(1)操作，增加key对应的值为3.5<br><code>getrange key start end</code><br>O(1)操作，获取字符串下指定下标的值<br><code>setrange key index value</code><br>O(1)操作，设置指定下标所对应的值。</p></li></ul><h6 id="应用"><a href="#应用" class="headerlink" title="应用"></a>应用</h6><p>1、计数器：记录用户个人主页的访问量</p><blockquote><p>可以使用 <code>incr userId:pageView</code> （单线程无竞争的），来记录每个用户每个页面的访问量</p></blockquote><h5 id="Hash：哈希类型"><a href="#Hash：哈希类型" class="headerlink" title="Hash：哈希类型"></a><code>Hash：哈希类型</code></h5><p>结构：key field value。<br>即类似于Map<map>结构。</map></p><h6 id="内部编码-1"><a href="#内部编码-1" class="headerlink" title="内部编码"></a>内部编码</h6><ul><li><p><code>ziplist压缩链表</code>：<br>当元素个数小于512 , 并且值的大小小于64个字节时 , 采用ziplist。</p><blockquote><ul><li>当哈希类型中元素个数小于 hash-max-ziplist-entries 配置(默认 512 个)，同时所有值都小于 hash-max-ziplist-value 配置(默认 64 字节)时，<br>Redis 会使用 ziplist 作为哈希的内部实现。</li><li><code>ziplist</code>是一种压缩链表，它的好处是<strong>更能节省内存空间</strong>。<br>因为它所存储的内容都是在连续的内存区域当中的。<br>当列表对象元素不大，每个元素也不大的时候，就采用ziplist存储。<br>但当数据量过大时就ziplist就不是那么好用了。<br>因为<strong>为了保证他存储内容在内存中的连续性，插入的复杂度是O(N)，即每次插入都会重新进行realloc</strong>。</li><li>ziplist最大的优势就是存储的时候是<strong>连续的内存，可以极大的提升cpu的缓存命中率</strong>。</li></ul></blockquote></li><li><p><code>hashtable哈希表</code>：<br>当元素个数小于512 , 并且值的大小小于64个字节时 , 采用ziplist , 大于的时候采用hashtable。</p></li></ul><h6 id="常见命令-1"><a href="#常见命令-1" class="headerlink" title="常见命令"></a>常见命令</h6><ul><li><p>常用命令：O(1)</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">hget key field 获取hashkey对应的field的value</span><br><span class="line">hset key field value</span><br><span class="line">hdel key field</span><br><span class="line">hexists key field</span><br><span class="line">hlen key 获取hash key的field的数量</span><br><span class="line"></span><br><span class="line">hsetnx key field value 不存在设置，否则失败</span><br><span class="line">hincrby key field intCounter</span><br><span class="line">hincrbyfloat key field floatCounter</span><br></pre></td></tr></table></figure></li><li><p>批量操作：O(n)</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">hmget key1 field1 field2...</span><br><span class="line">hmset key field1 value1 field2 value2...</span><br></pre></td></tr></table></figure></li><li><p>其他：O(n)</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">hgetall key  返回key下所有的field和value。由于单线程，要小心使用此命令，尽量用hmget代替</span><br><span class="line">hkeys key 返回key对应的所有field的field</span><br><span class="line">hvals key 返回key对应的所有field的value</span><br></pre></td></tr></table></figure></li></ul><h6 id="应用-1"><a href="#应用-1" class="headerlink" title="应用"></a>应用</h6><ul><li>1、计数器：记录网站每个用户某页的访问量<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hincrby user:info pageView count</span><br></pre></td></tr></table></figure></li><li>2、缓存：缓存视频的基本信息</li></ul><h5 id="List：列表类型"><a href="#List：列表类型" class="headerlink" title="List：列表类型"></a><code>List：列表类型</code></h5><p>结构：key elements。<br>有序的（插入顺序）、可重复的、可以左右两边插入弹出的。</p><h6 id="内部编码-2"><a href="#内部编码-2" class="headerlink" title="内部编码"></a>内部编码</h6><ul><li><p><code>linklist双向链表</code>：</p><blockquote><p>linkedlist是一种双向链表。<br>它的结构比较简单，节点中存放pre和next两个指针，还有节点相关的信息。<br>当每增加一个node的时候，就需要重新malloc一块内存。</p></blockquote></li><li><p><code>ziplist 压缩列表</code>：</p></li></ul><h6 id="常见命令-2"><a href="#常见命令-2" class="headerlink" title="常见命令"></a>常见命令</h6><ul><li><p>增：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">rpush key value1 value2 ...</span><br><span class="line">O(1~n)，从列表的右端插入</span><br><span class="line"></span><br><span class="line">lpush key value1 value2 ...</span><br><span class="line">O(1~n)，从列表的左端插入</span><br><span class="line"></span><br><span class="line">linsert key before|after value newValue</span><br><span class="line">O(n)，在list指定的value之前或后插入newValue</span><br></pre></td></tr></table></figure></li><li><p>删：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">lpop key</span><br><span class="line">O(1)，从左弹出list中的一个元素</span><br><span class="line"></span><br><span class="line">rpop key</span><br><span class="line">O(1)，从右弹出list中的一个元素</span><br><span class="line"></span><br><span class="line">lrem key count value</span><br><span class="line">O(n)，根据count值，从list中删除所有等于value的元素</span><br><span class="line">count &gt; 0：从左到右，删除最多count个。</span><br><span class="line">count &lt; 0：从右到左，删除最多Math.abs(count)个。</span><br><span class="line">count &#x3D; 0：删除所有满足条件的元素。</span><br><span class="line"></span><br><span class="line">ltrim key start end</span><br><span class="line">O(n)，按照索引位置修剪list。保留范围內的元素</span><br><span class="line"></span><br><span class="line">blpop key timeout 和brpop key timeout </span><br><span class="line">O(1)，阻塞删除，timeout是阻塞超时时间，为0表示永远不阻塞</span><br></pre></td></tr></table></figure></li><li><p>改：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">lset key index newValue</span><br><span class="line">O(n)，修改指定位置的值为newValue</span><br></pre></td></tr></table></figure></li><li><p>查：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">lrange key start end （包含end）</span><br><span class="line">O(n)，获取列表指定索引范围的元素。</span><br><span class="line">如：list有6个元素。</span><br><span class="line">索引从左：0～5；</span><br><span class="line">索引从右：-1～-6；</span><br><span class="line"></span><br><span class="line">lindex key index</span><br><span class="line">O(n)，获取列表指定索引的元素</span><br><span class="line"></span><br><span class="line">llen key</span><br><span class="line">O(1)，获取list长度</span><br></pre></td></tr></table></figure></li></ul><h6 id="应用-2"><a href="#应用-2" class="headerlink" title="应用"></a>应用</h6><ul><li><p>1、微博时间轴TimeLine：将关注用户的微博由新到旧排列。<br>关注的人更新微博，使用lpush左侧即头部插入；<br>使用lrang可以分页查询；</p></li><li><p>2、实现栈：lpush + lpop = stack 先进后出</p></li><li><p>3、实现队列：lpush + rpop = queue 先进先出</p></li><li><p>4、实现有固定数量的列表：lpush + ltrim = capped collection</p></li><li><p>5、消息队列：lpush + brpop = message queue 阻塞式先进先出</p></li></ul><h5 id="Set：集合类型"><a href="#Set：集合类型" class="headerlink" title="Set：集合类型"></a><code>Set：集合类型</code></h5><p>结构：key values。<br>元素是无序的、无重复元素、支持集合间的操作，如交/并/差集，</p><h6 id="内部编码-3"><a href="#内部编码-3" class="headerlink" title="内部编码"></a>内部编码</h6><ul><li><p><code>intset</code>：<br>intset是一个整数集合，里面存的为某种同一类型的整数。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">#define INTSET_ENC_INT16 (sizeof(int16_t)) </span><br><span class="line">#define INTSET_ENC_INT32 (sizeof(int32_t)) </span><br><span class="line">#define INTSET_ENC_INT64 (sizeof(int64_t))</span><br></pre></td></tr></table></figure><p>当集合中的元素都是整数，并且集合中的元素个数小于 512 个时，Redis 会选用 intset 作为底层内部实现。</p><blockquote><p>intset是一个有序集合，查找元素的复杂度为O(logN)，但插入时不一定为O(logN)，因为有可能涉及到升级操作。<br>比如当集合里全是int16_t型的整数，这时要插入一个int32_t，那么为了维持集合中数据类型的一致，<br>那么所有的数据都会被转换成int32_t类型，涉及到内存的重新分配，这时插入的复杂度就为O(N)了。但是intset不支持降级操作。</p></blockquote></li><li><p><code>hashtable 哈希表</code>：</p></li></ul><h6 id="常见命令-3"><a href="#常见命令-3" class="headerlink" title="常见命令"></a>常见命令</h6><ul><li>集合内操作：<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">sadd element</span><br><span class="line">O(1)，添加元素，如存在则失败</span><br><span class="line"></span><br><span class="line">srem key element</span><br><span class="line">O(1) 删除</span><br><span class="line"></span><br><span class="line">scard key</span><br><span class="line">计算集合大小</span><br><span class="line"></span><br><span class="line">sismember key value</span><br><span class="line">判断vlaue是否在key中</span><br><span class="line"></span><br><span class="line">srandmember key count</span><br><span class="line">随机挑count个元素。不会破坏集合的数据</span><br><span class="line"></span><br><span class="line">spop key</span><br><span class="line">从集合中随机弹出一个元素</span><br><span class="line"></span><br><span class="line">smembers key</span><br><span class="line">获取集合所有元素，返回结果无序</span><br><span class="line">会造成阻塞，需注意使用，建议使用游标scan</span><br></pre></td></tr></table></figure></li><li>集合间操作：<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">sdiff key1 key2  求差集</span><br><span class="line">sinter key1 key2  求交集</span><br><span class="line">sunion key1 key2  求并集</span><br><span class="line">sdiff&#x2F;sinter&#x2F;suion + store destkey</span><br><span class="line">将差&#x2F;交&#x2F;并集结果保存到destkey中</span><br></pre></td></tr></table></figure></li></ul><h6 id="应用-3"><a href="#应用-3" class="headerlink" title="应用"></a>应用</h6><ul><li>1、微博抽奖系统：使用spop或srandmember随机选择一个或多个用户</li><li>2、微博点赞、转发等：将点赞用户存在集合中，scard获取其大小</li><li>3、标签：给用户添加标签/给标签添加用户</li><li>4、共同关注/共同好友等功能：求交集</li></ul><h5 id="ZSet：有序集合类型"><a href="#ZSet：有序集合类型" class="headerlink" title="ZSet：有序集合类型"></a><code>ZSet：有序集合类型</code></h5><p>结构：key score value。<br>无重复元素、有序的、有元素+分值构成。<br>时间复杂度比集合类型有所增大。</p><h6 id="内部编码-4"><a href="#内部编码-4" class="headerlink" title="内部编码"></a>内部编码</h6><ul><li><code>ziplist 压缩列表</code>：</li><li><code>skiplist 跳表</code>：<blockquote><p>它实现了有序集合中的快速查找，在大多数情况下它的速度都可以和平衡树差不多。<br>但它的实现比较简单，可以作为平衡树的替代品。<br>可参考：<br><a href="https://app.yinxiang.com/shard/s11/nl/3684060/420d8daf-8cc9-47c2-9760-91bb7843cd13/" target="_blank" rel="external nofollow noopener noreferrer">随机数据结构：跳表（SkipList）</a></p></blockquote></li></ul><h6 id="常见命令-4"><a href="#常见命令-4" class="headerlink" title="常见命令"></a>常见命令</h6><ul><li><p>基本操作：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">zadd key score1 element1 score2 element2 ...</span><br><span class="line">O(logN)，添加score和element</span><br><span class="line"></span><br><span class="line">zrem key element</span><br><span class="line">O(1) 删除</span><br><span class="line"></span><br><span class="line">zscore key element</span><br><span class="line">O(1) 返回元素score</span><br><span class="line"></span><br><span class="line">zincrby key incrScore element</span><br><span class="line">O(1)，增加或减少元素的score</span><br><span class="line"></span><br><span class="line">zcard key</span><br><span class="line">O(1) 返回key中元素个数</span><br><span class="line"></span><br><span class="line">zrank key element</span><br><span class="line">获取某元素的排名（升序 从小到大）</span><br></pre></td></tr></table></figure></li><li><p>范围操作：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">zrange key start end [withscores]</span><br><span class="line">返回指定索引范围的升序元素，是否打印分数可选</span><br><span class="line">复杂度为O(log(n) + m) ：</span><br><span class="line">n指有序集合中元素的个数；</span><br><span class="line">m指获取范围内的元素个数</span><br><span class="line"></span><br><span class="line">zrangebyscore key minScore maxCore [withscores]</span><br><span class="line">O(log(n) + m) ，指定分数范围，其余和上面zrange一样</span><br><span class="line"></span><br><span class="line">zcount key minScore maxScore</span><br><span class="line">O(log(n) + m) ，指定分数范围的个数</span><br><span class="line"></span><br><span class="line">zremrangebyrank key start end</span><br><span class="line">O(log(n) + m) ，删除指定排名內的升序元素</span><br><span class="line"></span><br><span class="line">zremrangebyscore key start end</span><br><span class="line">zremrangebyscore key minScore maxScore</span><br><span class="line"></span><br><span class="line">zrevrank&#x2F;zrevrange&#x2F;zrevrangebyscore</span><br><span class="line">排名从高到低</span><br></pre></td></tr></table></figure></li><li><p>集合操作：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">zinterstore&#x2F;zunionstore</span><br><span class="line">集合间操作，交集&#x2F;并集</span><br></pre></td></tr></table></figure></li></ul><h6 id="应用-4"><a href="#应用-4" class="headerlink" title="应用"></a>应用</h6><p>1、排行榜实现：<br><code>zadd key score1 element1 score2 element2 ...</code><br>score可以为：时间戳、销量、关注人数等</p><h3 id="高级功能"><a href="#高级功能" class="headerlink" title="高级功能"></a>高级功能</h3><h4 id="慢查询-SlowLog-1"><a href="#慢查询-SlowLog-1" class="headerlink" title="慢查询 SlowLog"></a>慢查询 SlowLog</h4><h5 id="概念"><a href="#概念" class="headerlink" title="概念"></a>概念</h5><p>慢查询顾名思义是<strong>将redis执行命令较慢的命令记录到慢查询队列中</strong>。<br><code>慢查询是一个先进先出的队列，且队列是固定长度的，保存在内存中的</code>。</p><h5 id="生命周期"><a href="#生命周期" class="headerlink" title="生命周期"></a>生命周期</h5><p>Redis命令执行的完整生命周期：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">client发送命令 -&gt; Redis队列命令排队（单线程） -&gt; 执行命令 -&gt; 返回结果到client</span><br></pre></td></tr></table></figure><p>慢查询发生在第3个阶段（执行命令）；<br>客户端超时不一定慢查询，但慢查询是客户端超时的一个可能因素。</p><h5 id="两个配置和三个命令"><a href="#两个配置和三个命令" class="headerlink" title="两个配置和三个命令"></a>两个配置和三个命令</h5><h6 id="两个配置"><a href="#两个配置" class="headerlink" title="两个配置"></a>两个配置</h6><ul><li><p><code>slowlog-log-slower-than 10000</code><br>sloglog是用来记录redis运行中执行比较慢的命令耗时。<br>当命令的执行超过了指定时间，就记录在slowlog中（单位是微秒，所以1000000就是1秒），slowlog保存在内存中，所以没有IO操作。</p><blockquote><p>注意：负数时间会禁用慢查询日志，而0则会强制记录所有命令。</p></blockquote></li><li><p><code>slowlog-max-len 128</code><br>慢查询队列长度(记录多少条慢查询，默认128)<br>一个新的命令满足慢查询条件时被插入到这个列表中。<br>当慢查询日志列表已处于其最大长度时,最早插入的一个命令将从列表中移出。</p></li></ul><h6 id="三个命令"><a href="#三个命令" class="headerlink" title="三个命令"></a>三个命令</h6><ul><li><p><code>slowlog get [n]</code><br>获取慢查询日志，参数n可以指定条数<br>返回结果有6个部分组成：<br>1、慢查询日志的唯一ID<br>2、发生的时间戳<br>3、命令耗时，单位微秒<br>4、执行的命令和参数<br>5、客户端网络套接字(ip: port)<br>6、“”</p></li><li><p><code>slowlog len</code><br>查询当前慢查询记录数 </p></li><li><p><code>slowlog reset</code><br>重置慢查询日志 (实际是对列表做清理操作)</p></li></ul><h5 id="运维经验"><a href="#运维经验" class="headerlink" title="运维经验"></a>运维经验</h5><ul><li><p><code>slowlog-max-len不要设置太小，通常1000左右</code>。<br>线上建议调大。因为记录慢查询时Redis会对长命令做阶段操作，并不会占用大量内存，增大慢查询列表可以减缓慢查询被剔除的可能。</p></li><li><p><code>slowlog-log-slower-than不要设置太大，通常1000微秒（即1ms），根据时间QPS设置</code>。<br>默认值超过10毫秒判定为慢查询，需要根据Redis并发量调整该值。</p><blockquote><p>由于Redis采用单线程响应命令，对于高流量的场景，如果命令执行时间超过1毫秒以上，那么Redis最多可支撑QPS不到1000因此对于高QPS场景下的Redis建议设置为1毫秒。<br>如：qps为10000的话，平均每个时间就为0.1ms，如超过1ms就会对qps造成影响，这样调小阈值慢查询才会被记录下来。</p></blockquote></li><li><p><code>注意Redis命令的生命周期。</code><br>慢查询只记录命令的执行时间，并不包括命令排队和网络传输时间。<br>因此客户端执行命令的时间会大于命令的实际执行时间，因为命令执行排队机制，慢查询会导致其他命令级联阻塞。<br>因此客户端出现请求超时时，需要检查该时间点是否有对应的慢查询，从而分析是否为慢查询导致的命令级联阻塞。</p></li><li><p><code>定期持久化慢查询</code>。<br>由于慢查询日志是一个先进先出的队列，也就是说如果慢查询比较多，队列满的情况下，可能会丢失部分慢查询命令。<br>为了防止这种情况发生，可以定期执行slowlog get命令将慢查询日志持久化到其他存储中(例如:MySQL、ElasticSearch等)，然后可以通过可视化工具进行查询。</p></li></ul><h4 id="管道-Pipeline"><a href="#管道-Pipeline" class="headerlink" title="管道 Pipeline"></a>管道 Pipeline</h4><p>pipeline，即流水线。<br><strong>1次pipeline（N条命令）= 1次网络时间 + N次命令时间</strong>。<br><strong>对于多个命令执行，不再同步等待每个命令的返回结果。我们会在一个统一的时间点来获取结果。</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">    Jedis jedis = <span class="keyword">new</span> Jedis(<span class="string">"localhost"</span>, <span class="number">6379</span>);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">100</span>; i++) &#123;</span><br><span class="line">        Pipeline pipeline = jedis.pipelined();</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j = i * <span class="number">100</span>; j &lt; (i + <span class="number">1</span>) * <span class="number">100</span>; j++) &#123;</span><br><span class="line">            pipeline.hset(<span class="string">"hashKey"</span>, <span class="string">"field-"</span> + j, <span class="string">"value-"</span> + i);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// pipeline.sync() 表示一次性的异步发生，不关注执行结果</span></span><br><span class="line">        <span class="comment">// pipeline.syncAndReturnAll() 程序会阻塞，等所有命令完成之后，返回一个list</span></span><br><span class="line">        <span class="comment">// pipeline不适合组装特别多的命令，要进行命令的拆分</span></span><br><span class="line">        List&lt;Object&gt; list = pipeline.syncAndReturnAll();</span><br><span class="line">        List&lt;String&gt; setList = list.stream().map(Object::toString).collect(Collectors.toList());;</span><br><span class="line">        System.out.println(String.join(<span class="string">","</span>, setList));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="优点"><a href="#优点" class="headerlink" title="优点"></a>优点</h5><ul><li>提高redis的读写能力。<blockquote><p>Redis其实是一个基于TCP协议的CS架构的内存数据库，<strong>所有的操作都是一个request一个response的同步操作</strong>。<br>redis每接收到一个命令就会处理一个命令，并同步返回结果。<br>这样带来的问题就是，一个命令就会产生一次RTT（Round Time Trip，往返时间），这样的话必然会消耗大量的网络IO。</p></blockquote></li></ul><blockquote><p>redis客户端执行一条命令分4个过程：<code>发送命令－〉命令排队－〉命令执行－〉返回结果</code>。<br>这个过程称为<code>RTT</code>。<br>mget和mset批量操作，有效节约了RTT，但大部分命令（如hgetall，并没有mhgetall）不支持批量操作，需要消耗N次RTT ，这个时候需要pipeline来解决这个问题</p></blockquote><h5 id="需注意"><a href="#需注意" class="headerlink" title="需注意"></a>需注意</h5><ul><li>Redis命令时间是微秒级别的，无瓶颈，也就是pipeline解决了Redis网络的瓶颈。</li><li>pipeline中每条命令要注意网络消耗</li><li>使用pipeline组装的命令个数不能太多，不然数据量过大，增加客户端的等待时间，还可能造成网络阻塞，可以将大量命令的拆分多个小的pipeline命令完成。</li><li>pipeline每次只能作用在一个Redis节点；</li></ul><h5 id="与M操作（批处理）对比："><a href="#与M操作（批处理）对比：" class="headerlink" title="与M操作（批处理）对比："></a>与M操作（批处理）对比：</h5><ul><li><code>原生批命令操作是原子的</code>（一批命令 要么成功要么失败）。<br><code>pipeline是非原子的</code>，会将其中命令进行拆分的，但返回的结果是顺序的。</li><li>原生批命令一命令多个key, 但pipeline支持多命令（存在事务），非原子性；</li><li>原生批命令是服务端实现，而pipeline需要服务端与客户端共同完成。</li></ul><h4 id="发布订阅-Pub-Sub"><a href="#发布订阅-Pub-Sub" class="headerlink" title="发布订阅 Pub/Sub"></a>发布订阅 Pub/Sub</h4><p>Redis 发布订阅(pub/sub)是一种消息通信模式：发送者(pub)发送消息，订阅者(sub)接收消息。<br>Redis 客户端可以订阅任意数量的频道。</p><h5 id="角色"><a href="#角色" class="headerlink" title="角色"></a>角色</h5><ul><li>发布者：Publisher<br>基于客户端实现。<blockquote><p>注意：<code>无法做消息堆积，即获取历史信息</code>。</p></blockquote></li></ul><p><strong>如Pub发布了一条消息到Channel，新的Sub去订阅该Channel，是收不到之前的消息的</strong>。</p><ul><li><p>订阅者：Subscribe<br>基于客户端实现，可订阅多个频道。</p></li><li><p>频道：Channel<br>基于Server段实现。</p></li></ul><h5 id="API"><a href="#API" class="headerlink" title="API"></a>API</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">publish channel message</span><br><span class="line">指定频道发布消息，返回订阅者数量</span><br><span class="line"></span><br><span class="line">subscribe channel ...</span><br><span class="line">可订阅一个或多个频道</span><br><span class="line"></span><br><span class="line">unsubscribe channel ...</span><br><span class="line">取消订阅一个或多个</span><br><span class="line">由于Redis的订阅操作是阻塞式的，因此一旦客户端订阅了某个频道或模式，就将会一直处于订阅状态直到退出。在SUBSCRIBE，PSUBSCRIBE，UNSUBSCRIBE和PUNSUBSCRIBE命令中，其返回值都包含了该客户端当前订阅的频道和模式的数量，当这个数量变为0时，该客户端会自动退出订阅状态。</span><br><span class="line"></span><br><span class="line">psubscribe&#x2F;punsubscribe pattern ...</span><br><span class="line">模式匹配。订阅&#x2F;退订一个或多个符合给定模式的频道。</span><br><span class="line"></span><br><span class="line">pubsub numsub channel ...</span><br><span class="line">返回指定channel的订阅数量</span><br><span class="line"></span><br><span class="line">pubsub numpat</span><br><span class="line">列出被订阅模式的数量</span><br></pre></td></tr></table></figure><h5 id="对其他消息队列发布订阅的对比："><a href="#对其他消息队列发布订阅的对比：" class="headerlink" title="对其他消息队列发布订阅的对比："></a>对其他消息队列发布订阅的对比：</h5><ul><li>其他MQ提供持久化功能，但Redis无法对消息持久化存储，一旦消息被发送，如果没有订阅者接收，那么消息就会丢失；</li><li>其他MQ提供了消息传输保障，当客户端连接超时或事务回滚等情况发生时，消息会被重新发送给客户端，Redis没有提供消息传输保障。</li><li>其他MQ支持多种消息协议。</li></ul><h4 id="位图-BitMap"><a href="#位图-BitMap" class="headerlink" title="位图 BitMap"></a><code>位图 BitMap</code></h4><h5 id="概念-1"><a href="#概念-1" class="headerlink" title="概念"></a>概念</h5><p><code>8bit = 1b = 0.001kb</code>，<br>bitmap就是通过最小的单位 bit来进行0或者1的设置，表示某个元素对应的值或者状态。</p><blockquote><p>一个bit的值，只能是0或1；也就是说一个bit能存储的最多信息是2。<br>位数组是自动扩展的，如设置在某个offset超出来现有范围，就会自动将位数组进行0扩充。</p></blockquote><p><strong>位图并不是一种特殊的数据结构，其实本质上是二进制字符串，也就是byte数组。</strong></p><blockquote><p>可以使用普通的 get/set 直接获取和设置整个位图的内容；<br>也可以使用位图操作 getbit/setbit 等将 byte 数组看成「位数组」来处理。</p></blockquote><p>Bitmaps 并不是实际的数据类型，而是定义在String类型上的一个面向字节操作的集合。<br>因为字符串是二进制安全的块，他们的最大长度是512M，最适合设置成2^32个不同字节。</p><h5 id="优势"><a href="#优势" class="headerlink" title="优势"></a>优势</h5><ul><li>基于最小的单位bit进行存储，所以非常省空间。</li><li>设置时候时间复杂度O(1)、读取时候时间复杂度O(n)，操作是非常快的</li><li>二进制数据的存储，进行相关计算的时候非常快</li><li>byte二进制数组方便扩容</li></ul><h5 id="限制"><a href="#限制" class="headerlink" title="限制"></a>限制</h5><p><strong>redis中BitMap被限制在512MB之内，所以最大是2^32位。</strong><br>建议每个key的位数都控制下，因为读取时候时间复杂度O(n)，越大的串读的时间花销越多。</p><h5 id="常用命令API"><a href="#常用命令API" class="headerlink" title="常用命令API"></a>常用命令API</h5><ul><li><p><code>getbit key offset</code><br>获取位图指定索引的值。<br>长度超过补为0。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">127.0.0.1:6379&gt; set hello redis</span><br><span class="line">OK</span><br><span class="line">127.0.0.1:6379&gt;</span><br><span class="line">127.0.0.1:6379&gt; getbit hello 0</span><br><span class="line">(integer) 0</span><br><span class="line">127.0.0.1:6379&gt; getbit hello 1</span><br><span class="line">(integer) 1</span><br><span class="line">127.0.0.1:6379&gt; getbit hello 2</span><br><span class="line">(integer) 1</span><br><span class="line">127.0.0.1:6379&gt; getbit hello 3</span><br><span class="line">(integer) 1</span><br><span class="line">127.0.0.1:6379&gt; getbit hello 4</span><br><span class="line">(integer) 0</span><br></pre></td></tr></table></figure></li><li><p><code>setbit key offset value</code><br>给位图指定索引设置值，返回该索引位置的原始值</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">127.0.0.1:6379&gt; get hello</span><br><span class="line">&quot;redis&quot;</span><br><span class="line">127.0.0.1:6379&gt; getbit hello 3</span><br><span class="line">(integer) 1</span><br><span class="line">127.0.0.1:6379&gt; setbit hello 3 0</span><br><span class="line">(integer) 1</span><br><span class="line">127.0.0.1:6379&gt; get hello</span><br><span class="line">&quot;bedis&quot;</span><br><span class="line">127.0.0.1:6379&gt;</span><br></pre></td></tr></table></figure></li><li><p><code>bitcount key [start end]</code><br>获取位图指定范围（start到end，单位为字节，如果不指定就是获取全部）位值为1的个数。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">127.0.0.1:6379&gt; get hello</span><br><span class="line">&quot;bedis&quot;</span><br><span class="line">127.0.0.1:6379&gt; bitcount hello</span><br><span class="line">(integer) 19</span><br></pre></td></tr></table></figure></li><li><p><code>bitpos key targetBit [start] [end]</code><br>计算位图指定范围（start到end，单位为字节，如果不指定就是获取全部）第一个偏移量对应的值等于targetBit的位置。<br>查找指定范围内出现的第一个0或1。</p></li><li><p><code>bitop and|or|not|xor destkey key [key...]</code><br>做多个bitmap的and（交集）、or（并集）、not（非）、xor（异或）操作并将结果保存到destkey中。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">127.0.0.1:6379&gt; set hello big</span><br><span class="line">OK</span><br><span class="line">127.0.0.1:6379&gt; set world big</span><br><span class="line">OK</span><br><span class="line">127.0.0.1:6379&gt; bitop and destkey hello world</span><br><span class="line">(integer) 3</span><br><span class="line">127.0.0.1:6379&gt; get destkey</span><br><span class="line">&quot;big&quot;</span><br></pre></td></tr></table></figure></li><li><p><code>bitfield命令</code><br>已支持的命令列表：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">- 支持的命令：GET &lt;type&gt; &lt;offset&gt; – 返回指定的位域</span><br><span class="line"> - SET &lt;type&gt; &lt;offset&gt; &lt;value&gt; – 设置指定位域的值并返回它的原值</span><br><span class="line"> - INCRBY &lt;type&gt; &lt;offset&gt; &lt;increment&gt; – 自增或自减（如果increment为负数）指定位域的值并返回它的新值</span><br><span class="line">还有一个命令通过设置溢出行为来改变调用INCRBY指令的后序操作：</span><br><span class="line">- OVERFLOW [WRAP|SAT|FAIL]</span><br></pre></td></tr></table></figure><p>示例：<br>当需要一个整型时，有符号整型需在位数前加i，无符号在位数前加u。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">127.0.0.1:6379&gt; get w</span><br><span class="line">&quot;hello&quot;</span><br><span class="line">127.0.0.1:6379&gt;</span><br><span class="line">127.0.0.1:6379&gt; BITFIELD w get u4 0</span><br><span class="line">1) (integer) 6</span><br><span class="line">127.0.0.1:6379&gt; BITFIELD w get u3 2</span><br><span class="line">1) (integer) 5</span><br><span class="line">127.0.0.1:6379&gt; BITFIELD w get i4 0</span><br><span class="line">1) (integer) 6</span><br><span class="line">127.0.0.1:6379&gt; BITFIELD w get i3 2</span><br><span class="line">1) (integer) -3</span><br></pre></td></tr></table></figure><p>setbit和getbit指定的值都是单个位的，如果指定多个位，就需要pipeline来处理。但使用bitfield可以对指定位片段进行读写，但最多只能处理64个连续但位。<br>如超过需使用多个子指令，bitfield可以一次执行多个子指令。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">一次执行多个子指令：</span><br><span class="line">127.0.0.1:6379&gt; BITFIELD w get u4 0 get u3 2 get i4 0 get i3 2</span><br><span class="line">1) (integer) 6</span><br><span class="line">2) (integer) 5</span><br><span class="line">3) (integer) 6</span><br><span class="line">4) (integer) -3</span><br></pre></td></tr></table></figure><blockquote><p>incrby，它用来对指定范围的位进行自增操作。<br>既然提到自增，就有可能出现溢出。<br>如果增加了正数，会出现上溢，如果增加的是负数，就会出现下溢出。<br>Redis 默认的处理是折返。如果出现了溢出，就将溢出的符号位丢掉。<br>如果是 8 位无符号数 255， 加 1 后就会溢出，会全部变零。如果是 8 位有符号数 127，加 1 后就会溢出变成 -128。</p><blockquote><p>溢出策略：<br>bitfield 指令提供了溢出策略子指令 overflow，用户可以选择溢出行为。<br>默认是折返 (wrap)，还可以选择失败 (fail) 报错不执行，以及饱和截断 (sat)，超过了范围就停留在最大 最小值。<br>overflow 指令只影响接下来的第一条指令，这条指令执行完后溢出策略会变成默认 值折返 (wrap)。</p></blockquote></blockquote></li></ul><h5 id="应用-5"><a href="#应用-5" class="headerlink" title="应用"></a>应用</h5><ul><li>1、<code>UV 独立用户统计</code>：<br>使用set和Bitmap（前提是用户的ID必须是整型）<br>场景一：总共1亿用户，五千万独立用户。<blockquote><p>使用Set：</p><blockquote><ul><li>每个userId占用空间：32位(假设userId用的是integer) ；</li><li>需要存储的用户量：50,000,000；</li><li>内存使用总量：32位 * 50,000,000=200MB<br>使用BItMap：</li><li>每个userId占用空间：1位；</li><li>需要存储的用户量：100,000,000；</li><li>内存使用总量：1位 * 100,000,000=12.5MB</li></ul></blockquote></blockquote></li></ul><p>场景二：总共1亿用户，若只有10万独立用户</p><blockquote><p>使用Set</p><blockquote><ul><li>每个userId占用空间：32位(假设userId用的是integer) ；</li><li>需要存储的用户量：100,000；</li><li>内存使用总量：32位 * 100,000=4MB<br>使用BItMap：</li><li>每个userId占用空间：1位；</li><li>需要存储的用户量：100,000,000；</li><li>内存使用总量：1位 * 100,000,000=12.5MB</li></ul></blockquote></blockquote><ul><li><p>2、用户签到数据记录：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">setbit key offset value</span><br></pre></td></tr></table></figure><p>key主要由用户id组成，设定一个初始时间，每加一天即对应用户的offset的加1。value=1为已签到<br>取数据时，只需要计算时间段差的天数，然后</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">bitcount key [start end]</span><br></pre></td></tr></table></figure></li><li><p>3、用户在线状态：判断某用户是否在线？</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">setbit key offset value</span><br></pre></td></tr></table></figure><p>只需要一个key，然后用户id为偏移量offset，如果在线就设置为1，不在线就设置为0。<br>3亿用户只需要大约36.6MB的空间：1位 * 3亿=3亿位/8/1000/1024=36.6M</p></li><li><p>4、统计活跃用户：<br>setbit key offset value 使用时间作为key，用户id为offset，如果当日活跃过就设置为1。<br>通过bitop and|or|not|xor destkey key [key...]进行二进制计算，就可以算出在某段时间内用户的活跃情况。</p></li></ul><h5 id="注意"><a href="#注意" class="headerlink" title="注意"></a>注意</h5><ul><li>string类型最大长度为512M。</li><li>注意setbit时的偏移量，当偏移量很大时，可能会有较大耗时。</li><li>位图不是绝对的好，有时可能更浪费空间。（如UV统计时的第二种情况）。</li></ul><h4 id="HyperLogLog-基数统计"><a href="#HyperLogLog-基数统计" class="headerlink" title="HyperLogLog 基数统计"></a>HyperLogLog 基数统计</h4><h5 id="概念-2"><a href="#概念-2" class="headerlink" title="概念"></a>概念</h5><p>HyperLogLog 是用来做<code>基数统计的算法</code>。<br><strong>基数统计即统计一个数据集中不重复元素的个数</strong>。</p><blockquote><p>提供不精确的去重计数方案，标准误差（即均方根误差，RMSE，Root mean squared error）为0.81%</p></blockquote><h5 id="API命令"><a href="#API命令" class="headerlink" title="API命令"></a>API命令</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">PFADD key element [element ...]</span><br><span class="line">添加指定元素到 HyperLogLog 中。</span><br><span class="line"></span><br><span class="line">PFCOUNT key [key ...]</span><br><span class="line">返回给定 HyperLogLog 的基数估算值。</span><br><span class="line"></span><br><span class="line">PFMERGE destkey sourcekey [sourcekey ...]</span><br><span class="line">将多个 HyperLogLog 合并为一个 HyperLogLog</span><br></pre></td></tr></table></figure><h5 id="优缺点"><a href="#优缺点" class="headerlink" title="优缺点"></a>优缺点</h5><p>优点：</p><ul><li>在输入元素的数量或者体积非常非常大时，计算基数所需的空间总是固定的、并且是很小的。</li><li>每个HyperLogLog 键只需要花费12KB内存，就可以计算接近 2^64 个不同元素的基数。<br>这和计算基数时，元素越多耗费内存就越多的集合形成鲜明对比。</li></ul><p>缺点：</p><ul><li>HyperLogLog 只会根据输入元素来计算基数，而不会储存输入元素本身，所以 HyperLogLog 不能像集合那样，返回输入的各个元素。</li><li>HLL这个数据结构需要占据一定12k的存储空间，不适合统计单个用户相关的数据。</li></ul><blockquote><ul><li><code>为什么占用12K？</code><br>因为Redis的HLL实现中用到了<strong>16384（2^14）个桶</strong>，每个桶的maxBits需要6个bits来存储，最大可以表示为maxBits=63。<br>于是总内存为：16384 * 6 / 8 / 1024 = 12k字节</li></ul></blockquote><h5 id="优化"><a href="#优化" class="headerlink" title="优化"></a>优化</h5><p>Redis对HLL做了优化：</p><ul><li>在计数比较小时，存储空间采用稀疏矩阵存储，占用空间小；</li><li>计数变大时，稀疏矩阵占用空间超过阈值时，会一次性转变为稠密矩阵，才会占用12K的空间。</li></ul><blockquote><ul><li><code>稀疏矩阵</code>：<br>在矩阵中，若数值为0的元素数目远远多于非0元素的数目时，则称该矩阵为稀疏矩阵。</li></ul><p><strong>只存储在矩阵中极少数的非零元素，为此必须对每一个非零元素，保存它的下标和值</strong>。<br>可以采用一个三元<code>Trituple&lt;row,column,value&gt;来唯一地确定一个矩阵元素</code>。<br>因此，稀疏矩阵需要使用一个三元组数组(亦称为三元组表)来表示。</p><ul><li><code>稠密矩阵</code>：<br>与之相反，若非0元素数目占大多数时，则称该矩阵为稠密矩阵。</li></ul></blockquote><h5 id="应用-6"><a href="#应用-6" class="headerlink" title="应用"></a>应用</h5><ul><li>1、用户的UV独立访问统计<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">127.0.0.1:6379&gt; PFADD uv 1 2 3 4 3 4 2 1</span><br><span class="line">(integer) 1</span><br><span class="line">127.0.0.1:6379&gt; PFCOUNT uv</span><br><span class="line">(integer) 4</span><br><span class="line">127.0.0.1:6379&gt; PFADD uv_2 7 8 9 8 7 9</span><br><span class="line">(integer) 1</span><br><span class="line">127.0.0.1:6379&gt; PFCOUNT uv_2</span><br><span class="line">(integer) 3</span><br><span class="line">127.0.0.1:6379&gt; PFMERGE result uv uv_2</span><br><span class="line">OK</span><br><span class="line">127.0.0.1:6379&gt; PFCOUNT result</span><br><span class="line">(integer) 7</span><br><span class="line">127.0.0.1:6379&gt;</span><br></pre></td></tr></table></figure></li></ul><h4 id="GEO-地理位置信息"><a href="#GEO-地理位置信息" class="headerlink" title="GEO 地理位置信息"></a>GEO 地理位置信息</h4><p>GEO 地理信息定位：存储经纬度、计算两地距离、范围计算等。</p><h5 id="原理"><a href="#原理" class="headerlink" title="原理"></a>原理</h5><p>业界比较通用的地理位置距离排序算法是 GeoHash 算法</p><ul><li><code>GeoHash算法</code>：<br>GeoHash 算法<strong>将二维的经纬度数据映射到一维的整数，这样所有的元素都将在挂载到一条线上，距离靠近的二维坐标映射到一维后的点之间距离也会很接近</strong>。<br>当我们想要计算「附近的人时」，首先将目标位置映射到这条线上，然后在这个一维的线上获取附近的点就行 了。<blockquote><p><code>映射算法实现</code>：</p><ul><li>1、它将整个地球看成一个二维平面，然后划分成了一系列正方形的方格，就好比围棋棋盘，所有的地图元素坐标都将放置于唯一的方格中。方格越小，坐标越精确。</li><li>2、然后对这些方格进行整数编码，越是靠近的方格编码越是接近。<blockquote><p>最简单的方案就是<code>切蛋糕法</code>：<br>设想一个正方形的蛋糕摆在你面前，二刀下去均分 分成四块小正方形，这四个小正方形可以分别标记为 00,01,10,11 四个二进制整数。然后对每一个小正方形继续用二刀法切割一下，这时每个小小正方形就可以使用 4bit 的二进制整数予以表示。然后继续切去，正方形就会越来越小，二进制整数也会越来越长，精确度就会越来越高。</p></blockquote></li><li>3、编码之后，每个地图元素的坐标都将变成一个整数，通过这个整数可以还原出元素的坐标，整数越长，还原出来的坐标值的损失程度就越小。</li><li>4、GeoHash算法会继续对这个整数做一次 base32编码 (0-9,a-z去掉 a,i,l,o 四个字母) 变成一个字符串。<blockquote><p>在Redis里面，经纬度使用52位的整数进行编码，放进了zset里面，zset的 value 是元素的 key，score 是 GeoHash 的 52 位整数值。</p></blockquote></li><li>5、在使用 Redis 进行 Geo 查询时，它的内部结构实际上只是一个zset(skiplist)。通过 zset 的 score 排序就可以得到坐标附近的其它元素 ，通过将 score 还原成坐标值就可以得到元素的原始坐标。</li></ul></blockquote></li></ul><h5 id="API命令-1"><a href="#API命令-1" class="headerlink" title="API命令"></a>API命令</h5><ul><li><code>geoadd key longitude latitude member [longitude latitude member...]</code><br>将给定的空间元素(纬度、经度、名字)添加到指定的键里面。<blockquote><p>这些数据会以有序集合的形式被储存在键里面，<br>从而使得georadius和georadiusbymember这样的命令可以在之后通过位置查询取得这些元素。<br>geoadd命令以标准的x,y格式接受参数,所以用户必须先输入经度,然后再输入纬度。<br>geoadd能够记录的坐标是有限的：非常接近两极的区域无法被索引的精确的坐标限制由EPSG:900913 / EPSG:3785 / OSGEO:41001 等坐标系统定义， 具体如下</p></blockquote></li><li>有效的经度介于-180-180度之间</li><li>有效的纬度介于-85.05112878 度至 85.05112878 度之间。<br>当用户尝试输入一个超出范围的经度或者纬度时，geoadd命令将返回一个错误。</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">127.0.0.1:6379&gt; GEOADD cities:locations 116.28 39.55 beijing</span><br><span class="line">(integer) 1</span><br></pre></td></tr></table></figure><ul><li><code>geopos key member [member...]</code><br>从键里面返回所有给定位置元素的位置(经度和纬度)<blockquote><p>geopos命令返回一个数组。<br>数组中的每个项都由两个元素组成：<br>第一个元素为给定位置元素的经度,<br>而第二个元素则为给定位置元素的纬度。<br>当给定的位置元素不存在时,对应的数组项为空值.</p></blockquote></li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">127.0.0.1:6379&gt; geopos cities:locations tianjin shijiazhuang</span><br><span class="line">1) 1) &quot;117.12000042200088501&quot;</span><br><span class="line">   2) &quot;39.0800000535766543&quot;</span><br><span class="line">2) 1) &quot;114.29000169038772583&quot;</span><br><span class="line">   2) &quot;38.01999994251037407&quot;</span><br><span class="line">127.0.0.1:6379&gt; geopos cities:locations nanjing</span><br><span class="line">1) (nil)</span><br></pre></td></tr></table></figure><ul><li><code>geodist key member1 member2 [unit]</code><br>计算出的距离会以双精度浮点数的形式被返回。如果给定的位置元素不存在,那么命令返回空值。<blockquote><p>指定单位的参数unit必须是以下单位的其中一个：<br>m表示单位为米<br>km表示单位为千米<br>mi表示单位为英里<br>ft表示单位为英尺<br>如果用户没有显式地指定单位参数,那么geodist默认使用米作为单位。<br>geodist命令在计算距离时会假设地球为完美的球形,在极限情况下,这一假设最大会造成0.5%的误差。</p></blockquote></li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">127.0.0.1:6379&gt; geodist cities:locations tianjin shijiazhuang</span><br><span class="line">&quot;272929.6477&quot;</span><br><span class="line">127.0.0.1:6379&gt; geodist cities:locations tianjin shijiazhuang km</span><br><span class="line">&quot;272.9296&quot;</span><br><span class="line">127.0.0.1:6379&gt; geodist cities:locations tianjin nanjing km</span><br><span class="line">(nil)</span><br></pre></td></tr></table></figure><ul><li><code>georadius key longitude latitude radius m|km|ft|mi [withcoord][withdist][withhash][asc|desc][count count]</code><br>以给定的经纬度为中心,返回键包含的位置元素当中,与中心的距离不超过给定最大距离的所有位置元素。<blockquote><p>范围可以使用以下其中一个单位：<br>m 表示单位为米。<br>km 表示单位为千米。<br>mi 表示单位为英里。<br>ft 表示单位为英尺。<br>withdist:在返回位置元素的同时,将位置元素与中心之间的距离也一并返回.距离的单位和用户给定的范围单位保持一致。<br>withcoord:将位置元素的经度和纬度也一并返回。<br>withhash:以52位有符号整数的形式,返回位置元素经过原始geohash编码的有序集合分值。这个选项主要用于底层应用或者调试,实际中的作用不大。<br>命令默认返回未排序的位置元素。<br>通过以下两个参数,用户可以指定被返回位置元素的排序方式：</p><blockquote><p>asc:根据中心的位置,按照从近到远的方式返回位置元素<br>desc:根据中心的位置,按照从远到近的方式返回位置元素。</p></blockquote></blockquote></li></ul><p>在默认情况下,georadius命令会返回所有匹配的位置元。虽然用户可以使用count选项去获取N个匹配元素,但是因为命令在内部可能会需要对所有被匹配的元素进行处理,所以在对一个非常大的区域进行搜索时,即使只使用count选项去获取少量元素，</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">127.0.0.1:6379&gt; georadius cities:locations 117 39 200 km withdist</span><br><span class="line">1) 1) &quot;baoding&quot;</span><br><span class="line">   2) &quot;158.0144&quot;</span><br><span class="line">2) 1) &quot;beijing&quot;</span><br><span class="line">   2) &quot;87.0941&quot;</span><br><span class="line">3) 1) &quot;tianjin&quot;</span><br><span class="line">   2) &quot;13.6619&quot;</span><br><span class="line">4) 1) &quot;tangshan&quot;</span><br><span class="line">   2) &quot;96.7842&quot;</span><br></pre></td></tr></table></figure><ul><li><p><code>georadiusbymember key member radius m|km|ft|mi [withcoord][withdist][withhash][asc|desc][count count]</code><br>和georadius命令一样,都可以找出位于指定范围内的元素,<br>但是georadiusbymember的中心点是由给定的位置元素决定的。<br>而不是像georadius那样,使用输入的经度和纬度来决定中心点。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">127.0.0.1:6379&gt; georadiusbymember cities:locations tianjin 100 km</span><br><span class="line">1) &quot;beijing&quot;</span><br><span class="line">2) &quot;tianjin&quot;</span><br><span class="line">3) &quot;tangshan&quot;</span><br><span class="line">127.0.0.1:6379&gt; georadiusbymember cities:locations beijing 100 km</span><br><span class="line">1) &quot;beijing&quot;</span><br><span class="line">2) &quot;tianjin&quot;</span><br></pre></td></tr></table></figure></li><li><p><code>geohash key member [member...]</code><br>使用geohash将二维经纬度转换为一维字符串，字符串越长表示位置更精确,两个字符串越相似表示距离越近。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">127.0.0.1:6379&gt; geohash cities:locations tangshan baoding</span><br><span class="line">1) &quot;wx5bj2um070&quot;</span><br><span class="line">2) &quot;wwcgp6x9580&quot;</span><br><span class="line">127.0.0.1:6379&gt; geohash cities:locations beijing tianjin</span><br><span class="line">1) &quot;wx48ypbe2q0&quot;</span><br><span class="line">2) &quot;wwgq34k1tb0&quot;</span><br></pre></td></tr></table></figure></li><li><p><code>zrem</code><br>GEO没有提供删除成员的命令，但是因为<code>GEO的底层实现是zset</code>，所以可以借用zrem命令实现对地理位置信息的删除.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">zrem cities:locations tianjin</span><br></pre></td></tr></table></figure></li></ul><h5 id="应用-7"><a href="#应用-7" class="headerlink" title="应用"></a>应用</h5><ul><li>1、查看附近的人、餐厅、公司等<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">georadiusbymember company huoli 20 km count 3 asc</span><br><span class="line">范围 20 公里以内最多 3 个元素按距离正排，它不会排除自身</span><br></pre></td></tr></table></figure></li></ul><h4 id="事务-Transaction"><a href="#事务-Transaction" class="headerlink" title="事务 Transaction"></a>事务 Transaction</h4><ul><li><p><code>MULTI</code><br>标记一个事务块的开始。<br>事务块内的多条命令会按照先后顺序被放进一个队列当中，最后由 EXEC命令原子性(atomic)地执行。<br>O(1)操作；</p></li><li><p><code>EXEC</code><br>执行所有事务块内的命令。<br>假如某个(或某些) key 正处于 WATCH命令的监视之下，且事务块中有和这个(或这些) key 相关的命令，那么 EXEC命令只在这个(或这些) key 没有被其他命令所改动的情况下执行并生效，否则该事务被打断(abort)。<br>时间复杂度：事务块内所有命令的时间复杂度的总和。<br>返回：事务块内所有命令的返回值，按命令执行的先后顺序排列。当操作被打断时，返回空值 nil </p></li></ul><ul><li><p><code>DISCARD</code><br>取消事务，放弃执行事务块内的所有命令。<br>如果正在使用 WATCH命令监视某个(或某些) key，那么取消所有监视，等同于执行命令 UNWATCH<br>O(1)操作，总是返回ok</p></li><li><p><code>WATCH key [key ...]</code><br>监视一个(或多个) key ，如果在事务执行之前这个(或这些) key 被其他命令所改动，那么事务将被打断。<br>O(1)操作</p></li><li><p><code>UNWATCH</code><br>取消 WATCH命令对所有 key 的监视。<br>如果在执行 WATCH命令之后， EXEC命令或DISCARD命令先被执行了的话，那么就不需要再执行 UNWATH了。</p><blockquote><p>因为 EXEC命令会执行事务，因此 WATCH命令的效果已经产生了；而 DISCARD命令在取消事务的同时也会取消所有对 key 的监视，因此这两个命令执行之后，就没有必要执行 UNWATCH了。</p></blockquote></li></ul><h2 id="内部原理"><a href="#内部原理" class="headerlink" title="内部原理"></a>内部原理</h2><h3 id="持久化"><a href="#持久化" class="headerlink" title="持久化"></a><code>持久化</code></h3><h4 id="概述-1"><a href="#概述-1" class="headerlink" title="概述"></a>概述</h4><p>Redis 的数据全部在内存里，如果突然宕机，数据就会全部丢失，因此必须有一种机制 来保证 Redis 的数据不会因为故障而丢失，这种机制就是 Redis 的持久化机制。</p><p>持久化就是：<code>redis将所有的数据保存在内存中，对数据的更新它会异步地保存到磁盘上</code>。</p><p>主流数据库的持久化方式：</p><ul><li><code>快照</code>：<br>如：MySQL的Dump、Redis的RDB</li><li><code>写日志</code>：<br>如：MySQL的Binlog、Hbase的HLog、Redis的AOF日志<br>两者区别：</li><li>1、快照是一次全量备份，AOF 日志是连续的增量备份；</li><li>2、快照是内存数据的二进制序列化形式，在存储上非常紧凑，而 AOF 日志记录的是内存数据修改的指令记录文本；</li><li>3、AOF 日志在长期的运行过程中会 变的无比庞大，数据库重启时需要加载 AOF 日志进行指令重放，这个时间就会无比漫长。所以需要定期进行 AOF 重写，给 AOF 日志进行瘦身。</li></ul><h4 id="三种方式"><a href="#三种方式" class="headerlink" title="三种方式"></a>三种方式</h4><h5 id="RDB快照"><a href="#RDB快照" class="headerlink" title="RDB快照"></a>RDB快照</h5><p>RDB快照，也就是定时快照（snapshot），是<code>存储在硬盘中的二进制文件，是一个复制媒介用于一次全量备份</code>。<br>RDB快照持久化，也就是是<strong>将redis数据库某个时点的数据信息以快照文件的形式保存到磁盘的持久化方法</strong>。</p><ul><li><code>主要思想</code>：<br>RDB方式实际就是在Redis内部存在一个定时器机制，扫描进程按照配置文件中的要求去检查数据的变化情况，即<strong>根据指定时间内的数据变化次数决定是否进行持久化</strong>。<br>当达到持久化的触发条件时，<strong>操作系统会单独创建（fork）一个子进程来进行数据持久化的操作</strong>，子进程默认与父进程有共同的地址空间，这样<strong>子进程就可以遍历整个内存来进行存储操作，主进程此时仍然可以正常提高服务</strong>，只是不进行I/O操作，有写入请求时，由操作系统按照内存页（Page）为单位进行写时复制Copy-on-Write，从而保证主进程的高效性能。</li></ul><p><strong>子进程数据写入时是将数据先写入一个临时文件中，当整个数据写入完毕后，才会用临时文件覆盖上一个持久化好的快照文件</strong>，这样保证了系统可以随时的进行数据备份，数据文件总是可用的。</p><p>由上可知：RDB模式的持久化，<code>数据的完整性没有保障</code>。</p><h6 id="触发复制的三种方式："><a href="#触发复制的三种方式：" class="headerlink" title="触发复制的三种方式："></a>触发复制的三种方式：</h6><ul><li><p>手动触发：<br><code>save一个同步的命令：O(n)操作</code><br>该指令会阻塞当前 Redis 服务器，执行 save 指令期间，Redis 不能处理其他命令，直到 RDB 过程完成为止。如存在老的RDB文件，会新建一个临时文件，执行完毕后替换老文件，再删除老文件。<br><code>bgsave 一个异步命令：O(n)操作</code>。<br>执行该命令时，Redis 会在后台异步执行快照操作，此时 Redis 仍然可以相应客户端请求。如存在老的RDB文件，会新建一个临时文件，执行完毕后替换老文件。</p><blockquote><p>具体操作是<strong>Redis进程执行linux的fork函数 操作创建子进程，RDB持久化过程由子进程负责，完成后自动结束</strong>。Redis 只会在 fork 期间发生阻塞，但是一般时间都很短。但是如果 Redis 数据量特别大，fork 时间就会变长，而且占用内存会加倍，这一点需要特别注意。</p></blockquote></li><li><p>自动触发：（redis.conf 配置）<br>参考：配置中的持久化模块<br>可以设置指定时间内key的变化数量来自动触发。</p></li><li><p>其他触发机制：（不可忽视）<br><code>全量复制</code>：涉及到主从复制，在没有触发手动和自动的时候，主从复制时（全量复制），主会生成rdb文件。<br><code>debug reload操作</code>：进行debug级别的重启，也会生成rdb文件。<br><code>命令 shutdown [nosave|save]</code>：关闭服务指定save时，也会生成</p><blockquote><p>Shutdown 命令执行以下操作：     </p></blockquote></li><li><p>停止所有客户端</p></li><li><p>如果有至少一个保存点在等待，执行 SAVE 命令</p></li><li><p>如果 AOF 选项被打开，更新 AOF 文件</p></li><li><p>关闭 redis 服务器(server)</p></li></ul><h6 id="原理-1"><a href="#原理-1" class="headerlink" title="原理"></a>原理</h6><ul><li><p>背景：<br>单线程同时在服务线上的请求还要进行文件 IO 操作，文件IO操作会严重拖垮服务器请求的性能。</p><blockquote><p>Redis 是单线程程序，这个线程要同时负责多个客户端套接字的并发读写操作和内存数据结构的逻辑读写。<br>在服务线上请求的同时，Redis还需要进行内存快照，内存快照要求 Redis 必须进行文件IO操作，可文件 IO 操作是不能使用多路复用API。</p></blockquote></li><li><p><code>COW 写时复制（copy-on-write）</code><br>为了不阻塞线上的业务，就需要边持久化边响应客户端请求。持久化的同时，内存数据结构还在改变：</p><blockquote><p>比如一个大型的 hash 字典正在持久化，结果一个请求过来把它给删掉了，还没持久化完呢，这要怎么办?  所以，<code>Redis 使用操作系统的fork多进程 COW(Copy On Write) 机制来实现快照持久化</code>。</p></blockquote></li></ul><p>大多数操作系统都采用写时复制（copy-on-write）来优化子进程的使用效率。</p><blockquote><p>实现原理：</p><ul><li>fork是类Unix操作系统上创建进程的主要方法。fork用于创建子进程(等同于当前进程的副本)。<br>新的进程要通过老的进程复制自身得到，这就是fork！</li><li>fork()之后，kernel把父进程中所有的内存页的权限都设为read-only，然后子进程的地址空间指向父进程。<br>当父子进程都只读内存时，相安无事。<br>当其中某个进程写内存时，CPU硬件检测到内存页是read-only的，于是触发页异常中断（page-fault），陷入kernel的一个中断例程。<br>中断例程中，kernel就会把触发的异常的页复制一份，于是父子进程各自持有独立的一份。</li></ul></blockquote><p>优点：<br>1、COW技术可减少分配和复制大量资源时带来的瞬间延时。<br>2、可减少不必要的资源分配。比如fork进程时，并不是所有的页面都需要复制，父进程的代码段和只读数据段都不被允许修改，所以无需复制。</p><p>缺点：<br>1、如果在fork()之后，父子进程都还需要继续进行写操作，那么会产生大量的分页错误(页异常中断page-fault)，这样就得不偿失。</p><ul><li><code>fork多进程操作</code>：<blockquote><ul><li>Redis 在持久化时会调用 glibc 的函数 fork 产生一个子进程，快照持久化完全交给子进程来处理，父进程继续处理客户端请求。</li><li>子进程刚刚产生时，它和父进程共享内存里面的代码段和数据段。</li><li>进程分离的逻辑：<br>fork 函数会在父子进程同时返回，在父进程里返回子进程的pid，在子进程里返回零。<br>如果操作系统内存资源不足，pid 就会是负数，表示 fork 失败。</li><li>子进程做数据持久化，它不会修改现有的内存数据结构，它只是对数据结构进行遍历读取，然后序列化写到磁盘中。<br>但是父进程不一样，它必须持续服务客户端请求，然后对内存数据结构进行不间断的修改。</li><li>这个时候就会使用操作系统的<code>COW机制（写时复制, copy-on-write）</code>来进行数据段页面的分离。<blockquote><p>数据段是由很多操作系统的页面组合而成，当父进程对其中一个页面的数据进行修改时，会将被共享的页面复制一份分离出来，然后对这个复制的页面进行修改。这时子进程相应的页面是没有变化的，还是进程产生时那一瞬间的数据。<br>随着父进程修改操作的持续进行，越来越多的共享页面被分离出来，内存就会持续增长。但是也不会超过原有数据内存的2倍大小。<br>另外一个 Redis 实例里冷数据占的比例往往是比较高的，所以很少会出现所有的页面都会被分离，被分离的往往只有其中一部分页面。<br>每个页面的大小只有 4K，一个 Redis 实例里面一般都会有成千上万的页面。<br>子进程因为数据没有变化，它能看到的内存里的数据在进程产生的一瞬间就凝固了，再也不会改变，<br>这也是为什么 Redis 的持久化叫「快照」的原因。<br>接下来子进程就可以非常安心的遍历数据了进行序列化写磁盘了。</p></blockquote></li></ul></blockquote></li></ul><h5 id="AOF追写文件"><a href="#AOF追写文件" class="headerlink" title="AOF追写文件"></a>AOF追写文件</h5><p><strong>AOF 日志是连续的增量备份，记录的是内存数据修改的指令记录文本</strong>。<br>就是<strong>把执行过的写指令按照执行顺序写在记录文件的尾部，重启时读取文件指令明细按照顺序执行一遍就能完成恢复。</strong></p><ul><li>主要思想总结：<br>配置文件<code>redis.conf中的appendonly参数</code>就是控制AOF功能的启动与关闭，yes表示开启，如果在有写操作，指令就会被追加到记录文件的尾部。</li></ul><p><strong>AOF默认的存储策略是每秒钟执行一次</strong>，术语称之为<code>fsync</code>。</p><blockquote><p>即把缓存中的写指令记录到文件中，这是redis持久化与性能的最佳平衡点，此策略<strong>既能保证 redis 有很好的性能表现又能保障数据完整性，最多存在 1 秒钟的数据丢失</strong>。</p></blockquote><p>在文件追加过程中，如果发生了意外错误，例如系统宕机等意外状况，导致记录文件写入不完整的缺陷，这种情况下，redis提供了一个叫<code>redis-check-aof的工具</code>可以对不完整的日志文件进行修复处理。</p><p>AOF文件一定会随着数据量变动越来越大，有可能导致日志空间不足等意外风险，为了避免这个低级的错误发生，redis 提供了一个方便实用的自我保护机制-<code>重写（rewrite）机制</code>，</p><blockquote><p>就是管理员预先设定 AOF 文件大小的阈值，当实际大小超过阈值时，redis 就会启动了文件内容压缩，只保留了能保障数据恢复的最<br>小可用的指令集。文件重写功能仍然采用了先创建并写入临时文件，当重写过程结束后，才更名及覆盖上一个可用的 aof 文件模式来保障备份文件的随时可用。</p></blockquote><p>AOF 文件本身是<code>可读且可编辑的</code>。</p><blockquote><p>可读可编辑的好处：假设我们在操作 redis 时，不小心执行了 flushall，内存数据全部清空了，但是开启了AOF功能且AOF文件没有被重写的前提下，我<br>们可以暂停 redis 并对aof文件进行编辑，删除文件末尾保存的 flushall 指令，重启 redis，内存数据就能恢复。</p></blockquote><h6 id="RDB快照的问题"><a href="#RDB快照的问题" class="headerlink" title="RDB快照的问题"></a>RDB快照的问题</h6><ul><li><p>1、耗时、耗性能。<br>将内存中的数据dump到硬盘，是一个O(n)过程，比较耗时；<br>bgsave中的fork()：消耗内存，copy-on-write策略<br>硬盘I/O：IO性能问题</p></li><li><p>2、不可控、容易丢失数据。<br>如该场景：<br>T1时间 执行多个写命令；<br>T2时间 满足RDB自动创建的条件；<br>T3时间 再次执行多个写命令；<br>T4时间 宕机，就会出现数据丢失</p></li></ul><h6 id="原理-2"><a href="#原理-2" class="headerlink" title="原理"></a>原理</h6><p>AOF 日志存储的是 Redis服务器的顺序指令序列，只记录对内存进行修改的指令记录。</p><ul><li>假设 AOF 日志记录了自 Redis 实例创建以来所有的修改性指令序列，那么就可以通过 对一个空的 Redis 实例顺序执行所有的指令，也就是「重放」，来恢复 Redis 当前实例的内存数据结构的状态。</li><li>Redis 会在收到客户端修改指令后，先进行参数校验，如果没问题，就立即将该指令文本存储到 AOF 日志中，也就是先存到磁盘，然后再执行指令。<br>这样即使遇到突发宕机，已经存储到 AOF 日志的指令进行重放一下就可以恢复到宕机前的状态。</li><li>Redis 在长期运行的过程中，AOF 的日志会越变越长。如果实例宕机重启，重放整个 AOF 日志会非常耗时，导致长时间 Redis 无法对外提供服务。所以需要对 AOF 日志瘦身。</li></ul><h6 id="AOF重写（提高效率）"><a href="#AOF重写（提高效率）" class="headerlink" title="AOF重写（提高效率）"></a>AOF重写（提高效率）</h6><p>Redis 提供了 <code>bgrewriteaof 指令</code>用于对 AOF 日志进行瘦身。<br>日志瘦身：对执行的命令进行合并，如String类型多次赋值只保留最后一次，多次操作改为批量命令操作等。</p><blockquote><p>其原理就是：<strong>对redis内存中的内容进行回溯，回溯成aof文件</strong>。<br>fork开辟一个子进程对内存进行遍历转换成一系列 Redis 的操作指令，序列化到一个新的 AOF 日志文件中。序列化完毕后再将操作期间发生的增量 AOF 日志追加到这个新的 AOF 日志文件中，追加完毕后就立即替代旧的 AOF 日志文件了，瘦身工作就完成了。</p></blockquote><ul><li>AOF重写配置：<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">auto-aof-rewrite-min-size 64mb</span><br><span class="line">AOF文件重写需要的尺寸</span><br><span class="line"></span><br><span class="line">auto-aof-rewrite-percentage 100</span><br><span class="line">AOF文件增长率</span><br></pre></td></tr></table></figure></li></ul><h6 id="fsync操作（宕机AOF丢失数据问题）"><a href="#fsync操作（宕机AOF丢失数据问题）" class="headerlink" title="fsync操作（宕机AOF丢失数据问题）"></a>fsync操作（宕机AOF丢失数据问题）</h6><p>AOF 日志是以文件的形式存在的，当程序对 AOF 日志文件进行写操作时，实际上是<strong>将内容写到了硬盘的缓冲区</strong>（内核为文件描述符分配的一个内存缓存中），<strong>然后内核会异步将脏数据刷回到磁盘的</strong>。<br>这就意味着如果机器突然宕机，AOF 日志内容可能还没有来得及完全刷到磁盘中，这个 时候就会出现日志丢失。那该怎么办?</p><blockquote><ul><li>Linux 的 glibc 提供了 <code>fsync(int fd)函数</code>可以<strong>将指定文件的内容强制从内核缓存刷到磁 盘</strong>。只要 Redis 进程实时调用 fsync 函数就可以保证 aof 日志不丢失。<br>但是 fsync 是一个磁盘IO操作，它很慢。<br>如果 Redis 执行一条指令就要 fsync 一次，那么 Redis 高性能的地位就不保了。</li><li>所以在生产环境的服务器中，Redis 通常是每隔 1s 左右执行一次 fsync 操作，周期 1s 是可以配置的。<br>这是在数据安全性和性能之间做了一个折中，在保持高性能的同时，尽可能使得数据少丢失。</li><li>Redis 同样也提供了另外两种策略：<br>一个是永不 fsync，让操作系统来决定合适同步磁 盘，很不安全；<br>另一个是来一个指令就 fsync 一次，非常慢。</li></ul></blockquote><ul><li>三种配置策略：<br>具体参考：aof持久化策略的配置<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">no 表示不执行fsync，由操作系统保证数据同步到磁盘，速度最快。</span><br><span class="line">always 表示每次写入都执行fsync，以保证数据同步到磁盘。</span><br><span class="line">everysec 表示每秒执行一次fsync，可能会导致丢失这1s数据</span><br></pre></td></tr></table></figure></li></ul><h5 id="混合持久化"><a href="#混合持久化" class="headerlink" title="混合持久化"></a>混合持久化</h5><p>重启 Redis 时，我们很少使用rdb 来恢复内存状态，因为会丢失大量数据（rdb的缺点）。我们通常使用 AOF 日志重放，但是重放 AOF 日志性能相对 rdb 来说要慢很多，这样在 Redis 实例很大的情况下，启动需要花费很长的时间。Redis 4.0 为了解决这个问题，带来了一个新的持久化选项：<code>混合持久化</code>。</p><ul><li>生效的两个配置：<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">appendonly yes</span><br><span class="line">aof-use-rdb-preamble yes</span><br></pre></td></tr></table></figure></li><li>思想：<br>将 rdb 文件的内容和增量的 AOF 日志文件存在一起。这里的 AOF 日志不再是全量的日志，而是自持久化开始到持久化结束的这段时间发生的增量 AOF 日志，通常这部分 AOF 日志很小。<br>于是<strong>在Redis重启的时候，可以先加载rdb的内容，然后再重放增量 AOF 日志就可以完全替代之前的 AOF全量文件重放，重启效率因此大幅得到提升</strong>。</li></ul><h4 id="RDB和AOF对比"><a href="#RDB和AOF对比" class="headerlink" title="RDB和AOF对比"></a>RDB和AOF对比</h4><ul><li>rdb持久化：故障数据丢失比aof严重，但是服务重启恢复数据快</li><li>aof持久化：故障数据丢失较rdb少，但是服务启动时恢复数据慢，因为要把aof文件中指令执行一遍。</li><li>RDB 启动优先级低、体积小、恢复速度快、容易丢数据、比较重的操作；<br>AOF 启动优先级高、体积大、恢复速度慢、丢数据要根据策略决定、比较轻的操作；</li></ul><h4 id="运维常见问题"><a href="#运维常见问题" class="headerlink" title="运维常见问题"></a>运维常见问题</h4><ul><li><p><code>通常 Redis 的主节点是不会进行持久化操作，持久化操作主要在从节点进行</code>。<br>从节点是备份节点，没有来自客户端请求的压力，它的操作系统资源往往比较充沛。</p><blockquote><p>因为：</p><ul><li>快照（bgsave）是通过开启子进程的方式进行的，它是一个比较耗资源的操作；遍历整个内存，大块写磁盘会加重系统负载；<br>AOF 的 fsync 是一个耗时的 IO 操作，它会降低 Redis 性能，同时也会增加系统 IO 负担。</li><li>但是如果出现网络问题，从节点长期连不上主节点，就会出现数据不一致的问题。<br>特别是在网络分区出现的情况下又不小心主节点宕机了，那么数据就会丢失，所以在生产环境要做好实时监控工作，保证网络畅通或者能快速修复。</li><li>还应该再增加一个从节点以降低网络分区的概率，只要有一个从节点数据同步正常，数据也就不会轻易丢失。</li></ul></blockquote></li><li><p>子进程开销和优化：</p><blockquote><ul><li><code>CPU</code>：<br>RDB和AOF文件生成，属于CPU密集型;不做CPU绑定，不和CPU密集型部署。</li><li><code>内存</code>：<br>fork内存开销，copy-on-write，即父子进程共享只读分段文件时，父进程某个分段文件发生写入，会将其拷贝出一份新的分段文件，造成内存开销。<br>单机部署时，不允许产生大量重写，</li><li><code>硬盘</code>：<br>AOF和RDB文件写入，可以集合iostat和iotop分析；<br>1、不要和高硬盘负载的服务部署在一起，如：存储服务、消息队列等；<br>2、no-appendfsync-no-rewrite = yes，表示rewrite期间对新写操作不fsync,暂时存在内存中,等rewrite完成后再写入，<br>3、根据写入量决定磁盘类型：如SSD<br>4、单机多实例持久化文件目录可以考虑分盘</li></ul></blockquote></li></ul><h3 id="主从复制"><a href="#主从复制" class="headerlink" title="主从复制"></a>主从复制</h3><h4 id="概述-2"><a href="#概述-2" class="headerlink" title="概述"></a>概述</h4><p>Redis数据库在单机时：机器故障问题、容量瓶颈、QPS的瓶颈。</p><p><code>主从复制就是对主节点进行数据备份、读写分离对读进行分流。</code> 可以为数据提供副本，扩展redis的读的性能。</p><blockquote><p>1、一个Master可以有多个Slave；<br>2、一个Slave只能有一个Master；<br>3、数据流向是单向的，Master到Salve；<br>4、默认情况下，Redis都是主节点</p></blockquote><ul><li><code>主要思想</code>：</li></ul><p><strong>从服务器启动并与主服务器成功建立连接后，它会主动发起 SYNC请求，Master 接收到同步请求时会调用 BGSAVE 指令来创建一个专用子进程来完成数据持久化处理</strong>。</p><blockquote><p>全量数据持久化处理可以分成两个阶段：</p><blockquote><p>首先，<strong>将主服务器的存量数据都写入 RDB 文件</strong>，Master 在数据持久化期间产生的增量数据会启动<br>另一个后台存盘进程，把增量的写指令记录全部缓存在内存中，等待存量数据持久化完成后，Master 把 RDB 数据库文件传送给 Slave，Slave 接收到数据库文件后将其存放在磁盘上并逐步完成数据加载，这样存量数据就同步结束了；<br>然后，要进行<strong>同步的是持久化期间的增量数据</strong>，Master 将所有缓存在内存中的写指令按照约定的 redis 协议格式发给 Slave，Slave 接收后在本地执行这些数据写命令，从而达到最终的数据完全同步。</p></blockquote></blockquote><p>不论是那一种逻辑结构，<code>Master只会执行一次持久化动作无论有多少个slave有同步请求，然后把持久化好的 RDB 文件分发下去</code>。<br>Redis2.8 的版本提供了<code>数据增量同步策略</code>：<br>Master和Slave如果断开连接，之后又重新连接时。在连接成功后，可以<strong>尝试进行增量数据同步</strong>。</p><blockquote><p>增量数据同步策略是<strong>主服务器会在内存中维护一个缓冲区来存放待同步数据</strong>，主从连接成功后，Slave会把“申请同步的主服务器ID”和“请求的数据的偏移量（replication offset）”发送给Master，Master 收到增量同步请求时，根据上送的申请同步的主服务器ID去匹配自己的ID信息，匹配成功后检查自己的缓存区数据是否能满足申请的数据偏移量，如果都两个条件都满足，则能完成master-slave 的增量数据同步。<br>如果runid和本机id不一致或者双方offset差距超过了复制积压缓冲区大小，那么就会返回FULLRESYNC runid offset，Slave将runid保存起来，并进行完整同步。</p></blockquote><h4 id="步骤"><a href="#步骤" class="headerlink" title="步骤"></a>步骤</h4><ul><li>1、<code>执行slaveof</code>后，slave只保存master的地址信息，直接返回；</li><li>2、<code>主从建立socket连接</code>；<br>slave内部通过每秒执行的定时任务维护复制相关逻辑，当发现新的matser时，尝试建立网络连接，slave会建立一个socket套接字，用于接收master发送的复制命令；如slave无法建立连接，定时任务会一直重连到成功或执行slaveof no one取消复制。</li><li>3、<code>发送ping命令</code>：<br>连接成功后slave发送ping请求首次通信，检测MS之间套接字是否可用、是否可接收处理命令；<br>如slave没收到master的pong回复或超时，下次定时任务会重连；</li><li>4、<code>权限验证</code>：<br>如Master设置了requirepass参数，需要密码验证。<br>如验证失败复制将终止，slave重新发起复制流程。</li><li>5、<code>同步数据集</code>：<br>主从连接正常通信后，如首次建立，master会把持有的数据全部发送给slave。（通过rdb或socket的方式）</li><li>6、<code>命令持续复制</code>：<br>当master把数据同步给slave复制流程建立成功后，后面M会持续的把写命令发送给S，保证主从数据一致性。</li></ul><h4 id="两种配置"><a href="#两种配置" class="headerlink" title="两种配置"></a>两种配置</h4><h5 id="1、slaveof命令：异步的操作"><a href="#1、slaveof命令：异步的操作" class="headerlink" title="1、slaveof命令：异步的操作"></a>1、slaveof命令：异步的操作</h5><p>slave上执行命令<code>slaveof MasterHost 6379</code>来异步复制，slave机器重启就会丢失，不建议。<br>取消复制：<code>slaveof no one</code></p><ul><li>取消时slave不会清除已经同步的数据；</li><li>slave配置新的Master时，会清除历史数据；</li></ul><h5 id="2、配置文件"><a href="#2、配置文件" class="headerlink" title="2、配置文件"></a>2、配置文件</h5><p><code>replicaof &lt;masterip&gt; &lt;masterport&gt;</code><br>对Slave机器，替换为对应的主服务器IP和主服务器的端口号。<br>如果主服务器（redis）有设置密码的话，则需要配置密码masterauth <master-password><br>注意：修改需要重启</master-password></p><h4 id="全量-部分复制："><a href="#全量-部分复制：" class="headerlink" title="全量/部分复制："></a>全量/部分复制：</h4><h5 id="涉及知识点"><a href="#涉及知识点" class="headerlink" title="涉及知识点"></a>涉及知识点</h5><ul><li><p>1、<code>runid</code><br>每个Redis服务器都会有一个表明自己身份的ID。<br>在PSYNC中发送的这个ID是指之前连接的Master的ID，如果没保存这个ID，PSYNC的命令会使用<code>PSYNC ? -1</code> 这种形式发送给Master，表示需要全量复制。</p></li><li><p>2、<code>复制偏移量offset：</code><br>通过对比主从节点的复制偏移量，可以判断主从节点数据是否一致。在主从复制的Master和Slave双方都会各自维持一个offset。<br>Master成功发送N个字节的命令后会将Master的offset加上N，Slave在接收到N个字节命令后同样会将Slave的offset增加N。<br>Master和Slave如果状态是一致的那么它的的offset也应该是一致的。</p></li><li><p>3、<code>复制积压缓冲区backlog</code>：<br>当从节点在一段时间内断开连接时，主节点会收集数据到backlog这个缓冲区。<br>因此当一个从节点想要重新连接时，通常不需要完全的重新同步，但是部分的重新同步就足够了，只是通过在断开连接的时候传递数据的一部分。</p><blockquote><p>是由Master维护的一个固定长度的FIFO队列，默认大小为1M。<br>它的作用是缓存已经传播出去的命令。<br>当Master进行命令传播时，不仅将命令发送给所有Slave，还会将命令写入到复制积压缓冲区里面。<br>因此当一个slave想要重新连接时，如runingid与M一致且偏移量与M相差没超过缓冲区大小，通常不需要完全的重新同步，增量同步缓冲区的命令就足够了。</p></blockquote></li><li><p>4、<code>psync命令</code>：<br><img src="https://cdn.jsdelivr.net/gh/bubblewu/cdn/images/redis/psync.png" alt="psync命令复制案例"><br>从节点使用psync命令完成部分复制和全量复制功能。</p></li></ul><p><img src="https://cdn.jsdelivr.net/gh/bubblewu/cdn/images/redis/psync-buzhou.png" alt="psync命令步骤"></p><blockquote><p>PSYNC执行过程中比较重要的概念有3个：runid、offset（复制偏移量）以及复制积压缓冲区。</p><blockquote><ul><li>1、客户端向服务器发送SLAVEOF命令，让当前服务器成为Slave；</li><li>2、 当前服务器根据自己是否保存Master runid来判断是否是第一次复制，如果是第一次同步则跳转到3，否则跳转到4；</li><li>3、 向Master发送PSYNC ? -1 命令来进行完整同步；</li><li>4、 向Master发送PSYNC runid offset；</li><li>5、 Master接收到PSYNC 命令后首先判断runid是否和本机的id一致，如果一致则会再次判断offset偏移量和本机的偏移量相差有没有超过复制积压缓冲区大小，如果没有那么就给Slave发送CONTINUE，此时Slave只需要等待Master传回失去连接期间丢失的命令；</li><li>6、 如果runid和本机id不一致或者双方offset差距超过了复制积压缓冲区大小，<br>那么就会返回FULLRESYNC runid offset，Slave将runid保存起来，并进行完整同步。</li></ul></blockquote></blockquote><h5 id="全量复制"><a href="#全量复制" class="headerlink" title="全量复制"></a>全量复制</h5><p>一般用于初次复制场景，Redis早期支持的复制功能只有全量复制。它会把主节点全部数据一次性发送给从节点。<br>当数据量较大时，会对主从节点和网络造成很大的开销。<br><img src="https://cdn.jsdelivr.net/gh/bubblewu/cdn/images/redis/copy-all.png" alt="全量复制流程"></p><blockquote><ul><li>1、发送psync命令进行数据同步，由于是第一次进行复制，从节点没有复制偏移量和主节点的运行ID，所以发送psync-1；</li><li>2、主节点根据psync-1解析出当前为全量复制，回复+FULLRESYNC响应；</li><li>3、从节点接收主节点的响应数据保存运行ID和偏移量offset；</li><li>4、主节点执行bgsave异步快照命令，保存RDB文件到本地；</li><li>5、主节点发送RDB给从节点，从节点把接收的RDB文件保存在本地并直接作为从节点的数据文件,接收完RDB后从节点打印相关日志；</li><li>6、对于从节点开始接收RDB快照到接收完成期间，主节点仍然响应读写命令。<br>因此主节点会把这期间写命令数据保存在复制客户端缓冲区内，当从节点加载完RDB文件后，主节点再把缓冲区内的数据发送个从节点，保证主从之间数据一致性；<br>全量复制注意：<blockquote><p>如果主节点创建和传输RDB的时间过长，对于高流量写入场景非常容易造成主节点复制客户端缓冲区溢出。<br>client-output-buffer-limit replica 256mb 64mb 60 如果60秒内缓冲区消耗持续大于64MB或者直接超过256MB时，主节点将直接关闭复制客户端连接，造成全量同步失败；<br>对于主节点，当发送完所有的数据后就认为全量复制完成；</p></blockquote></li><li>7、从节点接收完主节点传送来的全部数据后会清空自身旧数据；</li><li>8、从节点清空数据后开始加载RDB文件，对于较大的RDB文件，这一步操作依然比较耗时，可以通过计算日志之间的时间差来判断加载RDB的总耗时；</li><li>9、从节点成功加载完RDB后，如果当前节点开启了AOF持久化功能，它会立刻做bgrewriteaof AOF日志瘦身操作，为了保证全量复制后AOF持久化文件立刻可用。</li></ul></blockquote><p>全量复制比较耗时：</p><ul><li>Master进行bgsave快照持久化时间；</li><li>RDB快照文件网络传输时间；</li><li>Slave清空老数据时间；</li><li>可能存在的AOF重写时间；</li></ul><h5 id="部分复制"><a href="#部分复制" class="headerlink" title="部分复制"></a>部分复制</h5><p>部分复制主要是Redis针对全量复制的过高开销做出的一种优化措施。使用<code>psync {runId}{offset}命令</code>实现。<strong>用于处理在主从复制中因网络闪断等原因造成的数据丢失场景</strong>，<br>当从节点再次连上主节点后，如果条件允许，主节点会补发丢失数据给从节点。因为补发的数据远远小于全量数据，可以有效避免全量复制的过高开销。如复制缓冲区 repl-backlog-xx的配置</p><p><img src="https://cdn.jsdelivr.net/gh/bubblewu/cdn/images/redis/copy-some.png" alt="部分复制流程"><br>流程：</p><blockquote><ul><li>1、当主节点直接网络出现中断时，如果超过repl-timeout时间，主节点会认为从节点故障并中断复制连接；</li><li>2、主从连接中断期间主节点依然响应命令，但因复制连接中断，命令无法发送给从节点，不过主节点内部存在的复制积压缓冲区，依然可以保存最近一段时间的写命令数据，默认最大缓存1MB，可以通过into replication 查看；</li><li>3、当从节点网络恢复后，从节点会再次连上主节点；</li><li>4、当主从连接恢复后，由于从节点之前保存了自身已复制的偏移量和主节点的运行ID。<br>因此会把它们当做psync参数发送个主节点，要求进行部分复制操作；</li><li>5、主节点接到psync命令后首先核对参数runId是否与自身一致，如果一致，说明之前复制的是当前主节点；<br>之后根据参数offset在自身复制积压缓冲区查找，如果偏移量之后的数据存在缓冲区中，则对从节点发送+COUTINUE响应，表示可以进行部分复制；</li><li>6、主节点根据偏移量把复制积压缓冲区里的数据发送给从节点，保证主从复制进入正常状态。</li></ul></blockquote><h4 id="心跳检测"><a href="#心跳检测" class="headerlink" title="心跳检测"></a><code>心跳检测</code></h4><p><strong>主从节点在建立复制后，它们之间维护着长连接并彼此发送心跳命令。</strong></p><p>主从心跳检测机制：</p><ul><li>1、主从节点彼此都有心跳检测机制，各自模拟对方的客户端进行通信，主节点的连接状态为flags=M,从节点连接状态为flags=S</li><li>2、主节点默认每隔10秒对从节点发送ping命令，判断从节点的存活性和连接状态。可以通过repl-ping-replica-period 10 控制发送频率</li><li>3、从节点在主线程中每隔一秒发送replconf ack{offset} 命令，给主节点上报自身当前的复制偏移量。</li><li>主节点根据replconf命令判断从节点超时时间，体现在info replication 统计中的lag信息中，<br>lag表示从节点最后一次通信延迟的秒数，正常延迟应该在0到1之间。</li><li>如果超过repl-timeout配置的值(默认60秒),则判定从节点下线并断开复制客户端连接。即使主节点判定从节点下线后，如果从节点重新恢复，心跳检测和继续执行.</li></ul><h4 id="故障转移"><a href="#故障转移" class="headerlink" title="故障转移"></a><code>故障转移</code></h4><h5 id="Master故障"><a href="#Master故障" class="headerlink" title="Master故障"></a>Master故障</h5><p>假如主从都没数据持久化，此时千万不要立即重启服务，否则可能会造成数据丢失。应该：</p><ul><li>在slave上执行<code>SLAVEOF ON ONE</code>，来断开主从关系并把slave升级为主库；</li><li>此时重新启动主数据库，执行SLAVEOF,把它设置为从库，自动备份数据。</li></ul><h5 id="Slave故障"><a href="#Slave故障" class="headerlink" title="Slave故障"></a>Slave故障</h5><p>如满足业务需求，可以将宕机的slave的连接转移到其他slave。<br>在Redis中从库重新启动后会自动加入到主从架构中，自动完成同步数据；<br>如果从数据库实现了持久化，只要重新假如到主从架构中会实现增量同步。</p><h5 id="自动故障转移？哨兵机制"><a href="#自动故障转移？哨兵机制" class="headerlink" title="自动故障转移？哨兵机制"></a>自动故障转移？哨兵机制</h5><p>Redis提供了<code>sentinel（哨兵）机制通过sentinel模式启动redis后，自动监控master/slave的运行状态</code>。<br>基本原理是：<code>心跳机制+投票裁决</code>。</p><ul><li>每个sentinel会向其它sentinal、master、slave定时发送消息，以确认对方是否“活”着，<br>如果发现对方在指定时间（可配置）内未回应，则暂时认为对方已挂（所谓的“主观认为宕机” Subjective Down，简称SDOWN）。</li><li>若&quot;哨兵群&quot;中的多数sentinel，都报告某一master没响应，系统才认为该master&quot;彻底死亡&quot;(即：客观上的真正down机，Objective Down，简称ODOWN)， 通过一定的vote算法，从剩下的slave节点中，选一台提升为master，然后自动修改相关配置。</li></ul><p><code>sentinel哨兵故障自动转移流程</code>：</p><ul><li>1、通过心跳机制，多个sentinel发现并确认master有问题；</li><li>2、选举出一个sentinel作为领导；</li><li>3、选出一个slave作为新的master；</li><li>4、通知其余slave成为新master的slave；</li><li>5、通知客户端主从发生变化；（客户端连接哨兵即可获取主从的信息）</li><li>6、等待老的master复活成为新master的slave；</li></ul><h4 id="读写分离"><a href="#读写分离" class="headerlink" title="读写分离"></a><code>读写分离</code></h4><p>默认是读写分离的：replica-read-only yes<br>对于读占比较高的场景，可以通过把一部分读流量分摊到slave来减轻master压力，同时需要注意永远只对主节点执行写操作。<br>建议大家在做读写分离之前，可以考虑使用Redis Cluster 等分布式解决方案。</p><h4 id="常见问题"><a href="#常见问题" class="headerlink" title="常见问题"></a>常见问题</h4><h5 id="1、读写分离："><a href="#1、读写分离：" class="headerlink" title="1、读写分离："></a>1、读写分离：</h5><p>默认是读写分离的：replica-read-only yes<br>用于读多写少的场景，将流量分配到Slave节点，减少Master的压力，扩展读的能力。<br>可能问题：</p><ul><li>复制数据延迟，出现读写不一致的情况；</li><li>读到过期数据；<blockquote><p>过期策略：<br>a. 懒惰性策略（操作key时才会看是否过期）<br>b. 定时采样key，看是否过期；<br>因为slave只要读操作不能del处理，要靠master将过期删除的命令发送过来再执行，会造成Slave读到过期数据。</p></blockquote></li><li>从节点发送故障；</li></ul><h5 id="2、主从配置不一致："><a href="#2、主从配置不一致：" class="headerlink" title="2、主从配置不一致："></a>2、主从配置不一致：</h5><p>如：</p><ul><li>maxmemory不一致：会出现丢失数据；</li><li>数据结构优化参数不一致，如hash-max-ziplist-entries：会出现内存不一致问题；</li></ul><h5 id="3、规避全量复制："><a href="#3、规避全量复制：" class="headerlink" title="3、规避全量复制："></a>3、规避全量复制：</h5><p>1、新加slave第一次全量复制不可避免：<br>可以注意：</p><ul><li>小主节点，控制内存；</li><li>低峰时间处理；<br>2、节点runningid不匹配：</li><li>主节点重启，runningid变化；</li><li>故障转移，哨兵或集群；<br>3、复制积压缓冲区不足：</li><li>网络中断，部分复制无法满足；</li><li>增大缓冲区的配置rel_backlog_size；</li></ul><h5 id="4、规避复制风暴："><a href="#4、规避复制风暴：" class="headerlink" title="4、规避复制风暴："></a>4、规避复制风暴：</h5><p>如一主多从，主挂重启，需要生成rdb并复制到从节点；</p><ul><li>单主节点复制风暴：<br>问题：主节点重启，多从节点复制；<br>解决：更换复制拓扑，slave下挂slave。</li><li>单机器复制风暴：<br>机器上节点都是master，机器宕机，会有大量的全量复制；<br>可以主节点分散多机器。</li></ul><h3 id="Sentinel哨兵"><a href="#Sentinel哨兵" class="headerlink" title="Sentinel哨兵"></a>Sentinel哨兵</h3><h4 id="概述-3"><a href="#概述-3" class="headerlink" title="概述"></a>概述</h4><p>因为主从复制的缺陷：<br>1、手动故障转移；<br>2、写能力和存储能力受限；<br>引出哨兵机制：<br><code>Redis的哨兵机制是官方推荐的一种高可用（HA）方案。</code><br>哨兵机制主要三个功能：</p><ul><li>1、监控：<br>不停监控Redis主从节点是否安装预期运行；</li><li>2、提醒：<br>如果Redis运行出现问题可以按照配置文件中的配置项 通知客户端或者集群管理员；</li><li>3、自动故障转移：<br>当主节点下线之后，哨兵可以从主节点的多个从节点中选出一个为主节点，并更新配置文件和其他从节点的主节点信息。</li></ul><h4 id="客户端连接"><a href="#客户端连接" class="headerlink" title="客户端连接"></a>客户端连接</h4><p>步骤：</p><ul><li>1、获取所有的sentinel节点和masterName。<br>遍历sentinel集合找到可用节点；</li><li>2、在找到的可用sentinel节点上，执行命令<code>sentinel get-master-addr-by-name masterName</code>；会获取到master节点真正地址和端口。</li><li>3、获取master节点信息后去role验证真伪；</li><li>4、如redis节点发生了变化，client会感知到。<br>内部基于发布订阅感知：client会订阅sentinel端某个频道，里面有谁是master端信息，有了变化会通知client。</li></ul><h4 id="实现原理"><a href="#实现原理" class="headerlink" title="实现原理"></a>实现原理</h4><h5 id="客户端高可用案例：（故障转移）"><a href="#客户端高可用案例：（故障转移）" class="headerlink" title="客户端高可用案例：（故障转移）"></a>客户端高可用案例：（故障转移）</h5><p><img src="https://cdn.jsdelivr.net/gh/bubblewu/cdn/images/redis/sentinel-failover.png" alt="客户端Sentinel高可用案例"></p><p>Redis Sentinel Failover故障选举测试：死循环对redis哨兵主从进行读写<br>故障转移恢复案例：</p><ul><li>执行该死循环程序；</li><li>将其中的7000节点进行强制宕机；这时程序会大量的报错：Connection refused。</li><li>过了n秒后，sentinel自动进行完故障转移后，程序就会正常执行打印；</li></ul><h5 id="服务端日志分析：数据节点和sentinel节点"><a href="#服务端日志分析：数据节点和sentinel节点" class="headerlink" title="服务端日志分析：数据节点和sentinel节点"></a>服务端日志分析：数据节点和sentinel节点</h5><p>日志中故障转移大致流程：</p><ul><li>1、发现master不可用，进入主观不可用(SDOWN)；</li><li>2、进行投票，如达到了quorum（配置文件指定），进入客观不可用(ODOWN)</li><li>3、当前配置版本被更新；</li><li>4、达到failover条件，正等待其他sentinel的选举：<br>开始要选择一个slave当选新master；<br>找到了一个适合的slave来担当新master；<br>当把选择为新master的slave的身份进行切换；</li><li>5、Failover状态变为reconf-slaves</li><li>6、sentinel发送SLAVEOF命令把它重新配置，重新配置到新主；将其他slave配置到新master；</li><li>7、新的master对新的slave进行数据复制同步；</li><li>8、老的master离开客观不可用（ODOWN），failover成功完成。</li><li>9、master地址发生改变，变为新的master</li><li>10、检测slave并添加到slave列表。</li></ul><h5 id="三个定时任务："><a href="#三个定时任务：" class="headerlink" title="三个定时任务："></a>三个定时任务：</h5><ul><li>1、<strong>每10秒每个sentinel会对master和slave进行info操作</strong>：<br>作用就是发现slave节点，并且确认主从关系，<br>因为redis-Sentinel节点启动的时候是知道 master节点的，只是没有配置相应的slave节点的信息</li><li>2、<strong>每隔2秒，sentinel都会通过master节点内部的channel来交换信息（pub/sub订阅模式）：</strong><br>作用是通过master节点的频道来交互每个Sentinel对master节点的判断信息</li><li>3、<strong>每隔一秒每个sentinel对其他的redis节点（master，slave，sentinel）执行ping操作</strong>：<br>对于master来说若超过30s没回复，就对该master进行主观下线并询问其他的Sentinel节点是否可以客观下线。<br>心跳检测的过程，用来判断上下线的依据。</li></ul><blockquote><p>主观下线和客观下线：</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sentinel monitor mymaster 127.0.0.1 6379 2</span><br><span class="line">#主节点名称 IP 端口号 选举次数</span><br></pre></td></tr></table></figure><blockquote><ul><li>主观下线：每个Sentinel节点对Redis节点失败的“偏见”。</li><li>客观下线：所有Sentinel节点对Redis节点失败达成共识。</li></ul></blockquote><h5 id="Sentinel节点领导者选举："><a href="#Sentinel节点领导者选举：" class="headerlink" title="Sentinel节点领导者选举："></a><code>Sentinel节点领导者选举</code>：</h5><p>因为：只有一个sentinel节点完成故障转移即可。</p><h6 id="选举："><a href="#选举：" class="headerlink" title="选举："></a>选举：</h6><p>通过<code>sentinel is-master-down-by-addr</code>命令都有希望成为leader。</p><blockquote><p>该命令的作用：<br>a.交换master节点的失败判定；<br>b.进行领导者选举。</p></blockquote><ul><li>1、每个做主观下线的sentinel节点向其他sentinel节点发命令，要求它设为领导者；</li><li>2、收到命令的sentinel节点如目前还没同意通过其他sentinel节点发的命令，就会同意当前请求，否则拒绝；</li><li>3、如该sentinel节点的票数超过sentinel集合半数且超过指定的quorum，它就成为领导者；</li><li>4、如果有多个sentinel节点成为了领导者，就会等一段时间继续重新选举。</li></ul><h6 id="故障转移：（sentinel领导者完成）"><a href="#故障转移：（sentinel领导者完成）" class="headerlink" title="故障转移：（sentinel领导者完成）"></a>故障转移：（sentinel领导者完成）</h6><ul><li>1、从slave节点选择一个合适的节点作为新的master；</li><li>2、对上面的slave节点执行slaveof on one命令，让它成为master；</li><li>3、向剩余的slave节点发送slaveof命令，让它们成为新master的slave；</li><li>4、进行新主从数据的复制同步；</li><li>5、更新老的master为slave，并一直关注它，当重启生效后就去复制新的master节点的数据。</li></ul><blockquote><p><code>如何选择合适的slave节点作为新的master？</code></p><ul><li>1、选择slave-priority优先级最高的slave节点，如存在返回，否则继续；</li><li>2、选择复制偏移量最大的slave节点（数据最完整，类似zookeeper），如存在返回，否则继续；</li><li>3、选择runningid最小的slave节点（也就是最早启动的节点）；</li></ul></blockquote><h5 id="注意-1"><a href="#注意-1" class="headerlink" title="注意"></a>注意</h5><ul><li>1、sentinel集群节点大于等于3且为奇数</li><li>2、redis的sentinel是配置中心不是代理，其中的数据节点和普通数据节点没区别。<br>客户端初始化连接的是sentinel节点集合，不是具体的redis节点；<br>它通过3个定时任务实现了sentinel节点对于master和slave和其余sentinel节点的监控；</li></ul><h3 id="Cluster集群"><a href="#Cluster集群" class="headerlink" title="Cluster集群"></a>Cluster集群</h3><h4 id="为什么需要集群？"><a href="#为什么需要集群？" class="headerlink" title="为什么需要集群？"></a>为什么需要集群？</h4><ul><li>并发问题：redis最高的ops并发量为10w，如果业务需要ops为100万就无法解决；</li><li>数据量问题：单机的内存太小，无法满足需求；</li></ul><h4 id="集群架构"><a href="#集群架构" class="headerlink" title="集群架构"></a>集群架构</h4><ul><li>单机架构（主从模式也是单主机架构）</li><li>分布式架构：<br>服务端多个节点，每个节点都可读写，节点间都是可以通信的，节点间互相了解各自对应的槽。<br>client访问任意节点，读key时，如在该节点会直接返回，否则返回key真实的槽所在的节点信息，在做对应跳转获取；</li></ul><h4 id="数据分布："><a href="#数据分布：" class="headerlink" title="数据分布："></a>数据分布：</h4><p><img src="https://cdn.jsdelivr.net/gh/bubblewu/cdn/images/redis/cluster-data.png" alt="数据分布"></p><p>两种分区方式：<br><img src="https://cdn.jsdelivr.net/gh/bubblewu/cdn/images/redis/compare.png" alt="两种分区方式比较"></p><h5 id="顺序分布："><a href="#顺序分布：" class="headerlink" title="顺序分布："></a><code>顺序分布</code>：</h5><p><img src="https://cdn.jsdelivr.net/gh/bubblewu/cdn/images/redis/cluster-shunxu.png" alt="顺序分布"><br>（上图3个节点，平均每个节点33个数据）<br>顺序分区的数据量不可确定性会导致倾斜，支持顺序访问，但不支持批量操作。</p><h5 id="哈希分布："><a href="#哈希分布：" class="headerlink" title="哈希分布："></a><code>哈希分布</code>：</h5><p><img src="https://cdn.jsdelivr.net/gh/bubblewu/cdn/images/redis/cluster-hash.png" alt="哈希分布"></p><p>节点取余分区 hash(key)%nodes<br>数据分散度高，无法顺序访问，支持批量操作；</p><h6 id="1、节点取余分区：hash-key-nodes"><a href="#1、节点取余分区：hash-key-nodes" class="headerlink" title="1、节点取余分区：hash(key)%nodes"></a>1、节点取余分区：hash(key)%nodes</h6><p><img src="https://cdn.jsdelivr.net/gh/bubblewu/cdn/images/redis/hash-01.png" alt="节点取余分区"></p><ul><li>会有节点伸缩：数据节点关系变化，导致数据迁移；</li><li>迁移数量和添加节点的数量有关，建议翻倍扩容，迁移数据量会比较小。<br>如3个节点变为6个节点，这样数据迁移量在50%左右；</li></ul><p><img src="https://cdn.jsdelivr.net/gh/bubblewu/cdn/images/redis/hash-011.png" alt="节点取余分区"><br>如对节点进行扩容时：如3个节点变为4个节点。<br>问题：</p><ul><li>如果要增加分区，数据迁移量在80%左右；</li><li>数据迁移第一次是无法从缓存中取到的，数据库需要回写到新节点；</li></ul><h6 id="2、一致性哈希分区：哈希-顺时针（优化取余）"><a href="#2、一致性哈希分区：哈希-顺时针（优化取余）" class="headerlink" title="2、一致性哈希分区：哈希 + 顺时针（优化取余）"></a>2、一致性哈希分区：哈希 + 顺时针（优化取余）</h6><p><img src="https://cdn.jsdelivr.net/gh/bubblewu/cdn/images/redis/hash-02.png" alt="一致性哈希分区"><br>将数据作为一个0～2^ 32大小的token环中，有4个node，为每个node分配一个token，每个node负责范围内的数据；<br>如某key进行hash计算落在node3和4范围内，它会顺时针找离自己最近的node，即node3。</p><ul><li>节点伸缩：只影响邻近节点，但是还是有数据迁移；</li><li>翻倍伸缩：保证最小迁移数据和负载均衡；</li><li>多用在节点非常多的时候。</li></ul><p><img src="https://cdn.jsdelivr.net/gh/bubblewu/cdn/images/redis/hash-021.png" alt="一致性哈希分区"><br>节点扩容的情况：<br>如上图，添加节点node5，会进行数据的漂移，但不会影响node3和4。尤其节点非常多的时候效率提高太多；</p><h6 id="3、虚拟槽分区：（共享消息模式，集群默认）"><a href="#3、虚拟槽分区：（共享消息模式，集群默认）" class="headerlink" title="3、虚拟槽分区：（共享消息模式，集群默认）"></a>3、<code>虚拟槽分区：（共享消息模式，集群默认）</code></h6><p><img src="https://cdn.jsdelivr.net/gh/bubblewu/cdn/images/redis/slot.png" alt="虚拟槽分区"></p><ul><li>预设虚拟槽（redis cluster范围0-16383）：每个槽映射一个数据子集，一般比节点数大；</li><li>良好的哈希函数：例如CRC16；</li><li>服务端管理节点、槽、数据：例如Redis Cluster；</li></ul><p>假如有10w数据，有16384个槽，5个节点，对槽进行分配，对key按照一定的hash规则计算后，再对16383进行取余，会把取余对结果发生给cluster中的任意一个节点，而每个节点都知道自己负责的槽，如落在自己槽的范围内，就由它管理。如不在该槽，因为节点间会共享消息，所以就会知道该key对应的真实的槽。</p><h4 id="集群伸缩"><a href="#集群伸缩" class="headerlink" title="集群伸缩"></a>集群伸缩</h4><h5 id="伸缩原理"><a href="#伸缩原理" class="headerlink" title="伸缩原理"></a>伸缩原理</h5><p><img src="https://cdn.jsdelivr.net/gh/bubblewu/cdn/images/redis/cluster-shensuo.png" alt="集群伸缩"></p><p>集群伸缩 = Slot槽和数据在节点之间的移动。</p><h5 id="集群扩容：增加新节点"><a href="#集群扩容：增加新节点" class="headerlink" title="集群扩容：增加新节点"></a>集群扩容：增加新节点</h5><ul><li><p>1、<code>准备新节点</code>：<br>集群模式下，配置和其他节点统一，目前启动后仍是孤儿节点；</p></li><li><p>2、<code>加入集群</code>：<br>作用：为它迁移槽和数据实现扩容；作为slave节点负责故障转移；<br><img src="https://cdn.jsdelivr.net/gh/bubblewu/cdn/images/redis/cluster-add.png" alt="加入集群"></p></li><li><p>3、<code>迁移槽和数据</code>：<br><img src="https://cdn.jsdelivr.net/gh/bubblewu/cdn/images/redis/cluster-add02.png" alt="迁移槽和数据"></p><blockquote><p>迁移数据过程：</p><blockquote><ul><li>对目标节点发送：cluster setslot {slot) importing {sourceNodeld)命令，让目标节点准备导入槽的数据。</li><li>对源节点发送：cluster setslot {slot) migrating {targetNodeld)命令，让源节点准备迁出槽的数据。</li><li>源节点循环执行cluster getkeysinslot {slot) {count)命令，每次获取count个属于槽的健。</li><li>在源节点上执行migrate {targetlp} {targetPort} key 0 {timeout}命令把指定key迁移。</li><li>重复执行步骤3~4直到槽下所有的键数据迁移到目标节点。</li><li>向集群内所有主节点发送cluster setslot {slot）node {targetNodeld)命令，通知槽分配给目标节点。</li></ul></blockquote></blockquote></li></ul><h5 id="集群缩容：下线节点和槽"><a href="#集群缩容：下线节点和槽" class="headerlink" title="集群缩容：下线节点和槽"></a>集群缩容：下线节点和槽</h5><p><img src="https://cdn.jsdelivr.net/gh/bubblewu/cdn/images/redis/cluster-down.png" alt="下线节点和槽"></p><h4 id="客户端路由：（实际开发会遇到的问题）"><a href="#客户端路由：（实际开发会遇到的问题）" class="headerlink" title="客户端路由：（实际开发会遇到的问题）"></a>客户端路由：（实际开发会遇到的问题）</h4><h5 id="moved重定向"><a href="#moved重定向" class="headerlink" title="moved重定向"></a>moved重定向</h5><p><img src="https://cdn.jsdelivr.net/gh/bubblewu/cdn/images/redis/cluster-moved.png" alt="moved重定向"><br>client接收到moved异常后，会拿到正确的目标节点需自己去执行；</p><blockquote><p>注意：client不会自动找到目标节点进行跳转，需要二次写的逻辑进行功能开发；</p></blockquote><p><img src="https://cdn.jsdelivr.net/gh/bubblewu/cdn/images/redis/cluster-moved-get.png" alt="moved重定向"><br>槽命中，直接返回（可查看key的slot）</p><p><img src="https://cdn.jsdelivr.net/gh/bubblewu/cdn/images/redis/cluster-moved-get-error.png" alt="moved重定向"><br>槽未命中：返回moved异常：<br>客户端不会自己找到异常节点，需要自己写逻辑；</p><p><img src="https://cdn.jsdelivr.net/gh/bubblewu/cdn/images/redis/cluster-moved-compare.png" alt="集群和非集群环境对比"><br>集群和非集群环境下：<br>集群环境下会自动完成：捕获moved异常和重新写的操作；</p><h5 id="ask重定向"><a href="#ask重定向" class="headerlink" title="ask重定向"></a>ask重定向</h5><p>在进行集群伸缩时，会出现数据slot迁移，出现ask重定向。<br><img src="https://cdn.jsdelivr.net/gh/bubblewu/cdn/images/redis/cluster-ask.png" alt="cluster-ask"><br>ask是槽还在迁移中；<br>moved是槽已经完成了迁移；</p><h5 id="smart（智能）客户端：JedisCluster、追求性能"><a href="#smart（智能）客户端：JedisCluster、追求性能" class="headerlink" title="smart（智能）客户端：JedisCluster、追求性能"></a>smart（智能）客户端：JedisCluster、追求性能</h5><p><img src="https://cdn.jsdelivr.net/gh/bubblewu/cdn/images/redis/cluster-smart.png" alt="JedisCluster工作原理"></p><p>工作原理：（具体可看源码:redis.clients.jedis.JedisClusterCommand#runWithRetries）</p><ul><li>1.从集群中选一个可运行节点，使用cluster slots初始化槽和节点映射。</li><li>2.将cluster slots的结果映射到本地，为每个节点创建JedisPool。</li><li>3.准备执行命令。</li></ul><h4 id="集群原理"><a href="#集群原理" class="headerlink" title="集群原理"></a><code>集群原理</code></h4><h5 id="批量操作"><a href="#批量操作" class="headerlink" title="批量操作"></a>批量操作</h5><p><img src="https://cdn.jsdelivr.net/gh/bubblewu/cdn/images/redis/cluster-mget.png" alt="四种批量操作"></p><p>四种批量操作实现优化（mget,mset必须在一个槽）</p><ul><li><code>串行mget</code>：相当于for循环遍历keys去对应的集群节点get值，最后将结果汇总；简单效率低，需要n次的网络时间；</li><li><code>串行IO</code>：对串行mget优化，在client本地做內聚合将key的槽计算出，对key根据节点分组，之后通过几次pipeline操作即可；只需要节点个数次网络时间；</li><li><code>并行IO</code>：对串行IO优化，使用多线程，只需1次网络时间；</li><li><code>hash_tag</code>：将key进行hash_tag包装，使所有key都在一个节点，只需要1次网络时间即可；</li></ul><p><img src="https://cdn.jsdelivr.net/gh/bubblewu/cdn/images/redis/cluster-mget-compare.png" alt="四种批量操作对比"></p><h5 id="故障转移-1"><a href="#故障转移-1" class="headerlink" title="故障转移"></a>故障转移</h5><p><strong>Redis Sentinel的故障转移依赖外部节点sentinel来实现</strong>；<br>而<strong>Redis Cluster自身实现了高可用，当前节点出了问题其他节点会监控得知，实现故障转移</strong>；</p><h6 id="故障发现："><a href="#故障发现：" class="headerlink" title="故障发现："></a>故障发现：</h6><p>通过节点间的ping/pong消息实现，不需要sentinel。</p><ul><li>主观下线：<br>某个节点认为另一个节点不可用。</li></ul><p><img src="https://cdn.jsdelivr.net/gh/bubblewu/cdn/images/redis/cluster-down-zhuguan.png" alt="主观下线流程"></p><ul><li>客观下线：<br>客观下线：半数以上持有槽点主节点标记某节点主观下线。</li></ul><p><img src="https://cdn.jsdelivr.net/gh/bubblewu/cdn/images/redis/cluster-down-keguan.png" alt="客观下线流程"></p><h6 id="故障恢复："><a href="#故障恢复：" class="headerlink" title="故障恢复："></a>故障恢复：</h6><ul><li><p>资格检查：<br><img src="https://cdn.jsdelivr.net/gh/bubblewu/cdn/images/redis/c1.png" alt="资格检查"></p></li><li><p>准备选举时间：<br>保证偏移量大的slave有更小的延迟达到选举时间，保证数据一致性更高。<br><img src="https://cdn.jsdelivr.net/gh/bubblewu/cdn/images/redis/c2.png" alt="准备选举时间"></p></li><li><p>选举投票：<br><img src="https://cdn.jsdelivr.net/gh/bubblewu/cdn/images/redis/c3.png" alt="选举投票"></p></li><li><p>替换主节点：<br><img src="https://cdn.jsdelivr.net/gh/bubblewu/cdn/images/redis/c4.png" alt="替换主节点"></p></li></ul><h4 id="常见问题-1"><a href="#常见问题-1" class="headerlink" title="常见问题"></a>常见问题</h4><h5 id="集群完整性"><a href="#集群完整性" class="headerlink" title="集群完整性"></a>集群完整性</h5><p><code>cluster-require-full-coverage</code>默认为yes<br>表示是否需要所有集群节点都是在线的状态，所有的16384个槽是全部可用的，才会认为集群是完整的，才可以对外提供服务。<br>注意：如为yes</p><ul><li>节点故障或者正在故障转移时会有：(error)CLUSTERDOWN The cluster is down</li><li>大多数业务无法容忍，cluster-require-full-coverage建议设置为no</li></ul><h5 id="宽带消耗"><a href="#宽带消耗" class="headerlink" title="宽带消耗"></a>宽带消耗</h5><ul><li>官方建议节点不超过1000个，因为节点间进行ping/pong操作，过多会带来比较大的带宽消耗；</li></ul><p>优化：</p><ul><li>避免“大”集群：避免多业务使用一个集群，大业务可以多集群。</li><li>cluster-node-timeout：带宽和故障转移速度的均衡。</li><li>尽量均匀分配到多机器上：保证高可用和带宽</li></ul><h5 id="Pub-Sub广播模式的局限性："><a href="#Pub-Sub广播模式的局限性：" class="headerlink" title="Pub/Sub广播模式的局限性："></a>Pub/Sub广播模式的局限性：</h5><p>问题：发布一条消息，每个节点都会接收到，加重带宽消耗。<br>解决：单独“走”一套Redis Sentinel。</p><h5 id="集群倾斜问题："><a href="#集群倾斜问题：" class="headerlink" title="集群倾斜问题："></a>集群倾斜问题：</h5><p>数据倾斜和请求倾斜。</p><ul><li><p>数据倾斜：内存不均。<br>4种原因：</p></li><li><p>节点和槽分配不均；</p></li><li><p>不同槽对应键值数量差异较大；</p></li><li><p>包含bigkey；</p></li><li><p>内存相关配置不一致；</p></li><li><p>请求倾斜：热点数据（缓存常见问题）</p></li></ul><h5 id="集群的读写分离："><a href="#集群的读写分离：" class="headerlink" title="集群的读写分离："></a>集群的读写分离：</h5><p><img src="https://cdn.jsdelivr.net/gh/bubblewu/cdn/images/redis/cluster-read-write.png" alt="集群的读写分离"><br>只读连接：<code>集群模式下从节点不接受任何读写请求</code>。<br>如进行了读操作：会重定向到负责槽点主节点；<br>使用readonly命令可以读，是一个连接级别的命令。<br>上图7000为Master，7003为它的Salve。</p><p>集群的读写分离更复杂：</p><ul><li>同样的问题：复制延迟、读取过期数据、从节点故障</li><li>修改客户端：cluster slaves {nodeld)</li></ul><h5 id="集群VS单机（sentinel-主从-单点）："><a href="#集群VS单机（sentinel-主从-单点）：" class="headerlink" title="集群VS单机（sentinel/主从/单点）："></a>集群VS单机（sentinel/主从/单点）：</h5><ul><li><p>针对集群<br><img src="https://cdn.jsdelivr.net/gh/bubblewu/cdn/images/redis/cc1.png" alt="针对集群"></p></li><li><p>分布式集群redis不一定好。大部分场景下<code>Redis Sentinel</code>就足够了。<br><img src="https://cdn.jsdelivr.net/gh/bubblewu/cdn/images/redis/cc2.png" alt="集群"></p></li></ul><h4 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h4><ul><li><p>Redis Cluster数据分区规则采用<code>虚拟槽方式</code>（16384个槽），每个节点负责一部分槽和相关数据，实现数据和请求的负载均衡。</p></li><li><p>搭建集群包括四个步骤：准备节点、节点握手、分配槽、复制。</p></li><li><p>集群伸缩通过在节点之间移动槽和相关数据实现。<br>扩容时：根据槽迁移计划，把槽从源节点迁移到新节点；<br>缩容时：如果下线的节点有负责的槽，就需要迁移到其他节点上，再通过<code>cluster forget</code>命令让集群内所有节点忘记并下线该节点。</p></li><li><p>使用smart客户端操作集群打到通信效率最大化，客户端内部负责计算维护<code>键-&gt;槽-&gt;节点的映射</code>，用于快速定位到目标节点。</p></li><li><p>集群自动故障转移过程包括：<code>故障发现</code>和<code>节点恢复</code>。<br>节点下线包括主观下线和客观下线，当超过半数主节点认为故障节点为主观下线时，标记它为客观下线状态。<br>从节点负责对客观下线的主节点触发故障恢复流程，保证集群的可用性。</p></li></ul><h2 id="经典案例"><a href="#经典案例" class="headerlink" title="经典案例"></a>经典案例</h2><h3 id="Redis缓存"><a href="#Redis缓存" class="headerlink" title="Redis缓存"></a>Redis缓存</h3><h4 id="缓存的收益和成本？"><a href="#缓存的收益和成本？" class="headerlink" title="缓存的收益和成本？"></a>缓存的收益和成本？</h4><p>收益：</p><ul><li>1、加速读写速度：</li><li>2、降低后端负载：<br>后端服务器通过前端缓存降低负载：业务端使用Redis降低后端MySQL负载等</li></ul><p>成本：</p><ul><li>1、数据不一致：<br>缓存层和数据层有时间窗口不一致，和更新策略有关；</li><li>2、代码维护成本：<br>要多加一层缓存逻辑；</li><li>3、运维成本：<br>如Redis Cluster维护；</li></ul><h4 id="缓存更新策略："><a href="#缓存更新策略：" class="headerlink" title="缓存更新策略："></a>缓存更新策略：</h4><h5 id="常见策略"><a href="#常见策略" class="headerlink" title="常见策略"></a>常见策略</h5><h6 id="三种缓存算法：（FIFO-LRU-LFU）"><a href="#三种缓存算法：（FIFO-LRU-LFU）" class="headerlink" title="三种缓存算法：（FIFO/LRU/LFU）"></a>三种缓存算法：（FIFO/LRU/LFU）</h6><ul><li><p><code>FIFO算法</code>：<br>先进先出（FIFO，队列）。<br>即<strong>如果一个数据是最先进入的，那么可以认为在将来它被访问的可能性很小</strong>。空间满的时候，最先进入的数据会被最早置换（淘汰）掉。</p></li><li><p><code>LRU算法</code>：<br>LRU是Least Recently Used的缩写，即最近最少使用，是一种常用的页面置换算法，如果空间不足淘汰掉最近最少使用的数据。。<br>思想是：<strong>如果一个数据在最近一段时间没有被访问到，那么可以认为在将来它被访问的可能性也很小</strong>。因此，当空间满时，最久没有访问的数据最先被置换（淘汰）。<br>实现可参考：<br><a href="https://app.yinxiang.com/fx/1a3d5672-d79e-42e1-8b27-9ef66bf82548" target="_blank" rel="external nofollow noopener noreferrer">LRU算法实现测试</a></p></li><li><p><code>LFU算法</code>：<br>LFU（Least Frequently Used ，最近最不常用算法），也就是<strong>淘汰一定时期内被访问次数最少的数据</strong>。<br>LFU 算法本质上可以看做是一个 top K 问题(K = 1)，即选出频率最小的元素。<br>因此可以用二项堆来选择频率最小的元素，这样的实现比较高效。最终实现策略为小顶堆+哈希表。</p></li></ul><h6 id="超时剔除："><a href="#超时剔除：" class="headerlink" title="超时剔除："></a>超时剔除：</h6><p>时间过期时间</p><h6 id="主动更新："><a href="#主动更新：" class="headerlink" title="主动更新："></a>主动更新：</h6><p>开发来控制缓存的生命周期；</p><h5 id="redis的内存驱逐策略："><a href="#redis的内存驱逐策略：" class="headerlink" title="redis的内存驱逐策略："></a>redis的内存驱逐策略：</h5><p>配置参数：<code>maxmemory-policy noeviction</code><br>驱逐策略：内存容量超过maxmemory后的处理策略。</p><ul><li><p><code>volatile-lru</code>：利用LRU算法移除设置过过期时间的key。</p><blockquote><p>LRU是Least Recently Used的缩写，即最近最少使用，是一种常用的页面置换算法，选择最近最久未使用的页面予以淘汰。</p></blockquote></li><li><p><code>volatile-random</code>：随机移除设置过过期时间的key。</p></li><li><p><code>volatile-ttl</code>：移除即将过期的key，根据最近过期时间来删除（辅以TTL）</p></li><li><p><code>allkeys-lru</code>：利用LRU算法移除任何key。</p></li><li><p><code>allkeys-random</code>：随机移除任何key。</p></li><li><p><code>noeviction</code>：不移除任何key，只是返回一个写错误。</p></li><li><p><code>volatile-lfu</code>：从已经设置过期时间的数据中，挑选最不经常使用的数据淘汰。</p></li><li><p><code>allkeys-lfu</code>：当内存不足以容纳新写入数据时，在键空间中，移除最不经常使用的key。</p></li></ul><h5 id="一致性问题"><a href="#一致性问题" class="headerlink" title="一致性问题"></a>一致性问题</h5><ul><li>低一致性：最大内存和淘汰策略</li><li>高一致性：超时剔除和主动更新结合，最大内存和淘汰策略兜底。</li></ul><h4 id="常见缓存问题："><a href="#常见缓存问题：" class="headerlink" title="常见缓存问题："></a>常见缓存问题：</h4><h5 id="缓存穿透"><a href="#缓存穿透" class="headerlink" title="缓存穿透"></a>缓存穿透</h5><p>缓存穿透，即<strong>大量缓存中不存在的请求key访问直接落到数据库，一般是恶意攻击；</strong></p><ul><li>解决方案：<br>有很多种方法可以有效地解决缓存穿透问题，最常见的则是采用<code>布隆过滤器</code>。<blockquote><p>将所有可能存在的数据哈希到一个足够大的bitmap中，一个一定不存在的数据会被这个bitmap拦截掉，从而避免了对底层存储系统的查询压力。</p></blockquote>另外也有一个更为简单粗暴的方法：如果一个查询返回的数据为空（不管是数据不存在，还是系统故障），我们仍然<code>把这个空结果进行缓存</code>，但它的过期时间会很短，最长不超过五分钟。</li></ul><h5 id="缓存击穿"><a href="#缓存击穿" class="headerlink" title="缓存击穿"></a>缓存击穿</h5><p>缓存击穿，<strong>指一个key非常热点，在不停的扛着大并发，大并发集中对这一个点进行访问，当这个key在失效的瞬间，持续的大并发就穿破缓存，直接请求数据库，就像在一个屏障上凿开了一个洞</strong>。<br><code>这个和缓存雪崩的区别在于这里针对某一key缓存，前者则是很多key</code>。</p><ul><li>解决方案：<br><code>添加互斥锁</code>：<br>结合上面的击穿的情况，在第一个请求去查询数据库的时候对他加一个互斥锁，其余的查询请求都会被阻塞住，直到锁被释放，从而保护数据库。<br>但是也是由于它会阻塞其他的线程，此时系统吞吐量会下降。需要结合实际的业务去考虑是否要这么做。</li></ul><h5 id="缓存雪崩"><a href="#缓存雪崩" class="headerlink" title="缓存雪崩"></a>缓存雪崩</h5><p>缓存雪崩，是<strong>指在某一个时间段，缓存集中过期失效</strong>。</p><p>如：redis服务器挂掉导致请求大量涌至数据库；</p><blockquote><p>而缓存服务节点的宕机，对数据库服务器造成的压力是不可预知的，很有可能瞬间就把数据库压垮。</p></blockquote><p>案例：<br>比如双十二活动，马上就要到双十二零点，很快就会迎来一波抢购，这波商品时间比较集中的放入了缓存，假设缓存一个小时。那么到了凌晨一点钟的时候，这批商品的缓存就都过期了。而对这批商品的访问查询，都落到了数据库上，对于数据库而言，就会产生周期性的压力波峰。</p><blockquote><p>一般采取<strong>不同分类商品，缓存不同周期</strong>。<strong>在同一分类中的商品，加上一个随机因子</strong>。<br>这样能尽可能分散缓存过期时间，而且，热门类目的商品缓存时间长一些，冷门类目的商品缓存时间短一些，也能节省缓存服务的资源。</p></blockquote><h6 id="解决方案："><a href="#解决方案：" class="headerlink" title="解决方案："></a>解决方案：</h6><ul><li><p>事前：<br><code>使用集群缓存，保证缓存服务的高可用</code>。</p><blockquote><p>这种方案就是在发生雪崩前对缓存集群实现高可用，<br>如果是使用 Redis，可以使用 主从+哨兵 ，Redis Cluster 来避免 Redis 全盘崩溃的情况。</p></blockquote></li><li><p>事中：<br><code>加本地缓存 + Hystrix限流&amp;降级</code>，避免MySQL被hit死。</p><blockquote><ul><li>使用本地缓存的目的也是考虑在Redis Cluster 完全不可用的时候，本地缓存还能够支撑一阵。</li><li>使用 Hystrix进行限流 &amp; 降级 ，比如一秒来了5000个请求，我们可以设置假设只能有一秒 2000个请求能通过这个组件，那么其他剩余的 3000 请求就会走限流逻辑。</li><li>然后去调用我们自己开发的降级组件（降级），比如设置的一些默认值之类的。以此来保护最后的 MySQL 不会被大量的请求给打死。</li></ul></blockquote></li><li><p>事后：<br><code>开启Redis持久化机制，尽快恢复缓存集群</code>。一旦重启，就能从磁盘上自动加载数据恢复内存中的数据。</p></li></ul><h3 id="Redis实现分布式锁"><a href="#Redis实现分布式锁" class="headerlink" title="Redis实现分布式锁"></a>Redis实现分布式锁</h3><p>分布式锁一般有三种实现方式：</p><ul><li><ol><li>数据库乐观锁；</li></ol></li><li><ol start="2"><li>基于Redis的分布式锁；</li></ol></li><li><ol start="3"><li>基于ZooKeeper的分布式锁。</li></ol></li></ul><p>确保分布式锁可用，我们至少要确保锁的实现<strong>同时满足以下四个条件</strong>：</p><ul><li><code>互斥性</code>。<br>在任意时刻，只有一个客户端能持有锁。</li><li><code>不会发生死锁</code>。<br>即使有一个客户端在持有锁的期间崩溃而没有主动解锁，也能保证后续其他客户端能加锁。</li><li><code>具有容错性</code>。<br>只要大部分的Redis节点正常运行，客户端就可以加锁和解锁。</li><li><code>解铃还须系铃人</code>。<br>加锁和解锁必须是同一个客户端，客户端自己不能把别人加的锁给解了。</li></ul><h4 id="加锁"><a href="#加锁" class="headerlink" title="加锁"></a>加锁</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String LOCK_SUCCESS = <span class="string">"OK"</span>;</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String SET_IF_NOT_EXIST = <span class="string">"NX"</span>;</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String SET_WITH_EXPIRE_TIME = <span class="string">"PX"</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 尝试获取分布式锁</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> jedis  Redis客户端</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> lockKey  锁</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> requestId  请求标识</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> expireTime  超期时间</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span>  是否获取成功</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">boolean</span> <span class="title">tryLock</span><span class="params">(Jedis jedis, String lockKey, String requestId, <span class="keyword">int</span> expireTime)</span> </span>&#123;</span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">     * 执行下面的set()方法就只会导致两种结果：</span></span><br><span class="line"><span class="comment">     * 1. 当前没有锁（key不存在），那么就进行加锁操作，并对锁设置个有效期，同时value表示加锁的客户端。</span></span><br><span class="line"><span class="comment">     * 2. 已有锁存在，不做任何操作。</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * 参数：</span></span><br><span class="line"><span class="comment">     * - 第一个为key，我们使用key来当锁，因为key是唯一的。</span></span><br><span class="line"><span class="comment">     * - 第二个为value，我们传的是requestId，因为分布式锁要满足第四个条件解铃还须系铃人，</span></span><br><span class="line"><span class="comment">     *   通过给value赋值为requestId，我们就知道这把锁是哪个请求加的了，在解锁的时候就可以有依据。</span></span><br><span class="line"><span class="comment">     *   requestId可以使用UUID.randomUUID().toString()方法生成。</span></span><br><span class="line"><span class="comment">     * - 第三个为nxxx，这个参数我们填的是NX，意思是SET IF NOT EXIST，</span></span><br><span class="line"><span class="comment">     *   即当key不存在时，我们进行set操作；若key已经存在，则不做任何操作；</span></span><br><span class="line"><span class="comment">     * - 第四个为expx，这个参数我们传的是PX，意思是我们要给这个key加一个过期的设置，具体时间由第五个参数决定。</span></span><br><span class="line"><span class="comment">     * - 第五个为time，与第四个参数相呼应，代表key的过期时间。</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    String result = jedis.set(lockKey, requestId, SET_IF_NOT_EXIST, SET_WITH_EXPIRE_TIME, expireTime);</span><br><span class="line">    <span class="keyword">return</span> LOCK_SUCCESS.equals(result);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>加锁代码满足我们可靠性里描述的三个条件。</p><ul><li>首先，set()加入了NX参数，可以保证如果已有key存在，则函数不会调用成功，也就是只有一个客户端能持有锁，满足<code>互斥性</code>。</li><li>其次，由于我们对锁设置了过期时间，即使锁的持有者后续发生崩溃而没有解锁，锁也会因为到了过期时间而自动解锁（即key被删除），<code>不会发生死锁</code>。</li><li>最后，因为我们将value赋值为requestId，代表加锁的客户端请求标识，那么在客户端在解锁的时候就可以进行校验是否是同一个客户端。</li><li>由于我们<strong>只考虑Redis单机部署的场景，所以容错性我们暂不考虑。</strong></li></ul><h4 id="解锁"><a href="#解锁" class="headerlink" title="解锁"></a>解锁</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> Long RELEASE_SUCCESS = <span class="number">1L</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 释放分布式锁</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> jedis  Redis客户端</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> lockKey  锁</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> requestId  请求标识</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span> 是否解锁成功</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">boolean</span> <span class="title">releaseLock</span><span class="params">(Jedis jedis, String lockKey, String requestId)</span> </span>&#123;</span><br><span class="line">    <span class="comment">// Lua脚本代码：保证命令执行的原子性。</span></span><br><span class="line">    <span class="comment">// 即eval命令执行Lua代码的时候，Lua代码将被当成一个命令去执行，并且直到eval命令执行完成，Redis才会执行其他命令。</span></span><br><span class="line">    <span class="comment">// 首先获取锁对应的value值，检查是否与requestId相等，如果相等则删除锁（解锁）</span></span><br><span class="line">    String script = <span class="string">"if redis.call('get', KEYS[1]) == ARGV[1] "</span> +</span><br><span class="line">            <span class="string">"then return redis.call('del', KEYS[1]) "</span> +</span><br><span class="line">            <span class="string">"else return 0 end"</span>;</span><br><span class="line">    <span class="comment">// 将Lua代码传到jedis.eval()方法里，并使参数KEYS[1]赋值为lockKey，ARGV[1]赋值为requestId。</span></span><br><span class="line">    <span class="comment">// eval()方法是将Lua代码交给Redis服务端执行。</span></span><br><span class="line">    Object result = jedis.eval(script,</span><br><span class="line">            Collections.singletonList(lockKey),</span><br><span class="line">            Collections.singletonList(requestId));</span><br><span class="line">    <span class="keyword">return</span> RELEASE_SUCCESS.equals(result);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Redis </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Redis </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>并发模式-2：Immutable不变模式</title>
      <link href="/ckde6cvxs0000a5yd0wtz6h6h/"/>
      <url>/ckde6cvxs0000a5yd0wtz6h6h/</url>
      
        <content type="html"><![CDATA[<p>Immutable不变模式就是指：<strong>确保实例的内部状态不会发生改变，这样在访问这些实例时就不需要增加耗时的互斥处理</strong>（如Single Threaded Execution模式中的对临界区进行互斥保护）。</p><p>如<code>String类</code>就是一个Immutable类。因为<strong>String类中使用final关键字修饰字符串数组<code>private final char value[];</code>来保存字符串</strong>，并没有修改字符串内容的方法。所以，String的实例所表示的字符串的内容不会发生变化。</p><a id="more"></a><h2 id="Immutable不变模式"><a href="#Immutable不变模式" class="headerlink" title="Immutable不变模式"></a>Immutable不变模式</h2><h3 id="是什么？"><a href="#是什么？" class="headerlink" title="是什么？"></a>是什么？</h3><p>Immutable角色是一个类，在这个角色中，<strong>字段的值是不可以修改的，也不存在修改字段内容的方法。</strong> <code>Immutable角色的实例被创建后，状态就不会再发生变化，也就不需要使用Single Threaded Execution模式使用synchronized去保护临界区</code>。</p><h3 id="何时使用？"><a href="#何时使用？" class="headerlink" title="何时使用？"></a>何时使用？</h3><p>Immutable模式该在哪些情况下使用呢？</p><ul><li><code>实例创建后，状态不再发生变化时</code>：</li></ul><p><strong>实例创建后，状态不再发生变化</strong>是必要条件。实例的状态是由字段的值决定的，所以<strong>将字段声明为<code>final字段</code>，且<code>不存在setter方法</code>是重点所在</strong>。<br>但即使这样，也有可能是可变的，因为<strong>即使字段的值不发生变化，但字段引用的实例有可能会发生变化</strong>。</p><ul><li><code>实例是共享的，且被频繁访问时</code>：<br>Immutable模式的优点是<strong>不使用synchronized来保护临界区</strong>。就意味着<strong>能够在不失去安全性和生存性的前提下提高性能</strong>。所以在当实例被多个线程共享时，且有可能被频繁访问时，Immutable模式的优点就会极大的凸显出来。</li></ul><h3 id="成对的mutable可变类和immutable不可变类"><a href="#成对的mutable可变类和immutable不可变类" class="headerlink" title="成对的mutable可变类和immutable不可变类"></a>成对的mutable可变类和immutable不可变类</h3><p>假设一个类，被多线程访问，使用synchronized进行保护，但类中存在setter方法。这样看起来Immutable模式是不成立的。</p><ul><li><p>场景一：<br>如果这个setter方法并未被使用，就可以将字段声明为final并删除setter方法，这样就遵守了不可变性，就成功改造为Immutable模式了。</p></li><li><p>场景二：<br>如果setter方法被使用了，这个类就是mutable可变模式了。<br>我们可以分析该类，如可以分为使用setter方法和不使用的情况，就可以将这个类拆分为mutable类和immutable类，然后设计成可以根据mutable实例创建immutable实例，也可以反过来根据immutable实例创建mutable实例。<br>如：StringBuffer类和String类。<br>StringBuffer类是mutable类，表示的字符能够随便改写，使用了synchronized保护。而String类表示字符串不可以被改写，也没使用synchronized保护，所以性能比较高。<br>但<strong>StringBuffer类中有一个以String为参数的构造函数，而String类中有一个以StringBuffer为参数的构造函数</strong>。也就是，<code>两者的实例是可以互相转换的</code>。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// String类的构造函数</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="title">String</span><span class="params">(StringBuffer buffer)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">synchronized</span>(buffer) &#123;</span><br><span class="line">            <span class="keyword">this</span>.value = Arrays.copyOf(buffer.getValue(), buffer.length());</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"><span class="comment">//StringBuffer类的构造函数</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">StringBuffer</span><span class="params">(String str)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>(str.length() + <span class="number">16</span>);</span><br><span class="line">        append(str);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>所以，<code>如果需要频繁改变字符串内容，就使用StringBuffer类，如果不需要改变，只是引用其内容，就使用String类</code>。<br>但<code>当多个字符串组成新的字符串时，StringBuffer类的速度比String类快</code>。</p></li></ul><p>注意：<br><strong>在Immutable类中调用mutable类时需注意安全性，需要对mutable类进行安全保护，否则，可变类中的值可能会被其他线程使用该类的setter方法改写字段值，导致值发生变化</strong>。<br>如：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">String</span><span class="params">(StringBuffer buffer)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">synchronized</span>(buffer) &#123;</span><br><span class="line">            <span class="keyword">this</span>.value = Arrays.copyOf(buffer.getValue(), buffer.length());</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h3 id="标准类库中的Immutable模式"><a href="#标准类库中的Immutable模式" class="headerlink" title="标准类库中的Immutable模式"></a>标准类库中的Immutable模式</h3><ul><li><p>表示字符串的<code>java.lang.String类</code>：<br>再创建完实例后，字符串的内容不会发生变化，因为<strong>使用<code>final关键字</code>修饰字符串数组<code>private final char value[];</code>来保存字符串</strong>，并没有修改字符串内容的方法。</p></li><li><p>表示大数字的<code>java.math.BigInteger类</code>和<code>java.math.BigDecimal类</code>：</p></li><li><p>表示正则表达式模式的<code>java.util.regex.Pattern类</code>：<br>Pattern类表示正则表达式的模式，即使在处理模式匹配时，值也不会发生变化。</p></li><li><p><code>java.lang.Integer类等</code>：<br>Integer和Short等<code>基本类型的包装类（wrapper class）</code>都是immutable类型的，创建好实例后，也都不会发生变化。</p></li></ul><h2 id="案例"><a href="#案例" class="headerlink" title="案例"></a>案例</h2><p>创建一个Person类，并启动三个线程来访问该实例，会发现它们都是线程安全的。</p><ul><li><p>Person类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 表示人的类：</span></span><br><span class="line"><span class="comment"> * - 线程安全的：</span></span><br><span class="line"><span class="comment"> * 字段值仅可以通过构造函数来设置，没有setXX方法。</span></span><br><span class="line"><span class="comment"> * 所以，Person类的实例一旦创建，其字段的值就不会发生变化。</span></span><br><span class="line"><span class="comment"> * 这时，即使多个线程同时访问同一个实例，该类也是安全的。</span></span><br><span class="line"><span class="comment"> * Person类中的所有方法无需声明为synchronized，就可以允许多个线程同时执行。</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * - 防止子类修改其字段值：</span></span><br><span class="line"><span class="comment"> * 1、Person声明为final类型。表示我们无法创建其类的子类，也是防止子类修改其字段值的一种措施。</span></span><br><span class="line"><span class="comment"> * 2、字段的可见性都为private。表示这2个字段都只有从该类的内部才可以访问。</span></span><br><span class="line"><span class="comment"> * 3、字段都声明为final类型。表示一旦字段被赋值一次，就不会再被赋值。</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> wugang</span></span><br><span class="line"><span class="comment"> * date: 2020-07-31 18:55</span></span><br><span class="line"><span class="comment"> **/</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">final</span> <span class="class"><span class="keyword">class</span> <span class="title">Person</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> String name;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> String address;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Person</span><span class="params">(String name, String address)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">        <span class="keyword">this</span>.address = address;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getName</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getAddress</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> address;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"[Person: "</span> + <span class="string">"name = "</span> + name + <span class="string">", address = "</span> + address + <span class="string">']'</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>PrintPersonThread类：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 显示Person实例的线程的类</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> wugang</span></span><br><span class="line"><span class="comment"> * date: 2020-07-31 18:55</span></span><br><span class="line"><span class="comment"> **/</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">PrintPersonThread</span> <span class="keyword">extends</span> <span class="title">Thread</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> Person person;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">PrintPersonThread</span><span class="params">(Person person)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.person = person;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">while</span> (<span class="keyword">true</span>) &#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                <span class="comment">// sleep 让各线程可以清晰的交叉打印</span></span><br><span class="line">                TimeUnit.MILLISECONDS.sleep(<span class="number">100</span>);</span><br><span class="line">            &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">            System.out.println(Thread.currentThread().getName() + <span class="string">" prints "</span> + person.toString());</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>Main类：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 创建一个Person类，并启动三个线程来访问该实例</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Person person = <span class="keyword">new</span> Person(<span class="string">"Bubble"</span>, <span class="string">"北京"</span>);</span><br><span class="line">        <span class="keyword">new</span> PrintPersonThread(person).start();</span><br><span class="line">        <span class="keyword">new</span> PrintPersonThread(person).start();</span><br><span class="line">        <span class="keyword">new</span> PrintPersonThread(person).start();</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure></li></ul><p>输出：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">Thread-1 prints [Person: name &#x3D; Bubble, address &#x3D; 北京]</span><br><span class="line">Thread-2 prints [Person: name &#x3D; Bubble, address &#x3D; 北京]</span><br><span class="line">Thread-0 prints [Person: name &#x3D; Bubble, address &#x3D; 北京]</span><br><span class="line">Thread-2 prints [Person: name &#x3D; Bubble, address &#x3D; 北京]</span><br><span class="line">Thread-0 prints [Person: name &#x3D; Bubble, address &#x3D; 北京]</span><br></pre></td></tr></table></figure><h2 id="扩展"><a href="#扩展" class="headerlink" title="扩展"></a>扩展</h2><h3 id="相关的设计模式"><a href="#相关的设计模式" class="headerlink" title="相关的设计模式"></a>相关的设计模式</h3><h4 id="Single-Threaded-Execution模式"><a href="#Single-Threaded-Execution模式" class="headerlink" title="Single Threaded Execution模式"></a>Single Threaded Execution模式</h4><p>Immutable模式下，实例的状态不会发生变化，所以无需进行保护。<br>而STE模式，当一个线程正在修改实例状态时，不允许其他的线程来访问该实例。<br>这时会出现下面两种情况之一：</p><ul><li><code>写入与写入的冲突</code>（write-write conflict）：<br>当一个线程正在修改实例状态，而其他线程也试图修改其状态时发生的冲突。</li><li><code>读取和写入的冲突</code>（read-write conflict）：<br>当一个线程正在读取实例状态，而其他线程试图修改其状态时发生的冲突。</li></ul><p>而immutable模式中，只会发生read-read当情况，不会出现conflict。</p><h4 id="Read-Wrire-Lock模式"><a href="#Read-Wrire-Lock模式" class="headerlink" title="Read-Wrire Lock模式"></a>Read-Wrire Lock模式</h4><p>在Read-Write Lock模式中，<code>读取操作和写入操作是分开考虑的。在执行读取操作之前，线程必须获取用于读取的锁；在执行写入操作之前，线程必须获取用于写入的锁</code>。所以：</p><ul><li><strong>当一个线程在读取时，其他线程可以读取，但是不可以写入</strong>。</li><li><strong>当一个线程正在写入时，其他线程不可以读取或写入</strong>。<br>因为执行互斥处理会降低程序的性能，但是如果把写入的互斥处理和读取的互斥处理分开来考虑，就可以提高系统性能。</li></ul><p>Immutable模式中，只会发生read-read当情况，不会出现conflict。所以多线程可以自由的访问实例。<br>而Read-Write Lock模式也利用了read-read不会引起冲突的特点。它执行read的线程和执行write的线程是分开考虑的。能够提高程序的性能。</p><h4 id="Flyweight模式（享元模式）"><a href="#Flyweight模式（享元模式）" class="headerlink" title="Flyweight模式（享元模式）"></a>Flyweight模式（享元模式）</h4><p>享元模式的主要目的是<code>实现对象的共享</code>，即共享池，当系统中对象多的时候可以减少内存的开销，通常与工厂模式一起使用。<br>在Flyweight模式中，为了提高内存的使用效率，会共享实例。所以，Immutable模式和Flyweight模式有时是可以同时使用的。</p><h3 id="final关键字"><a href="#final关键字" class="headerlink" title="final关键字"></a>final关键字</h3><p>final类主要用在三个地方：类、方法、变量。</p><p>Java中的final类有多种不同的用途，含义也不同。</p><ul><li><p><code>final类</code>：<br>当final修饰一个类时，表示该类不能被继承，即无法扩展。也就是说无法创建final类的子类，所以final类中声明的方法也就不会被重写。<br>final类中的所有成员方法都会被隐式地指定为final方法；</p></li><li><p><code>final方法</code>：<br>实例方法使用final，表示该方法不会被子类的方法重写。即可以把方法锁定，以防止任何继承类修改它的含义。<br>静态方法使用final，表示该方法不会被子类的方法隐藏，如果试图重写或隐藏编译时会提示错误。<br>类中所有的private方法都被隐式地指定为final。</p></li><li><p><code>final变量</code>：<br>对于一个final变量，如果是基本数据类型的变量，则其数值一旦初始化之后就不能更改；<br>如是引用类型的变量，则对其初始化之后便不能再让它指向另一个对象。</p><blockquote><ul><li><strong>final字段</strong>：<br>final字段只能被赋值一次。<br>对<code>final实例字段赋值</code>的方法有2种：<br>1、一种在字段声明时赋上初始值；<br>2、一种在构造函数中对字段赋值；<br>对<code>final静态字段赋值</code>的方法也有2种：<br>1、一种在字段声明时赋上初始值；<br>2、在static静态代码块中对字段赋值；<br>注意：final字段不可以使用setter方法再次赋值。</li></ul></blockquote></li></ul><blockquote><ul><li><strong>final变量和final参数</strong>：<br>局部变量和方法的参数，也可以声明为final，可以赋值一次。<br>但final参数不可以赋值，因为调用方法时，已经对其赋值了。</li></ul></blockquote><h3 id="集合类和多线程"><a href="#集合类和多线程" class="headerlink" title="集合类和多线程"></a>集合类和多线程</h3><h4 id="非线程安全的ArrayList类"><a href="#非线程安全的ArrayList类" class="headerlink" title="非线程安全的ArrayList类"></a>非线程安全的ArrayList类</h4><p>java.util.ArrayList类用于提供可调整大小的数组，是非线程安全的。</p><h4 id="Collections-synchronizedList同步集合类"><a href="#Collections-synchronizedList同步集合类" class="headerlink" title="Collections.synchronizedList同步集合类"></a>Collections.synchronizedList同步集合类</h4><p>java.util.ArrayList类是非线程安全的类，可以使用Collections.synchronizedList方法对其进行同步，就能得到线程安全的实例。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">final</span> List&lt;String&gt; list = Collections.synchronizedList(<span class="keyword">new</span> ArrayList&lt;&gt;());</span><br></pre></td></tr></table></figure><h4 id="写时复制（copy-on-write）的CopyOnWriteArrayList类"><a href="#写时复制（copy-on-write）的CopyOnWriteArrayList类" class="headerlink" title="写时复制（copy-on-write）的CopyOnWriteArrayList类"></a>写时复制（copy-on-write）的CopyOnWriteArrayList类</h4><p>java.util.concurrent.CopyOnWriteArrayList类是线程安全的。与使用Collections.synchronizedList不同，它<strong>采用了<code>写时复制Copy-On-Write技术</code>来避免读写冲突</strong>。<br>如果使用Copy-On-Write，当对集合执行写操作时，内部已确保安全的数组就会被整体复制。复制之后，就不需在使用迭代器依次读取元素时担心元素会被修改了。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">add</span><span class="params">(E e)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">final</span> ReentrantLock lock = <span class="keyword">this</span>.lock;</span><br><span class="line">    lock.lock();</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        Object[] elements = getArray();</span><br><span class="line">        <span class="keyword">int</span> len = elements.length;</span><br><span class="line">        Object[] newElements = Arrays.copyOf(elements, len + <span class="number">1</span>);</span><br><span class="line">        newElements[len] = e;</span><br><span class="line">        setArray(newElements);</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">    &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">        lock.unlock();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>但在使用copy-on-write时，每次执行写操作时，都会执行复制，会耗费较多时间。所以该类适合在<code>写少读多，且读操作频率非常高</code>的场景。</p>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
          <category> 并发 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> 并发 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>并发模式-1：Single Threaded Execution模式：能通过这座桥的只能有一个人</title>
      <link href="/ckd8g12ck0000v1yd2ymng4um/"/>
      <url>/ckd8g12ck0000v1yd2ymng4um/</url>
      
        <content type="html"><![CDATA[<p>Single Threaded Execution模式，即&quot;以一个线程执行&quot;。<br>就像独木桥一样，同一时间内只允许一个人通过，<strong>该模式用于设置限制，以确保同一时间内只能让一个线程执行处理。</strong></p><ul><li>其实<code>主要思想</code>也就是：</li></ul><p><strong>当我们修改多个线程共享的实例时，实例就会失去安全性。所以我们找出这个不安全的范围，将这个范围设置为临界区，并对临界区进行保护（使用synchronized），使其只允许一个线程同时执行</strong>。</p><a id="more"></a><h2 id="Single-Threaded-Execution模式"><a href="#Single-Threaded-Execution模式" class="headerlink" title="Single Threaded Execution模式"></a>Single Threaded Execution模式</h2><h3 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h3><p>Single Threaded Execution模式中会有一个发挥<code>SharedResource（共享资源）</code>作用的类。如下面案例中的门Gate这个类。</p><p><strong>SharedResource角色是可以被多个线程访问的类</strong>，包含很多方法，主要分类下面两类：</p><ul><li><code>safeMethod</code>：线程安全方法。多线程下不会发生问题。</li><li><code>unsafeMethod</code>：非线程安全方法。多个线程调用会出现问题，需进行保护，使其不被多个线程同时访问。</li></ul><p><strong>Single Threaded Execution模式会保护unsafeMethod，使其只能由一个线程访问</strong>，Java可以使用<code>synchronized关键字</code>。我们将<strong>允许单个线程执行的程序范围</strong>称为<code>临界区</code>。<br><img src="https://cdn.jsdelivr.net/gh/bubblewu/cdn/images/concurrent/single-thread-execution.png" alt="Single Threaded Execution模式下的Timethreads图"></p><h3 id="什么时候使用？"><a href="#什么时候使用？" class="headerlink" title="什么时候使用？"></a>什么时候使用？</h3><ul><li><p><code>多线程时</code>：<br>单线程时不需要，使用的前提是多线程环境下。</p></li><li><p><code>多个线程访问时</code>：</p></li></ul><p><strong>当SharedResource角色的实例有可能被多个线程同时访问时</strong>，就需要使用Single Threaded Execution模式。</p><p>即使是多线程程序，如果所有线程都是完全独立操作的，那么就不需要使用该模式，当前状态为<code>线程互不干涉（interfere）</code>。<br>在某些多线程框架中，有时线程的独立性是由框架保证的，这时也不需使用该模式。</p><ul><li><code>状态有可能发生变化时</code>：<br>如果SharedResource角色的状态会发生变化时，就需使用该模式。</li></ul><p>如果创建实例后，实例的状态再也不会发生变化，则不需使用。如<code>只读不写</code>的情况。如<code>Immutable模式</code>时，实例的状态不会发生改变，也就不需要。</p><ul><li><code>需要确保安全性时</code>：<br>只有在需要确保安全性时，才需要使用该模式。<br>如：Java的集合类大多为非线程安全的，在使用时，这是为了在不需要考虑安全性的时候提高程序的运行速度。</li></ul><blockquote><p>线程安全的方法：<br>Java提供了下列方法，可以确保集合类是线程安全的。</p><ul><li>synchronizedCollection方法；</li><li>synchronizedList方法；</li><li>synchronizedMap方法；</li><li>synchronizedSet方法；</li><li>synchronizedSortedMap方法；</li><li>synchronizedSortedSet方法；</li></ul></blockquote><h3 id="安全性和synchronized"><a href="#安全性和synchronized" class="headerlink" title="安全性和synchronized"></a>安全性和synchronized</h3><p>Java使用关键字synchronized来实现执行线程的互斥处理。<br>同步方法（synchronized方法）： <strong>在方法前加synchronized关键字，每次只允许一个线程处理该方法。</strong></p><blockquote><p>synchronized实例方法、synchronized静态方法和synchronized代码块：</p><ul><li>synchronized代码块可以精确的控制互斥处理的执行范围。</li><li><strong>synchronized静态方法和synchronized实例方法使用的锁是不一样的。<code>synchronized静态方法是使用该类的类对象的锁来执行线程的互斥处理的</code></strong>，和synchronized代码块锁类时是等效的。</li></ul></blockquote><blockquote><p>需注意：</p><ul><li>某个线程在运行synchronized方法时，只会停止想要获取当前同一个实例的锁的线程；</li><li>非synchronized方法可以在任意时间被多个线程执行，即使存在正在运行其他的synchronized方法的线程，非synchronized方法也仍然可以由多个线程运行。</li><li>同一个实例的synchronized实例方法同时只能有一个线程运行，如实例不同，锁也就不同，所有就算是synchronized实例方法，也可以由多个线程同时运行。</li><li>同一个类下的多个synchronized静态方法不可以由多个线程同时运行，因为锁的是当前类对象。</li><li>synchronized方法通常会降低生存性，如容易引起死锁；添加不必要的synchronized，性能会降低，如吞吐量；</li></ul></blockquote><p>synchronized保护哪个对象的实例，就需对哪个对象加锁。<br>synchronized方法执行的操作，是不可分割的，能够防止多个线程交错的执行赋值操作，是<code>原子操作（Atomic）</code>。</p><blockquote><p>注意：如在一个bean实体中，分别对两个字段的set方法加锁也是不安全的，因为线程会单独赋值，<strong>需要将字段合在一起保护</strong>。</p></blockquote><ul><li><code>synchronized和lock/unlock</code></li></ul><p><strong>如果在lock和unlock之间出现return语句或异常处理，会导致unlock不会被调用</strong>。<br>而<strong>synchronized方法和代码块，无论是执行return还是抛出异常，都一定能释放锁</strong>。</p><p>不过lock和unlock操作，可以使用<code>finally块来执行unlock</code>。这样调用lock方法后，无论执行什么操作，都会调用unlock方法解锁。</p><ul><li><code>synchronized和volatile和juc包下的AtomicXXX</code><br>不使用synchronized，而<code>在声明该字段的时候加上volatile关键字，对该字段的操作也是原子的了</code>。<br><code>juc包下的AtomicXXX等类也是通过封装volatile功能而得到的类库</code>。</li></ul><p>所以：</p><ul><li>基本类型、引用类型的赋值和引用是原子操作；</li><li>但long和double在线程间共享时，需要加synchronized或声明为volatile。将其变为原子操作。</li></ul><h3 id="生存性和死锁"><a href="#生存性和死锁" class="headerlink" title="生存性和死锁"></a>生存性和死锁</h3><p>生存性是指无论什么时候，必要的处理都一定能够被执行。是程序正常运行的必要条件之一。<br>有时候安全性和生存性会互相制约。有时只重视安全性，生存性就会下降。典型代表就是<code>死锁（deadlook）</code>，即<strong>多个线程互相等待对方释放锁的情形</strong>。</p><p><strong>发生死锁的线程都无法再继续运行，程序也就失去了生存性</strong>。</p><blockquote><p>如：仅有勺子和叉子各一把，A和B都要吃意大利面，勺子和叉子缺一不可。A拿走了勺子，B拿走了叉子，两人互相僵持，最终谁也吃不了。</p></blockquote><p>在Single Threaded Execution模式中，满足下列条件时，死锁就会发生：</p><ul><li><p>存在多个SharedResource角色；</p><blockquote><p>多个SharedResource角色相当于勺子和叉子</p></blockquote></li><li><p>线程在持有着某个SharedResource角色的锁的同时，还想获取其他SharedResource角色的锁；</p><blockquote><p>相当于A拿着勺子同时还想拿叉子，B则相反。</p></blockquote></li><li><p>获取SharedResource角色的锁的顺序并不固定。（SharedResource角色是对称的）</p><blockquote><p>SharedResource角色是对称的，相当于“拿勺子-&gt;拿叉子”和“拿叉子-&gt;拿勺子”这两种操作。也就是说勺子和叉子二者并不分优先顺序。</p></blockquote></li></ul><p>只要破坏上面任何一个条件，就可以防止死锁的情况发生。<br>如：</p><ul><li><strong>多个线程按照相同的顺序去获取实例资源</strong>；</li><li><strong>将多个实例资源封装起来一齐拿，对整体做同步，如new Pair(A, B); 直接对pair做同步处理</strong>。</li></ul><h3 id="可复用性和继承反常"><a href="#可复用性和继承反常" class="headerlink" title="可复用性和继承反常"></a>可复用性和继承反常</h3><p>如果编写一个SharedResource角色的子类，如子类能访问SharedResource角色的字段，那么子类编写时，就容易出现unsafeMethod。<br>如果不将子类在内的所有unsafeMethod都声明为synchronized方法，那就无法确保SharedResource角色的安全性。</p><p>对于多线程来说，继承会引起一些麻烦的问题，称为<code>继承反常（inheritance anomaly）</code></p><h3 id="临界区的大小和性能"><a href="#临界区的大小和性能" class="headerlink" title="临界区的大小和性能"></a>临界区的大小和性能</h3><p>我们将<strong>允许单个线程执行的程序范围</strong>称为<code>临界区</code>。</p><blockquote><p>延长临界区的大小，可以使线程的安全性异常更早的暴露出来。如可以使用Thread.sleep()方法来提高检查出错误的可能性。<br>在临界区也可以调用Thread类等yield方法，加快线程的切换。</p><blockquote><p><code>Thread.yield()</code>方法作用是：<strong>暂停当前正在执行的线程对象，并执行其他线程</strong>。<br>yield()应该做的是让当前运行线程回到可运行状态，以允许具有相同优先级的其他线程获得运行机会。因此，使用yield()的目的是让相同优先级的线程之间能适当的轮转执行。但是，实际中无法保证yield()达到让步目的，因为让步的线程还有可能被线程调度程序再次选中。<br>结论：yield()从未导致线程转到等待/睡眠/阻塞状态。在大多数情况下，yield()将导致线程从运行状态转到可运行状态，但有可能没有效果。</p></blockquote></blockquote><p>一般情况下Single Threaded Execution模式会降低程序的性能。</p><ul><li><p><code>获取锁耗费时间</code>：<br>进入synchronized方法时，线程需要获取锁的对象，会耗费一定时间。<br>如果SharedResource角色的数量少了，那么要获取锁的数量也会减少，从而能够抑制性能的下降。</p></li><li><p><code>线程冲突引起的等待</code>：<br>当线程A进入临界区内处理时，其他想要进临界区的线程会阻塞。这种状况称为<code>线程冲突（conflict）</code>。<br>发生冲突时，程序的整体性能会随线程等待时间的增加而下降。</p></li></ul><blockquote><p>不容易发生线程冲突的<code>ConcurrentHashMap</code>：<br><strong>ConcurrentHashMap将内部数据结构分成多段，针对各段操作的线程互不干涉，因此无需针对其他线程执行互斥处理</strong>。</p></blockquote><h2 id="案例"><a href="#案例" class="headerlink" title="案例"></a>案例</h2><p>模拟三个人频繁地通过一个门，且该门一次只允许一个人经过的场景。<br>当人从该门通过时，统计人数会增加，同时还会记录通行者的姓名和出生地。</p><h3 id="不使用Single-Threaded-Execution模式"><a href="#不使用Single-Threaded-Execution模式" class="headerlink" title="不使用Single Threaded Execution模式"></a>不使用Single Threaded Execution模式</h3><p>面对该需求，如果不使用Single Thread Execution模式，在多线程环境下无法正确执行的程序会引发什么现象？<br>将该程序设计为三个类：</p><table><thead><tr><th>类名</th><th>说明</th></tr></thead><tbody><tr><td>Main</td><td>创建门，并让三个人不断通过的类</td></tr><tr><td>Gate</td><td>表示门的类。会记录通行者的姓名和出生地</td></tr><tr><td>UserThread</td><td>表示人的类。将不断有人通过门</td></tr></tbody></table><h4 id="实现"><a href="#实现" class="headerlink" title="实现"></a>实现</h4><h5 id="Main类"><a href="#Main类" class="headerlink" title="Main类"></a>Main类</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.bubble.demo.single_thread_execution;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 创建门，并让三个人不断通过的类</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> wugang</span></span><br><span class="line"><span class="comment"> * date: 2020-07-29 15:53</span></span><br><span class="line"><span class="comment"> **/</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Main</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 由于Gate是非线程安全的，所以输出结果是混乱的。</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"测试开始，按[Ctrl + C]键退出"</span>);</span><br><span class="line">        <span class="comment">// 创建一个门，让三个人不断地通过</span></span><br><span class="line">        Gate gate = <span class="keyword">new</span> Gate();</span><br><span class="line">        <span class="keyword">new</span> UserThread(gate,<span class="string">"A小王"</span>, <span class="string">"A北京"</span>).start();</span><br><span class="line">        <span class="keyword">new</span> UserThread(gate,<span class="string">"B小李"</span>, <span class="string">"B上海"</span>).start();</span><br><span class="line">        <span class="keyword">new</span> UserThread(gate,<span class="string">"C小苏"</span>, <span class="string">"C南京"</span>).start();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="Gate类"><a href="#Gate类" class="headerlink" title="Gate类"></a>Gate类</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.concurrent.TimeUnit;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 表示门的类。会记录通行者的姓名和出生地</span></span><br><span class="line"><span class="comment"> * 非线程安全/pass/toString方法加synchronized为线程安全</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> wugang</span></span><br><span class="line"><span class="comment"> * date: 2020-07-29 15:55</span></span><br><span class="line"><span class="comment"> **/</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Gate</span> </span>&#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 表示到目前为止已经通过这道门的人数</span></span><br><span class="line"><span class="comment">     **/</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> counter = <span class="number">0</span>;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 表示最后一个通行者的姓名</span></span><br><span class="line"><span class="comment">     **/</span></span><br><span class="line">    <span class="keyword">private</span> String name = <span class="string">"NoBody"</span>;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 表示最后一个通行者的出生地</span></span><br><span class="line"><span class="comment">     **/</span></span><br><span class="line">    <span class="keyword">private</span> String address = <span class="string">"NoWhere"</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 表示通过门</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">pass</span><span class="params">(String name, String address)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.counter++;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">        <span class="comment">// 在name和address赋值之间调用sleep，延长临界区，可以提高检查出错误的可能性，不需等数万次执行才发现。</span></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            TimeUnit.SECONDS.sleep(<span class="number">1</span>);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">this</span>.address = address;</span><br><span class="line">        check();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 检查门的最后一个通行者的记录数据是否正确。</span></span><br><span class="line"><span class="comment">     * 注意：不需要添加synchronized。</span></span><br><span class="line"><span class="comment">     * 因为check方法只有pass方法会调用。且时私有的，也就是不会被其他类调用，所以是安全的</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">check</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 如姓名和首字母不同，说明数据异常</span></span><br><span class="line">        <span class="keyword">if</span> (name.charAt(<span class="number">0</span>) != address.charAt(<span class="number">0</span>)) &#123;</span><br><span class="line">            System.out.println(<span class="string">"*** 异常 *** :"</span> + toString());</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"No."</span> + counter + <span class="string">": name='"</span> + name + <span class="string">", address="</span> + address;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="UserThread类"><a href="#UserThread类" class="headerlink" title="UserThread类"></a>UserThread类</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.bubble.demo.single_thread_execution;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 表示人的类。将不断有人通过门</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> wugang</span></span><br><span class="line"><span class="comment"> * date: 2020-07-29 16:04</span></span><br><span class="line"><span class="comment"> **/</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserThread</span> <span class="keyword">extends</span> <span class="title">Thread</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> Gate gate;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> String name;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> String address;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">UserThread</span><span class="params">(Gate gate, String name, String address)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.gate = gate;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">        <span class="keyword">this</span>.address = address;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(name + <span class="string">" BEGIN"</span>);</span><br><span class="line">        <span class="comment">// 反复调pass方法，表示这个人在门里不断地穿梭通过</span></span><br><span class="line">        <span class="keyword">while</span> (<span class="keyword">true</span>) &#123;</span><br><span class="line">            <span class="keyword">this</span>.gate.pass(<span class="keyword">this</span>.name, <span class="keyword">this</span>.address);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="结果"><a href="#结果" class="headerlink" title="结果"></a>结果</h4><p>由于Gate是非线程安全的，pass方法会被多个线程执行。</p><ul><li>线程改写共享的实例字段时，并未考虑其他线程的操作。</li><li>对于name字段，互相竞争的线程获取的一方会先写入值，对于address同样如此，线程会再次竞争，获胜的一方先写入值。也就是所谓的<code>数据竞争</code>（Data Race）。</li></ul><p>所以输出结果是混乱的。<br>如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">*** 异常 *** :No.88434: name&#x3D;&#39;A小王, address&#x3D;B上海</span><br><span class="line">*** 异常 *** :No.88657: name&#x3D;&#39;A小王, address&#x3D;C南京</span><br><span class="line">*** 异常 *** :No.88828: name&#x3D;&#39;C小苏, address&#x3D;C南京</span><br></pre></td></tr></table></figure><p>由上面执行日志可知：</p><ul><li>Gate类是非线程安全的。</li><li>测试无法证明安全性。<br>执行了上万次才发现异常，如仅执行几次就可能发现不了。</li><li>调试信息不可靠。<br>如：<code>*** 异常 *** :No.88828: name=&#39;C小苏, address=C南京</code>，输出了异常日志，但check验证的toString内容是正确的，好像并没有错误。</li></ul><p><strong>因为某个线程在执行check方法时，其他线程不断地执行pass方法，改写了name和address的值。</strong></p><h3 id="使用Single-Threaded-Execution模式"><a href="#使用Single-Threaded-Execution模式" class="headerlink" title="使用Single Threaded Execution模式"></a>使用Single Threaded Execution模式</h3><p>该案例在不使用Single Threaded Execution模式时，即Gate是非线程安全的类时，会出现数据竞争的情况，导致不符合程序执行的安全性标准。</p><h4 id="实现-1"><a href="#实现-1" class="headerlink" title="实现"></a>实现</h4><p>将Gate类修改为线程安全的类，只需要分别在pass方法和toString方法前添加synchronized关键字，这样Gate类就变成了线程安全的类。<br>如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.concurrent.TimeUnit;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 表示门的类。会记录通行者的姓名和出生地</span></span><br><span class="line"><span class="comment"> * 非线程安全/pass/toString方法加synchronized为线程安全</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> wugang</span></span><br><span class="line"><span class="comment"> * date: 2020-07-29 15:55</span></span><br><span class="line"><span class="comment"> **/</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Gate</span> </span>&#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 表示到目前为止已经通过这道门的人数</span></span><br><span class="line"><span class="comment">     **/</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> counter = <span class="number">0</span>;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 表示最后一个通行者的姓名</span></span><br><span class="line"><span class="comment">     **/</span></span><br><span class="line">    <span class="keyword">private</span> String name = <span class="string">"NoBody"</span>;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 表示最后一个通行者的出生地</span></span><br><span class="line"><span class="comment">     **/</span></span><br><span class="line">    <span class="keyword">private</span> String address = <span class="string">"NoWhere"</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 表示通过门</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">synchronized</span> <span class="keyword">void</span> <span class="title">pass</span><span class="params">(String name, String address)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.counter++;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">        <span class="comment">// 在name和address赋值之间调用sleep，延长临界区，可以提高检查出错误的可能性，不需等数万次执行才发现。</span></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            TimeUnit.SECONDS.sleep(<span class="number">1</span>);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">this</span>.address = address;</span><br><span class="line">        check();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 检查门的最后一个通行者的记录数据是否正确。</span></span><br><span class="line"><span class="comment">     * 注意：不需要添加synchronized。</span></span><br><span class="line"><span class="comment">     * 因为check方法只有pass方法会调用。且时私有的，也就是不会被其他类调用，所以是安全的</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">check</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 如姓名和首字母不同，说明数据异常</span></span><br><span class="line">        <span class="keyword">if</span> (name.charAt(<span class="number">0</span>) != address.charAt(<span class="number">0</span>)) &#123;</span><br><span class="line">            System.out.println(<span class="string">"*** 异常 *** :"</span> + toString());</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 一般来说，多个线程共享的字段必须使用synchronized或者volatile来保护。</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * 假设当线程A正在执行pass方法时，其他线程B调用了toString方法。</span></span><br><span class="line"><span class="comment">     * 在线程B引用了name字段的值，但尚未引用address期间，线程A可能会修改address的值。</span></span><br><span class="line"><span class="comment">     * 这样，toString方法对线程B创建时使用name和address对首字母就可能会不一致。</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">synchronized</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"No."</span> + counter + <span class="string">": name='"</span> + name + <span class="string">", address="</span> + address;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这样的话，无论等待多久，都不会出现异常情况。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">测试开始，按[Ctrl + C]键退出</span><br><span class="line">A小王 BEGIN</span><br><span class="line">B小李 BEGIN</span><br><span class="line">C小苏 BEGIN</span><br></pre></td></tr></table></figure><p>因为：<br>Java使用关键字synchronized来实现执行线程的互斥处理。 <strong>在方法前加synchronized关键字，每次只允许一个线程处理该方法。</strong></p><p>针对该案例添加了synchronized方法：在线程A执行pass方法时，线程B就无法再执行pass方法，会阻塞在pass方法的入口处，直到线程A执行释放了pass方法的锁，线程B才可以去获取pass方法的锁，获得锁后再执行。</p><h2 id="扩展"><a href="#扩展" class="headerlink" title="扩展"></a>扩展</h2><h3 id="相关的设计模型"><a href="#相关的设计模型" class="headerlink" title="相关的设计模型"></a>相关的设计模型</h3><p>许多与多线程、并发性相关的模式都跟Single Threaded Execution模式有关联。</p><h4 id="Guarded-Suspension模式"><a href="#Guarded-Suspension模式" class="headerlink" title="Guarded Suspension模式"></a>Guarded Suspension模式</h4><p>Guarded Suspension模式：<strong>如果执行现在的处理会造成问题，就让执行处理的线程等待</strong>。这种模式通过让线程等待来保证实例的安全性。</p><p>在Single Threaded Execution模式中，是否发生线程等待取决于<strong>是否有其他线程正在执行受保护的unsafeMethod</strong>。<br>而在Guarded Suspension模式中，取决于<strong>对象的状态是否合适</strong>。在检查对象状态的部分就使用了STE模式。</p><h4 id="Read-Write-Lock模式"><a href="#Read-Write-Lock模式" class="headerlink" title="Read-Write Lock模式"></a>Read-Write Lock模式</h4><p>在Read-Write Lock模式中，<code>读取操作和写入操作是分开考虑的。在执行读取操作之前，线程必须获取用于读取的锁；在执行写入操作之前，线程必须获取用于写入的锁</code>。所以：</p><ul><li><strong>当一个线程在读取时，其他线程可以读取，但是不可以写入</strong>。</li><li><strong>当一个线程正在写入时，其他线程不可以读取或写入</strong>。<br>因为执行互斥处理会降低程序的性能，但是如果把写入的互斥处理和读取的互斥处理分开来考虑，就可以提高系统性能。</li></ul><p>在STE模式中，如受保护的unsafeMethod正在被一个线程执行，那么想要执行该方法的其他线程必须等待该线程执行结束。</p><p>而Read-Write Lock模式中，多个线程可以同时执行read方法，这时需要等待的只有想要执行的write方法的线程。<br>在Read-Write Lock模式中，检查线程种类和个数部分，就使用了STE模式。</p><h4 id="Immutable模式"><a href="#Immutable模式" class="headerlink" title="Immutable模式"></a>Immutable模式</h4><p><strong>一个对象的状态在对象被创建之后就不再变化，这就是所谓的不变模式。</strong><br>在STE模式中，unsafeMethod必须要加以保护，确保只允许一个线程执行。<br>而在Immutable不变模式中，其对象的状态不会发生变化，所以所有方法都不需要进行保护，也就是<code>Immutable模式中的所有方法都是safeMethod</code>。</p><h4 id="Thread-Specific-Storage模式"><a href="#Thread-Specific-Storage模式" class="headerlink" title="Thread-Specific Storage模式"></a>Thread-Specific Storage模式</h4><p>在STE模式中，会有多个线程访问SharedResource角色，所以需要保护方法，对线程进行交通管制。<br>而<code>Thread-Specific Storage模式会确保每个线程都有其固有的区域，且这块固有区域仅由一个线程访问</code>。所以也无需保护方法。<br>如:<code>ThreadLocal类</code> 一个线程会有自己独立的储物柜。</p><h3 id="信号量：Semaphore"><a href="#信号量：Semaphore" class="headerlink" title="信号量：Semaphore"></a>信号量：Semaphore</h3><p>STE模式用于确保某个区域只能由一个线程来执行。<br>如果保证某个区域<strong>最多只能由N个线程执行</strong>，那就需要使用juc包下的计数信号量Semaphore来控制线程数量。</p><ul><li><code>资源的许可个数permits</code>通过Semaphore的构造函数来制定：<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">Semaphore</span><span class="params">(<span class="keyword">int</span> permits, <span class="keyword">boolean</span> fair)</span> </span>&#123;</span><br><span class="line">        sync = fair ? <span class="keyword">new</span> FairSync(permits) : <span class="keyword">new</span> NonfairSync(permits);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure></li><li><code>acquire方法</code>：用于确保存在可用资源。<br>在存在可用资源时，程序会立即从acquire方法返回，同时信号量内部的资源个数会减1.<br>如无可用资源，线程则阻塞在acquire方法内，直到有可用资源。</li><li><code>release方法</code>：用于释放资源。<br>释放资源后，信号量内部的资源个数会加1。<br>同时，如果acquire中存在等待的线程，那么其中一个线程会被唤醒，并从acquire方法返回。</li></ul><h4 id="案例-1"><a href="#案例-1" class="headerlink" title="案例"></a>案例</h4><p>10个线程交替使用资源，但同时使用的资源最多只能是3个。</p><ul><li>Main类：<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 设置3个资源</span></span><br><span class="line">        BoundedResource resource = <span class="keyword">new</span> BoundedResource(<span class="number">3</span>);</span><br><span class="line">        <span class="comment">// 10个线程交替使用资源，但同时使用的资源最多只能是3个</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">10</span>; i++) &#123;</span><br><span class="line">            <span class="keyword">new</span> UserThread(resource).start();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure></li></ul><p>输出：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">Thread-0: -&gt; Begin: used &#x3D; NO.1</span><br><span class="line">Thread-1: -&gt; Begin: used &#x3D; NO.2</span><br><span class="line">Thread-2: -&gt; Begin: used &#x3D; NO.3</span><br><span class="line">Thread-2: &lt;--- End: used &#x3D; NO.3</span><br><span class="line">Thread-3: -&gt; Begin: used &#x3D; NO.3</span><br><span class="line">Thread-0: &lt;--- End: used &#x3D; NO.3</span><br><span class="line">...</span><br></pre></td></tr></table></figure><ul><li><p>UserThread用户线程类：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserThread</span> <span class="keyword">extends</span> <span class="title">Thread</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">static</span> Random random = <span class="keyword">new</span> Random(<span class="number">2020</span>);</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> BoundedResource resource;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">UserThread</span><span class="params">(BoundedResource resource)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.resource = resource;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">while</span> (<span class="keyword">true</span>) &#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                <span class="keyword">this</span>.resource.use();</span><br><span class="line">                TimeUnit.MILLISECONDS.sleep(random.nextInt(<span class="number">3000</span>));</span><br><span class="line">            &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>BoundedResource使用资源类：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">BoundedResource</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> Semaphore semaphore;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">int</span> permits;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">static</span> Random random = <span class="keyword">new</span> Random(<span class="number">2020</span>);</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">BoundedResource</span><span class="params">(<span class="keyword">int</span> permits)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.semaphore = <span class="keyword">new</span> Semaphore(permits);</span><br><span class="line">        <span class="keyword">this</span>.permits = permits;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">use</span><span class="params">()</span> <span class="keyword">throws</span> InterruptedException </span>&#123;</span><br><span class="line">        semaphore.acquire();</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            doSomething();</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            semaphore.release();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">doSomething</span><span class="params">()</span> <span class="keyword">throws</span> InterruptedException </span>&#123;</span><br><span class="line">        Log.println(<span class="string">"-&gt; Begin: used = NO."</span> + (<span class="keyword">this</span>.permits - <span class="keyword">this</span>.semaphore.availablePermits()));</span><br><span class="line">        TimeUnit.MILLISECONDS.sleep(random.nextInt(<span class="number">1000</span>));</span><br><span class="line">        Log.println(<span class="string">"&lt;--- End: used = NO."</span> + (<span class="keyword">this</span>.permits - <span class="keyword">this</span>.semaphore.availablePermits()));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>Log日志类：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Log</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">println</span><span class="params">(String s)</span> </span>&#123;</span><br><span class="line">        System.out.println(Thread.currentThread().getName() + <span class="string">": "</span> + s);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
          <category> 并发 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> 并发 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>并发：多线程程序的评价标准</title>
      <link href="/ckd70wo7j0017qlydgj2w1nq3/"/>
      <url>/ckd70wo7j0017qlydgj2w1nq3/</url>
      
        <content type="html"><![CDATA[<p>针对多线程程序，我们不能单纯的来指出是好还是坏，需要遵循一定的评价标准来规范的指出好在哪里、差在哪里？</p><p>其实也就是：</p><ul><li>安全性和生存性：程序的必要条件；</li><li>可复用性和性能：提高程序质量条件；</li></ul><a id="more"></a><h2 id="主要标准"><a href="#主要标准" class="headerlink" title="主要标准"></a>主要标准</h2><p>有下面四个主要标准：</p><h4 id="安全性（Safety）：不损坏对象"><a href="#安全性（Safety）：不损坏对象" class="headerlink" title="安全性（Safety）：不损坏对象"></a>安全性（Safety）：不损坏对象</h4><p>安全性就是不损坏对象，是程序正常执行的必要条件之一。<br>对象损坏是指<strong>对象的状态和设计者的原意不一致，通常是指对象的字段的值并非预期值</strong>。<br>如果一个类即使被多个线程同时使用，也可以确保安全性，那么这个类就是<code>线程安全类</code>（Thread Safe）。如集合类中的Vector类是线程安全的，而ArrayList类则是非线程安全的。</p><h4 id="生存性（Liveness）：必要的处理能够被执行"><a href="#生存性（Liveness）：必要的处理能够被执行" class="headerlink" title="生存性（Liveness）：必要的处理能够被执行"></a>生存性（Liveness）：必要的处理能够被执行</h4><p>生存性是指无论什么时候，必要的处理都一定能够被执行。也是程序正常运行的必要条件之一。</p><p>需注意，即使对象没有损坏，也不一定代表程序一定好。如程序在运行过程中突然停止，而对象的状态未改变，所以对象的状态就不会出现异常，也就是符合了<code>安全性</code>条件，但是程序的执行无任何意义，不符合<code>生存性</code>的条件。</p><p>有时候安全性和生存性会互相制约。有时只重视安全性，生存性就会下降。典型代表就是<code>死锁（deadlook）</code>，<strong>即多个线程互相等待对方释放锁的情形。</strong></p><h4 id="可复用性（Reusability）：类可重复利用"><a href="#可复用性（Reusability）：类可重复利用" class="headerlink" title="可复用性（Reusability）：类可重复利用"></a>可复用性（Reusability）：类可重复利用</h4><p>可复用性是指类能够重复利用。是提高程序质量的必要条件。<br>类如果能作为组件从正常运行的程序中分割出来，那么说明这个类有很高的可复用性。</p><h4 id="性能（Performance）：能快速、大批量地执行处理"><a href="#性能（Performance）：能快速、大批量地执行处理" class="headerlink" title="性能（Performance）：能快速、大批量地执行处理"></a>性能（Performance）：能快速、大批量地执行处理</h4><p>性能是指能快速、大批量地执行处理。也是提高程序质量的必要条件。</p><p>影响性能的因素有多种：</p><ul><li><p>吞吐量（throughpt）：<br>指单位时间内完成的处理数量。能完成的处理越多，表示吞吐量越大。</p></li><li><p>响应性（responsiveness）：<br>指从发出请求到收到响应的时间。响应性好即等待时间（latency）短。</p></li><li><p>容量（capacity）：<br>指可以同时进行的处理数量。如服务器能同时处理的客户端数或文件数等。</p></li><li><p>效率（efficiency）：</p></li><li><p>可伸缩性（scalability）：</p></li><li><p>降级（degradation）：</p></li></ul><p>有时这些要素之间会相互制约，如提高吞吐量，可能会导致程序的响应性下降。</p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p><strong><code>安全性</code>和<code>生存性</code>是程序必备的条件</strong>。即既不能损坏对象，也一定要执行必要的处理。<br>在此基础之上，还需考虑如何提高程序的高可复用性和性能。</p>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
          <category> 并发 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> 并发 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>动手实现：检查程序名称规范的编译器插件</title>
      <link href="/ckd70wo70000bqlyd3k4v9lhx/"/>
      <url>/ckd70wo70000bqlyd3k4v9lhx/</url>
      
        <content type="html"><![CDATA[<p>该案例主要为实现一个检查Java代码规范的编译器插件功能，编码规范遵循下面标准：</p><ul><li>类或接口：符合驼式命名法，首字母大写。</li><li>方法：符合驼式命名法，首字母小写。</li><li>字段：<br>类或实例变量。符合驼式命名法，首字母小写。<br>常量。要求全部由大写字母或下划线构成，并且第一个字符不能是下划线。</li></ul><p>驼式命名法（Camel Case Name）是当前Java语言中主流的命名规范，我们的实战目标就是为Javac编译器添加一个额外的功能，在编译程序时检查程序名是否符合上述对类（或接口）、方法、字段的命名要求。</p><a id="more"></a><h2 id="编码实现"><a href="#编码实现" class="headerlink" title="编码实现"></a>编码实现</h2><h3 id="AbstractProcessor抽象类"><a href="#AbstractProcessor抽象类" class="headerlink" title="AbstractProcessor抽象类"></a>AbstractProcessor抽象类</h3><p>实现注解处理器的代码需要继承抽象类<code>javax.annotation.processing.AbstractProcessor</code>，这个抽象类中只有一个子类必须实现的抽象方法<code>process()</code>。</p><blockquote><p>它是Javac编译器在执行注解处理器代码时要调用的过程。</p><ul><li>我们可以从这个方法的第一个参数<code>annotations</code>中获取到此注解处理器所要处理的注解集合；</li><li>从第二个参数<code>roundEnv</code>中访问到当前这个轮次（Round）中的抽象语法树节点，每个语法树节点在这里都表示为一个Element。</li></ul></blockquote><p>AbstractProcessor抽象类还有一个很重要的实例变量<code>processingEnv</code>。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Processing environment providing by the tool framework.</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line"><span class="keyword">protected</span> ProcessingEnvironment processingEnv;</span><br></pre></td></tr></table></figure><p>它是AbstractProcessor中的一个protected变量，在注解处理器初始化的时候（init()方法执行的时候）创建，继承了AbstractProcessor的注解处理器代码可以直接访问它。它代表了注解处理器框架提供的一个上下文环境，要创建新的代码、向编译器输出信息、获取其他工具类等都需要用到这个实例变量。</p><h3 id="ElementKind枚举类"><a href="#ElementKind枚举类" class="headerlink" title="ElementKind枚举类"></a>ElementKind枚举类</h3><p>在javax.lang.model.ElementKind中定义了17类Element，已经包括了Java代码中可能出现的全部元素。</p><ul><li><code>javax.lang.model.ElementKind</code>枚举类：<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> javax.lang.model.element.Element;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">enum</span> ElementKind &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/** 包 */</span></span><br><span class="line">    PACKAGE,</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Declared types</span></span><br><span class="line">    <span class="comment">/** 枚举 */</span></span><br><span class="line">    ENUM,</span><br><span class="line">    <span class="comment">/** 类 */</span></span><br><span class="line">    CLASS,</span><br><span class="line">    <span class="comment">/** 注解 */</span></span><br><span class="line">    ANNOTATION_TYPE,</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 接口</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    INTERFACE,</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Variables</span></span><br><span class="line">    <span class="comment">/** 枚举值. */</span></span><br><span class="line">    ENUM_CONSTANT,</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 字段值</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    FIELD,</span><br><span class="line">    <span class="comment">/** 参数 */</span></span><br><span class="line">    PARAMETER,</span><br><span class="line">    <span class="comment">/** 本地变量. */</span></span><br><span class="line">    LOCAL_VARIABLE,</span><br><span class="line">    <span class="comment">/** 异常. */</span></span><br><span class="line">    EXCEPTION_PARAMETER,</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Executables</span></span><br><span class="line">    <span class="comment">/** 方法. */</span></span><br><span class="line">    METHOD,</span><br><span class="line">    <span class="comment">/** 构造函数. */</span></span><br><span class="line">    CONSTRUCTOR,</span><br><span class="line">    <span class="comment">/** 静态语句块 即static&#123;&#125;块. */</span></span><br><span class="line">    STATIC_INIT,</span><br><span class="line">    <span class="comment">/** 实例语句块 即&#123;&#125;块. */</span></span><br><span class="line">    INSTANCE_INIT,</span><br><span class="line"></span><br><span class="line">    <span class="comment">/** 参数化类型：泛型尖括号内的类型. */</span></span><br><span class="line">    TYPE_PARAMETER,</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 未定义的其他语法树节点</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    OTHER,</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 资源变量：try-resource中定义d变量.</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    RESOURCE_VARIABLE;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Returns &#123;<span class="doctag">@code</span> true&#125; if this is a kind of class:</span></span><br><span class="line"><span class="comment">     * either &#123;<span class="doctag">@code</span> CLASS&#125; or &#123;<span class="doctag">@code</span> ENUM&#125;.</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> &#123;<span class="doctag">@code</span> true&#125; if this is a kind of class</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">isClass</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span> == CLASS || <span class="keyword">this</span> == ENUM;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Returns &#123;<span class="doctag">@code</span> true&#125; if this is a kind of interface:</span></span><br><span class="line"><span class="comment">     * either &#123;<span class="doctag">@code</span> INTERFACE&#125; or &#123;<span class="doctag">@code</span> ANNOTATION_TYPE&#125;.</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> &#123;<span class="doctag">@code</span> true&#125; if this is a kind of interface</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">isInterface</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span> == INTERFACE || <span class="keyword">this</span> == ANNOTATION_TYPE;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Returns &#123;<span class="doctag">@code</span> true&#125; if this is a kind of field:</span></span><br><span class="line"><span class="comment">     * either &#123;<span class="doctag">@code</span> FIELD&#125; or &#123;<span class="doctag">@code</span> ENUM_CONSTANT&#125;.</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> &#123;<span class="doctag">@code</span> true&#125; if this is a kind of field</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">isField</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span> == FIELD || <span class="keyword">this</span> == ENUM_CONSTANT;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h3 id="两个注解"><a href="#两个注解" class="headerlink" title="两个注解"></a>两个注解</h3><p>注解处理器除了process()方法及其参数之外，还有两个经常配合着使用的注解，分别是：</p><ul><li><code>@SupportedAnnotationTypes</code>：<br>代表了这个注解处理器对哪些注解感兴趣，可以使用星号 <code>*</code> 作为通配符代表对所有的注解都感兴趣。</li><li><code>@SupportedSourceVersion</code>：<br>指出这个注解处理器可以处理哪些版本的Java代码。</li></ul><p>每一个注解处理器在运行时都是<code>单例的</code>，如果不需要改变或添加抽象语法树中的内容，process()方法就可以返回一个值为false的布尔值，通知编译器这个轮次中的代码未发生变化，无须构造新的JavaCompiler实例，在这次实战的注解处理器中只对程序命名进行检查，不需要改变语法树的内容，因此process()方法的返回值一律都是false。</p><h3 id="实现"><a href="#实现" class="headerlink" title="实现"></a>实现</h3><h4 id="注解处理器NameCheckProcessor"><a href="#注解处理器NameCheckProcessor" class="headerlink" title="注解处理器NameCheckProcessor"></a>注解处理器NameCheckProcessor</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.bubble.processor;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.annotation.processing.*;</span><br><span class="line"><span class="keyword">import</span> javax.lang.model.SourceVersion;</span><br><span class="line"><span class="keyword">import</span> javax.lang.model.element.TypeElement;</span><br><span class="line"><span class="keyword">import</span> java.util.Set;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 插入式注解处理器：对Java程序命名进行检查</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> wugang</span></span><br><span class="line"><span class="comment"> * date: 2020-07-28 16:23</span></span><br><span class="line"><span class="comment"> **/</span></span><br><span class="line"><span class="comment">// 表示支持所有的Annotations</span></span><br><span class="line"><span class="meta">@SupportedAnnotationTypes</span>(<span class="string">"*"</span>)</span><br><span class="line"><span class="comment">// 只支持JDK8的Java代码</span></span><br><span class="line"><span class="meta">@SupportedSourceVersion</span>(SourceVersion.RELEASE_8)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">NameCheckProcessor</span> <span class="keyword">extends</span> <span class="title">AbstractProcessor</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> NameChecker nameChecker;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 初始化名称检查插件</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> processingEnv 它是AbstractProcessor中的一个protected变量，在注解处理器初始化的时候（init()方法执行的时候）创建，</span></span><br><span class="line"><span class="comment">     *                      继承了AbstractProcessor的注解处理器代码可以直接访问它。</span></span><br><span class="line"><span class="comment">     *                      它代表了注解处理器框架提供的一个上下文环境，要创建新的代码、向编译器输出信息、获取其他工具类等都需要用到这个实例变量</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">init</span><span class="params">(ProcessingEnvironment processingEnv)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>.init(processingEnv);</span><br><span class="line">        nameChecker = <span class="keyword">new</span> NameChecker(processingEnv);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 对输入的语法树的各个节点进行名称检查</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * 该方法是Javac编译器在执行注解处理器代码时要调用的过程：</span></span><br><span class="line"><span class="comment">     * 每一个注解处理器在运行时都是单例的，如果不需要改变或添加抽象语法树中的内容，</span></span><br><span class="line"><span class="comment">     * process() 方法就可以返回一个值为false的布尔值，通知编译器这个轮次中的代码未发生变化，无须构造新的 JavaCompiler实例。</span></span><br><span class="line"><span class="comment">     * 自定义的此注解处理器中只对程序命名进行检查，不需要改变语法树的内容，因此process()方法的返回值一律都是false。</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> annotations 获取到此注解处理器所要处理的注解集合</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> roundEnv 参数“roundEnv”中访问到当前这个轮次（Round）中的抽象语法树节点，</span></span><br><span class="line"><span class="comment">     *                 每个语法树节点在这里都表示为一个Element。</span></span><br><span class="line"><span class="comment">     *                 在javax.lang.model.ElementKind中定义了18类Element。</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> false</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">process</span><span class="params">(Set&lt;? extends TypeElement&gt; annotations, RoundEnvironment roundEnv)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (!roundEnv.processingOver()) &#123;</span><br><span class="line">            roundEnv.getRootElements().forEach(element -&gt; nameChecker.checkNames(element));</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="命名检查器NameChecker"><a href="#命名检查器NameChecker" class="headerlink" title="命名检查器NameChecker"></a>命名检查器NameChecker</h4><p>它通过一个继承于<code>javax.lang.model.util.ElementScanner8</code>的NameCheckScanner类，以Visitor模式来完成对语法树的遍历，分别执行visitType()、visitVariable()和visitExecutable()方法来访问类、字段和方法，这3个visit*()方法对各自的命名规则做相应的检查，checkCamelCase()与checkAllCaps()方法则用于实现驼式命名法和全大写命名规则的检查。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.bubble.processor;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.annotation.processing.Messager;</span><br><span class="line"><span class="keyword">import</span> javax.annotation.processing.ProcessingEnvironment;</span><br><span class="line"><span class="keyword">import</span> javax.lang.model.element.*;</span><br><span class="line"><span class="keyword">import</span> javax.lang.model.util.ElementScanner8;</span><br><span class="line"><span class="keyword">import</span> java.util.EnumSet;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="keyword">static</span> javax.tools.Diagnostic.Kind.WARNING;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 检查程序名称规范的编译器插件：</span></span><br><span class="line"><span class="comment"> * 如果程序命名不符合规范，会输出一个编译器的WARNING信息</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> wugang</span></span><br><span class="line"><span class="comment"> * date: 2020-07-28 16:27</span></span><br><span class="line"><span class="comment"> **/</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">NameChecker</span> </span>&#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Messager用于向编译器发送信息</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> Messager messager;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> NameCheckScanner nameCheckScanner = <span class="keyword">new</span> NameCheckScanner();</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">NameChecker</span><span class="params">(ProcessingEnvironment processingEnv)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.messager = processingEnv.getMessager();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 对Java程序命名进行检查，根据《Java语言规范》Java程序命名应当符合下列格式：</span></span><br><span class="line"><span class="comment">     * - 类或接口：符合驼式命名法，首字母大写。</span></span><br><span class="line"><span class="comment">     * - 方法：符合驼式命名法，首字母小写。</span></span><br><span class="line"><span class="comment">     * - 字段：</span></span><br><span class="line"><span class="comment">     * 类或实例变量。符合驼式命名法，首字母小写。</span></span><br><span class="line"><span class="comment">     * 常量。要求全部由大写字母或下划线构成，并且第一个字符不能是下划线。</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> element</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">checkNames</span><span class="params">(Element element)</span> </span>&#123;</span><br><span class="line">        nameCheckScanner.scan(element);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 名称检查器实现类。</span></span><br><span class="line"><span class="comment">     * 继承了ElementScanner8，会以Visitor模式访问抽象语法树中的元素。</span></span><br><span class="line"><span class="comment">     * 命名规则判断中将不对语法树进行修改，因此全部返回值都为null。</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="class"><span class="keyword">class</span> <span class="title">NameCheckScanner</span> <span class="keyword">extends</span> <span class="title">ElementScanner8</span>&lt;<span class="title">Void</span>, <span class="title">Void</span>&gt; </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * 用于检查Java类</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> Void <span class="title">visitType</span><span class="params">(TypeElement e, Void p)</span> </span>&#123;</span><br><span class="line">            scan(e.getTypeParameters(), p);</span><br><span class="line">            checkCamelCase(e, <span class="keyword">true</span>);</span><br><span class="line">            <span class="keyword">super</span>.visitType(e, p);</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * 检查方法名是否合法</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> Void <span class="title">visitExecutable</span><span class="params">(ExecutableElement e, Void p)</span> </span>&#123;</span><br><span class="line">            <span class="keyword">if</span> (e.getKind() == ElementKind.METHOD) &#123;</span><br><span class="line">                Name name = e.getSimpleName();</span><br><span class="line">                <span class="keyword">if</span> (name.contentEquals(e.getEnclosingElement().getSimpleName())) &#123;</span><br><span class="line">                    messager.printMessage(WARNING, <span class="string">"一个普通方法["</span> + name + <span class="string">"]不应当与类名重复，避免与构造函数产生冲突"</span>);</span><br><span class="line">                    checkCamelCase(e, <span class="keyword">false</span>);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">super</span>.visitExecutable(e, p);</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * 检查变量命名是否合法</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> Void <span class="title">visitVariable</span><span class="params">(VariableElement e, Void p)</span> </span>&#123;</span><br><span class="line">            <span class="comment">// 如果这个Variable是枚举或常量，则按大写命名检查，否则按照驼式命名法规则检查</span></span><br><span class="line">            <span class="keyword">if</span> (e.getKind() == ElementKind.ENUM_CONSTANT || e.getConstantValue() != <span class="keyword">null</span> || heuristicallyConstant(e)) &#123;</span><br><span class="line">                checkAllCaps(e);</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                checkCamelCase(e, <span class="keyword">false</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * 判断一个变量是否是常量</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        <span class="function"><span class="keyword">private</span> <span class="keyword">boolean</span> <span class="title">heuristicallyConstant</span><span class="params">(VariableElement e)</span> </span>&#123;</span><br><span class="line">            <span class="keyword">if</span> (e.getEnclosingElement().getKind() == ElementKind.INTERFACE) &#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span> (e.getKind() == ElementKind.FIELD || e.getModifiers().containsAll(EnumSet.of(Modifier.PUBLIC, Modifier.STATIC, Modifier.FINAL))) &#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * 检查传入的Element是否符合驼式命名法，如果不符合，则输出警告信息</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">checkCamelCase</span><span class="params">(Element e, <span class="keyword">boolean</span> initialCaps)</span> </span>&#123;</span><br><span class="line">            String name = e.getSimpleName().toString();</span><br><span class="line">            <span class="comment">// 前缀首字母大写</span></span><br><span class="line">            <span class="keyword">boolean</span> previousUpper = <span class="keyword">false</span>;</span><br><span class="line">            <span class="keyword">boolean</span> conventional = <span class="keyword">true</span>;</span><br><span class="line">            <span class="keyword">int</span> firstCodePoint = name.codePointAt(<span class="number">0</span>);</span><br><span class="line">            <span class="keyword">if</span> (Character.isUpperCase(firstCodePoint)) &#123;</span><br><span class="line">                previousUpper = <span class="keyword">true</span>;</span><br><span class="line">                <span class="keyword">if</span> (!initialCaps) &#123;</span><br><span class="line">                    messager.printMessage(WARNING, <span class="string">"名称["</span> + name + <span class="string">"]应当以小写字母开头"</span>, e);</span><br><span class="line">                    <span class="keyword">return</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span> (Character.isLowerCase(firstCodePoint)) &#123;</span><br><span class="line">                <span class="keyword">if</span> (initialCaps) &#123;</span><br><span class="line">                    messager.printMessage(WARNING, <span class="string">"名称["</span> + name + <span class="string">"]应当以大写字母开头"</span>, e);</span><br><span class="line">                    <span class="keyword">return</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                conventional = <span class="keyword">false</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (conventional) &#123;</span><br><span class="line">                <span class="keyword">int</span> cp = firstCodePoint;</span><br><span class="line">                <span class="keyword">for</span> (<span class="keyword">int</span> i = Character.charCount(cp); i &lt; name.length(); i += Character.charCount(cp)) &#123;</span><br><span class="line">                    cp = name.codePointAt(i);</span><br><span class="line">                    <span class="keyword">if</span> (Character.isUpperCase(cp)) &#123;</span><br><span class="line">                        <span class="keyword">if</span> (previousUpper) &#123;</span><br><span class="line">                            conventional = <span class="keyword">false</span>;</span><br><span class="line">                            <span class="keyword">break</span>;</span><br><span class="line">                        &#125;</span><br><span class="line">                        previousUpper = <span class="keyword">true</span>;</span><br><span class="line">                    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                        previousUpper = <span class="keyword">false</span>;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> (!conventional) &#123;</span><br><span class="line">                messager.printMessage(WARNING, <span class="string">"名称["</span> + name + <span class="string">"]应当符合驼式命名法（Camel Case Names）"</span>, e);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * 大写命名检查，要求第一个字母必须是大写的英文字母，其余部分可以是下划线或大写字母</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">checkAllCaps</span><span class="params">(Element e)</span> </span>&#123;</span><br><span class="line">            String name = e.getSimpleName().toString();</span><br><span class="line">            <span class="keyword">boolean</span> conventional = <span class="keyword">true</span>;</span><br><span class="line">            <span class="keyword">int</span> firstCodePoint = name.codePointAt(<span class="number">0</span>);</span><br><span class="line">            <span class="keyword">if</span> (!Character.isUpperCase(firstCodePoint)) &#123;</span><br><span class="line">                conventional = <span class="keyword">false</span>;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="keyword">boolean</span> previousUnderscore = <span class="keyword">false</span>;</span><br><span class="line">                <span class="keyword">int</span> cp = firstCodePoint;</span><br><span class="line">                <span class="keyword">for</span> (<span class="keyword">int</span> i = Character.charCount(cp); i &lt; name.length(); i += Character.charCount(cp)) &#123;</span><br><span class="line">                    cp = name.codePointAt(i);</span><br><span class="line">                    <span class="keyword">if</span> (cp == (<span class="keyword">int</span>) <span class="string">'_'</span>) &#123;</span><br><span class="line">                        <span class="keyword">if</span> (previousUnderscore) &#123;</span><br><span class="line">                            conventional = <span class="keyword">false</span>;</span><br><span class="line">                            <span class="keyword">break</span>;</span><br><span class="line">                        &#125;</span><br><span class="line">                        previousUnderscore = <span class="keyword">true</span>;</span><br><span class="line">                    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                        previousUnderscore = <span class="keyword">false</span>;</span><br><span class="line">                        <span class="keyword">if</span> (!Character.isUpperCase(cp) &amp;&amp; !Character.isDigit(cp)) &#123;</span><br><span class="line">                            conventional = <span class="keyword">false</span>;</span><br><span class="line">                            <span class="keyword">break</span>;</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (!conventional) &#123;</span><br><span class="line">                messager.printMessage(WARNING, <span class="string">"常量["</span> + name + <span class="string">"]应当全部以大写字母或下划线命名，并且以字母开头"</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="编译测试"><a href="#编译测试" class="headerlink" title="编译测试"></a>编译测试</h2><h3 id="命名规范的“反面教材”代码"><a href="#命名规范的“反面教材”代码" class="headerlink" title="命名规范的“反面教材”代码"></a>命名规范的“反面教材”代码</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.bubble.processor;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 命名规范的“反面教材”代码：</span></span><br><span class="line"><span class="comment"> * 使用：</span></span><br><span class="line"><span class="comment"> * 可以通过Javac命令的“-processor”参数来执行编译时需要附带的注解处理器，</span></span><br><span class="line"><span class="comment"> * 如果有多个注解 处理器的话，用逗号分隔。</span></span><br><span class="line"><span class="comment"> * 还可以使用-XprintRounds和-XprintProcessorInfo参数来查看注解处理器运作的详细信息。</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> wugang</span></span><br><span class="line"><span class="comment"> * date: 2020-07-28 17:38</span></span><br><span class="line"><span class="comment"> **/</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">BADLY_NAMED_CODE</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">enum</span> colors &#123;</span><br><span class="line">        red, blue, green;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> _FORTY_TWO = <span class="number">42</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> NOT_A_CONSTANT = _FORTY_TWO;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">BADLY_NAMED_CODE</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">NOTcamelCASEmethodNAME</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="编译测试-1"><a href="#编译测试-1" class="headerlink" title="编译测试"></a>编译测试</h3><p>们可以通过<code>Javac</code>命令的<code>-processor参数</code>来执行编译时需要附带的注解处理器，如果有多个注解处理器的话，用逗号分隔。<br>还可以使用-XprintRounds和-XprintProcessorInfo参数来查看注解处理器运 作的详细信息。</p><p>编译：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">cd code/java/multi-dev/data-structure/src/main/java/</span><br><span class="line">javac com/bubble/processor/NameChecker.java</span><br><span class="line">javac com/bubble/processor/NameCheckProcessor.java</span><br><span class="line"></span><br><span class="line">javac -processor com.bubble.processor.NameCheckProcessor com/bubble/processor/BADLY_NAMED_CODE.java</span><br></pre></td></tr></table></figure><p>输出：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">com&#x2F;bubble&#x2F;processor&#x2F;BADLY_NAMED_CODE.java:13: 警告: 名称[BADLY_NAMED_CODE]应当符合驼式命名法（Camel Case Names）</span><br><span class="line">public class BADLY_NAMED_CODE &#123;</span><br><span class="line">       ^</span><br><span class="line">com&#x2F;bubble&#x2F;processor&#x2F;BADLY_NAMED_CODE.java:15: 警告: 名称[colors]应当以大写字母开头</span><br><span class="line">    enum colors &#123;</span><br><span class="line">    ^</span><br><span class="line">警告: 常量[red]应当全部以大写字母或下划线命名，并且以字母开头</span><br><span class="line">警告: 常量[blue]应当全部以大写字母或下划线命名，并且以字母开头</span><br><span class="line">警告: 常量[green]应当全部以大写字母或下划线命名，并且以字母开头</span><br><span class="line">警告: 常量[_FORTY_TWO]应当全部以大写字母或下划线命名，并且以字母开头</span><br><span class="line">警告: 一个普通方法[BADLY_NAMED_CODE]不应当与类名重复，避免与构造函数产生冲突</span><br><span class="line">com&#x2F;bubble&#x2F;processor&#x2F;BADLY_NAMED_CODE.java:22: 警告: 名称[BADLY_NAMED_CODE]应当以小写字母开头</span><br><span class="line">    protected void BADLY_NAMED_CODE() &#123;</span><br><span class="line">                   ^</span><br><span class="line">8 个警告</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
          <category> Tool </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> Tool </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>002 虚拟机对象</title>
      <link href="/ckd70wo7k0018qlyd6k1i1bxu/"/>
      <url>/ckd70wo7k0018qlyd6k1i1bxu/</url>
      
        <content type="html"><![CDATA[<p>本文主要讲述HotSpot虚拟机在Java堆中对象分配、布局和访问的全过程。</p><a id="more"></a><h1 id="虚拟机对象"><a href="#虚拟机对象" class="headerlink" title="虚拟机对象"></a>虚拟机对象</h1><h2 id="对象的创建"><a href="#对象的创建" class="headerlink" title="对象的创建"></a>对象的创建</h2><h3 id="对象的创建流程"><a href="#对象的创建流程" class="headerlink" title="对象的创建流程"></a>对象的创建流程</h3><ul><li>使用new指令来创建对象；</li><li>首先检查这个指令的参数是否在常量池中定位到一个类的符号引用，并检查这个符号引用代表的类是否已经被加载、解析和初始化；</li><li>如果没有，说明是新建，就先执行相应的类加载的过程；</li><li>类加载检查通过后，为虚拟机新生对象分配堆内存；</li><li>堆内存分配成功后，再把分配到的内存空间（不包括对象头）都初始化为零值；</li><li>再执行类文件的<init>()方法，按照Dev的设定来进行构造，把对象进行初始化，得到一个真正的对象。</init></li></ul><h2 id="对象的内存布局"><a href="#对象的内存布局" class="headerlink" title="对象的内存布局"></a>对象的内存布局</h2><p>在HotSpot虚拟机里，对象在堆内存中的存储布局可以划分为三个部分：<code>对象头(Header)</code>、<code>实例数据(Instance Data)</code>和<code>对齐填充(Padding)</code>。</p><h3 id="对象头（Header）"><a href="#对象头（Header）" class="headerlink" title="对象头（Header）"></a>对象头（Header）</h3><p>对象头包括两类信息：一是<code>用于存储对象自身的运行时数据</code>；二是<code>类型指针</code>。</p><h4 id="1、存储对象自身的运行时数据"><a href="#1、存储对象自身的运行时数据" class="headerlink" title="1、存储对象自身的运行时数据"></a>1、存储对象自身的运行时数据</h4><p>如HashCode、GC分代年龄、锁状态标志、线程持有的锁、偏向线程ID、偏向时间戳等。<br>这部分数据的长度在32位和64位的虚拟机(未开启压缩指针)中分别为32个比特和64个比特，官方称它为<code>Mark Word</code>。</p><blockquote><p><strong>Mark Word</strong>被设计成一个有着动态定义的数据结构，以便在极小的空间内存储尽量多的数据，根据对象的状态复用自己的存储空间。</p></blockquote><h4 id="2、类型指针"><a href="#2、类型指针" class="headerlink" title="2、类型指针"></a>2、类型指针</h4><p>对象头的另外一部分是类型指针，即对象指向它的类型元数据的指针，Java虚拟机通过这个指针来确定该对象是哪个类的实例。</p><blockquote><p>并不是所有的虚拟机实现都必须在对象数据上保留类型指针，换句话说，查找对象的元数据信息并不一定要经过对象本身</p></blockquote><blockquote><p>如果对象是一个Java数组，那在对象头中还必须有一块用于记录数组长度的数。<br>因为虚拟机可以通过普通 Java对象的元数据信息确定Java对象的大小，但是如果数组的长度是不确定的，将无法通过元数据中的 信息推断出数组的大小。</p></blockquote><h3 id="实例数据（Instance-Data）"><a href="#实例数据（Instance-Data）" class="headerlink" title="实例数据（Instance Data）"></a>实例数据（Instance Data）</h3><p>实例数据是对象真正存储等有效信息。也就是我们所定义的各种类型的字段内容，<br>无论是从父类继承下来的，还是在子类中定义的字段都必须记录起来。这部分的存储顺序会受到<strong>虚拟机分配策略参数</strong>(<code>-XX:FieldsAllocationStyle</code>参数)和<strong>字段在Java源码中定义顺序</strong>的影响。</p><blockquote><p>HotSpot虚拟机默认的分配顺序为longs/doubles、ints、shorts/chars、bytes/booleans、oops(Ordinary Object Pointers，OOPs)，<br>由上可知：相同宽度的字段总是被分配到一起存放，在满足这个前提条件的情况下，在父类中定义的变量会出现在子类之前。<br>如果HotSpot虚拟机的 <code>+XX:CompactFields</code>参数值为true(默认就为true)，那子类之中较窄的变量也允许插入父类变量的空隙之中，以节省出一点点空间。</p></blockquote><h3 id="对齐填充（Padding）"><a href="#对齐填充（Padding）" class="headerlink" title="对齐填充（Padding）"></a>对齐填充（Padding）</h3><p>对齐填充不是必然存在的，它仅仅起着占位符的作用。<br>由于HotSpot虚拟机的自动内存管理系统要求对象起始地址必须是<code>8字节的整数倍</code>。<br>换句话说就是<strong>任何对象的大小都必须是8字节的整数倍</strong>。<br>对象头部分已经被精心设计成正好是8字节的倍数(1倍或者2倍)，因此，如果对象实例数据部分没有对齐的话，就需要通过对齐填充来补全。</p><h2 id="对象的访问定位"><a href="#对象的访问定位" class="headerlink" title="对象的访问定位"></a>对象的访问定位</h2><p>创建了对象就需要使用它，Java Dev会通过栈上的reference数据来操作堆上的具体对象。<br>由于<code>reference类型</code>在《Java虚拟机规范》里面只规定了它<strong>是一个指向对象的引用</strong>，并没有定义这个引用应该通过什么方式去定位、访问到堆中对象的具体位置。<br>所以对象访问方式也是由虚拟机实现而定的，主流的访问方式主要有<code>使用句柄</code>和<code>直接指针</code>两种。</p><h3 id="两种方式"><a href="#两种方式" class="headerlink" title="两种方式"></a>两种方式</h3><h4 id="使用句柄访问对象"><a href="#使用句柄访问对象" class="headerlink" title="使用句柄访问对象"></a>使用句柄访问对象</h4><p>如果使用句柄访问的话，Java堆中将可能会划分出一块内存来作为句柄池，reference中存储的就是<strong>对象的句柄地址</strong>，而<strong>句柄中包含了对象实例数据与类型数据各自具体的地址信息</strong>。</p><p><img src="https://cdn.jsdelivr.net/gh/bubblewu/cdn/images/jvm/jubing.png" alt="使用句柄访问对象"></p><h4 id="使用直接指针访问对象"><a href="#使用直接指针访问对象" class="headerlink" title="使用直接指针访问对象"></a>使用直接指针访问对象</h4><p>如果使用直接指针访问的话，Java堆中对象的内存布局就必须考虑如何放置访问类型数据的相关信息，reference中<strong>存储的直接就是对象地址</strong>，如果只是访问对象本身的话，就不需要多一次间接访问的开销。</p><p><img src="https://cdn.jsdelivr.net/gh/bubblewu/cdn/images/jvm/obj-zhizhen.png" alt="使用直接指针访问对象"></p><h3 id="对比"><a href="#对比" class="headerlink" title="对比"></a>对比</h3><ul><li>使用句柄来访问的最大好处就是reference中存储的是稳定句柄地址，在对象被移动（垃圾收集时移动对象是非常普遍的行为）时只会改变句柄中的实例数据指针，而reference本身不需要被修改。</li><li>使用直接指针来访问最大的好处就是速度更快，它节省了一次指针定位的时间开销，由于对象访 问在Java中非常频繁，因此这类开销积少成多也是一项极为可观的执行成本。</li></ul>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
          <category> JVM </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> JVM </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>String类的intern()方法</title>
      <link href="/ckd70wo6w0009qlyd1yu5dnit/"/>
      <url>/ckd70wo6w0009qlyd1yu5dnit/</url>
      
        <content type="html"><![CDATA[<h2 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h2><p><code>String::intern()</code>是一个Native方法，用于返回该对象在常量池中的引用。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">native</span> String <span class="title">intern</span><span class="params">()</span></span>;</span><br></pre></td></tr></table></figure><p>作用：如果字符串常量池中已经包含一个等于该String对象的字符串，则返回代表池中这个字符串的String对象的引用；否则，会将此String对象包含的字符串添加到常量池中，并且返回此String对象的引用。</p><a id="more"></a><h2 id="案例"><a href="#案例" class="headerlink" title="案例"></a>案例</h2><ul><li>示例1：</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * - 在JDK 6中运行，会得到三个false；</span></span><br><span class="line"><span class="comment"> * 在JDK 6中，intern()方法会把首次遇到的字符串实例复制到永久代（方法区）的字符串常量池中存储，</span></span><br><span class="line"><span class="comment"> * 返回的也是永久代里面这个字符串实例的引用，而由StringBuilder创建的字符串对象实例在Java堆上，</span></span><br><span class="line"><span class="comment"> * 所以必然不可能是同一个引用，结果将返回false。</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * - 而在JDK 7后中运行，会得到一个true、一个false和一个true；</span></span><br><span class="line"><span class="comment"> * 因为JDK7中，intern()方法实现就不需要再拷贝字符串的实例到永久代了，既然字符串常量池已经移到Java堆中，</span></span><br><span class="line"><span class="comment"> * 那只需要在常量池里记录一下首次出现的实例引用即可。</span></span><br><span class="line"><span class="comment"> * 因此intern()返回的引用和由StringBuilder创建的那个字符串实例就是同一个。</span></span><br><span class="line"><span class="comment"> * 而对str2比较返回false，这是因为java这个字符串在执行StringBuilder()之前就已经出现过了，(在加载sun.misc.Version这个类的时候进入常量池的)</span></span><br><span class="line"><span class="comment"> * 字符串常量池中已经有它的引用，不符合intern()方法要求“首次遇到”的原则，“JVM调优”这个字符串则是首次出现的，因此结果返回true。</span></span><br><span class="line"><span class="comment"> * 而str3和str1一样，"JDKJVM"这个字符串则是首次出现。</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">compare</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    String str1 = <span class="keyword">new</span> StringBuilder().append(<span class="string">"JVM"</span>).append(<span class="string">"调优"</span>).toString();</span><br><span class="line">    System.out.println(str1.intern() == str1);</span><br><span class="line">    <span class="comment">// java这个字符串在执行StringBuilder()之前就已经出现过了，在加载sun.misc.Version这个类的时候进入常量池的。</span></span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">     * 参考：https://www.zhihu.com/question/51102308/answer/124441115</span></span><br><span class="line"><span class="comment">     * sun.misc.Version类会在JDK类库的初始化过程中被加载并初始化，</span></span><br><span class="line"><span class="comment">     * 而在初始化时它需要对静态常量字段根据指定的常量值（ConstantValue）做默认初始化，</span></span><br><span class="line"><span class="comment">     * 此时被 sun.misc.Version.launcher 静态常量字段所引用的"java"字符串字面量就被intern到HotSpot VM的字符串常量池StringTable里了。</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    String str2 = <span class="keyword">new</span> StringBuilder().append(<span class="string">"ja"</span>).append(<span class="string">"va"</span>).toString();</span><br><span class="line">    System.out.println(str2.intern() == str2);</span><br><span class="line">    <span class="comment">// 而JDKJVM这个字符串则是首次出现</span></span><br><span class="line">    String str3 = <span class="keyword">new</span> StringBuilder().append(<span class="string">"JDK"</span>).append(<span class="string">"JVM"</span>).toString();</span><br><span class="line">    System.out.println(str3.intern() == str3);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * java中的String是引用类型。创建的String对象，实际上存储的是一个地址。</span></span><br><span class="line"><span class="comment"> * 所以下面a和b都是引用类型，其存储的是字符串的地址。它们本身存储在Java虚拟机栈的局部变量表中。</span></span><br><span class="line"><span class="comment"> * - a：直接将字符串存储在常量池中，然后将a指向常量池种中的"JVM"。</span></span><br><span class="line"><span class="comment"> * - b：先将字符串"JVM"存储在常量池中，然后在heap中创建一个对象，该对象指向常量池中的"JVM"，最后将b指向heap中创建的这个对象。</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * 也就是说，a和b存储的内容是一样的，都是"JVM"，但地址不一样：a中保存的是常量池中"JVM"的地址，b保存的是heap中那个对象的地址，</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * 双等于号"=="比较的是地址，equals()比较的是内容。</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">compareStr</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    String a = <span class="string">"JVM"</span>;</span><br><span class="line">    <span class="comment">// new一个对象</span></span><br><span class="line">    String b = <span class="keyword">new</span> String(<span class="string">"JVM"</span>);</span><br><span class="line">    <span class="comment">// == 比较地址是否相等</span></span><br><span class="line">    <span class="comment">// 都在运行时常量池中</span></span><br><span class="line">    System.out.println(<span class="string">"JVM"</span> == a); <span class="comment">// true</span></span><br><span class="line">    System.out.println(a.intern() == a); <span class="comment">// true</span></span><br><span class="line">    <span class="comment">// a为字符字面量（存储在运行时常量池中），b为对象（存储在堆中），所以不等。</span></span><br><span class="line">    System.out.println(a == b); <span class="comment">// false</span></span><br><span class="line">    System.out.println(a.intern() == b); <span class="comment">// false</span></span><br><span class="line"></span><br><span class="line">    System.out.println(a.equals(b));  <span class="comment">// true</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>示例2：<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">/*</span></span><br><span class="line"><span class="comment">         双等号"=="比较的是地址；equals()比较的是内容。</span></span><br><span class="line"><span class="comment">        */</span></span><br><span class="line">        String s1 = <span class="string">"abc"</span>;</span><br><span class="line">        String s2 = <span class="string">"abc"</span>;</span><br><span class="line">        System.out.println(s1 == s2); <span class="comment">// true</span></span><br><span class="line">        System.out.println(s1.equals(s2)); <span class="comment">// true</span></span><br><span class="line"></span><br><span class="line">        String s3 = <span class="keyword">new</span> String(<span class="string">"abc"</span>);</span><br><span class="line">        System.out.println(s1 == s3); <span class="comment">// false</span></span><br><span class="line">        System.out.println(s1.equals(s3)); <span class="comment">// true</span></span><br><span class="line">        System.out.println(s1 == s3.intern()); <span class="comment">// true</span></span><br><span class="line"></span><br><span class="line">        String s4 = <span class="keyword">new</span> String(<span class="string">"abc"</span>);</span><br><span class="line">        System.out.println(s3 == s4);  <span class="comment">// false</span></span><br><span class="line">        System.out.println(s3.intern() == s4.intern());  <span class="comment">// true</span></span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure></li></ul>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>基于Neo4j的时光网电影数据可视化【附源码】</title>
      <link href="/ckd70wo74000fqlydd4c020y6/"/>
      <url>/ckd70wo74000fqlydd4c020y6/</url>
      
        <content type="html"><![CDATA[<h1 id="基于Neo4j的电影数据可视化"><a href="#基于Neo4j的电影数据可视化" class="headerlink" title="基于Neo4j的电影数据可视化"></a>基于Neo4j的电影数据可视化</h1><p>本文主要内容为：</p><ul><li>基于requests + BeautifulSoup抓取时光网电影数据；</li><li>基于电影数据构建电影和关系实体信息；</li><li>数据导入neo4j进行存储分析；</li><li>基于Bottle框架的对neo4j数据进行查询可视化展示。</li></ul><p>效果展示：<br><img src="https://cdn.jsdelivr.net/gh/bubblewu/cdn/images/neo4j/web-demo.png" alt="效果展示"></p><a id="more"></a><h2 id="环境配置"><a href="#环境配置" class="headerlink" title="环境配置"></a>环境配置</h2><h3 id="新建虚拟环境并安装所需包"><a href="#新建虚拟环境并安装所需包" class="headerlink" title="新建虚拟环境并安装所需包"></a>新建虚拟环境并安装所需包</h3><ul><li>新建虚拟环境：<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"># 查看本机已经安装的python虚拟环境</span><br><span class="line">conda env list</span><br><span class="line"># 新建graph-37环境</span><br><span class="line">conda create -n graph-37 python&#x3D;3.7</span><br><span class="line"># 生效新建的虚拟环境</span><br><span class="line">conda activate graph-37</span><br><span class="line">## 退出</span><br><span class="line">#conda deactivate</span><br></pre></td></tr></table></figure></li><li>安装所需包：<br>根据requirements.txt文件来安装：<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip install -r requirements.txt</span><br></pre></td></tr></table></figure>requirements.txt文件：<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">beautifulsoup4&#x3D;&#x3D;4.9.1</span><br><span class="line">bs4&#x3D;&#x3D;0.0.1</span><br><span class="line">certifi&#x3D;&#x3D;2020.4.5.1</span><br><span class="line">chardet&#x3D;&#x3D;3.0.4</span><br><span class="line">Click&#x3D;&#x3D;7.0</span><br><span class="line">colorama&#x3D;&#x3D;0.4.3</span><br><span class="line">et-xmlfile&#x3D;&#x3D;1.0.1</span><br><span class="line">idna&#x3D;&#x3D;2.9</span><br><span class="line">jdcal&#x3D;&#x3D;1.4.1</span><br><span class="line">lxml&#x3D;&#x3D;4.5.1</span><br><span class="line">neobolt&#x3D;&#x3D;1.7.17</span><br><span class="line">neotime&#x3D;&#x3D;1.7.4</span><br><span class="line">numpy&#x3D;&#x3D;1.18.5</span><br><span class="line">openpyxl&#x3D;&#x3D;3.0.3</span><br><span class="line">pandas&#x3D;&#x3D;1.0.4</span><br><span class="line">prompt-toolkit&#x3D;&#x3D;2.0.10</span><br><span class="line">py2neo&#x3D;&#x3D;4.3.0</span><br><span class="line">Pygments&#x3D;&#x3D;2.3.1</span><br><span class="line">python-dateutil&#x3D;&#x3D;2.8.1</span><br><span class="line">pytz&#x3D;&#x3D;2020.1</span><br><span class="line">requests&#x3D;&#x3D;2.23.0</span><br><span class="line">six&#x3D;&#x3D;1.15.0</span><br><span class="line">soupsieve&#x3D;&#x3D;2.0.1</span><br><span class="line">urllib3&#x3D;&#x3D;1.24.3</span><br><span class="line">wcwidth&#x3D;&#x3D;0.2.4</span><br></pre></td></tr></table></figure></li></ul><h2 id="数据获取"><a href="#数据获取" class="headerlink" title="数据获取"></a>数据获取</h2><p>本文数据来自<a href="http://www.mtime.com/top/movie/top100/" target="_blank" rel="external nofollow noopener noreferrer">时光网电影Top100</a>。<br>基于python对该源进行数据抓取，并将数据生成相应的实体和关系：<br>可参考：<a href="https://github.com/bubblewu/movie-neo4j/blob/master/mtime/mtime_main.py" target="_blank" rel="external nofollow noopener noreferrer">GitHub：时光网数据抓取处理</a></p><p>实体和关系如下：：</p><ul><li><p>电影：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">index:ID,rank,src,name,movie_en,year,image,:LABEL</span><br><span class="line">10000,1,http:&#x2F;&#x2F;movie.mtime.com&#x2F;12231&#x2F;,肖申克的救赎,The Shawshank Redemption,1994,http:&#x2F;&#x2F;img31.mtime.cn&#x2F;mt&#x2F;2014&#x2F;03&#x2F;07&#x2F;123549.37376649_96X128.jpg,电影表</span><br><span class="line">10001,2,http:&#x2F;&#x2F;movie.mtime.com&#x2F;99547&#x2F;,盗梦空间,Inception,2010,http:&#x2F;&#x2F;img31.mtime.cn&#x2F;mt&#x2F;2014&#x2F;01&#x2F;06&#x2F;105446.89493583_96X128.jpg,电影表</span><br><span class="line">...</span><br></pre></td></tr></table></figure></li><li><p>演员：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">index:ID,actor,:LABEL</span><br><span class="line">30000,杰伊·巴鲁切尔,演员表</span><br><span class="line">30001,维果·莫腾森,演员表</span><br><span class="line">30002,布拉德·皮特,演员表</span><br><span class="line">30003,李·科布,演员表</span><br><span class="line">...</span><br></pre></td></tr></table></figure></li><li><p>导演：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">index:ID,director,:LABEL</span><br><span class="line">20000,彼得·索恩,导演表</span><br><span class="line">20001,克里斯托弗·诺兰,导演表</span><br><span class="line">20002,朴赞郁,导演表</span><br><span class="line">20003,赛尔乔·莱昂内,导演表</span><br><span class="line">...</span><br></pre></td></tr></table></figure></li></ul><p>关系：</p><ul><li><p>电影与导演关系：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">:START_ID,:END_ID,relation,:TYPE</span><br><span class="line">20069,10000,导演,导演</span><br><span class="line">20001,10001,导演,导演</span><br><span class="line">20010,10002,导演,导演</span><br><span class="line">...</span><br></pre></td></tr></table></figure></li><li><p>电影与主演关系：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">:START_ID,:END_ID,relation,:TYPE</span><br><span class="line">30156,10000,主演,主演</span><br><span class="line">30026,10000,主演,主演</span><br><span class="line">30063,10001,主演,主演</span><br><span class="line">30031,10001,主演,主演</span><br><span class="line">...</span><br></pre></td></tr></table></figure></li><li><p>导演和演员关系：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">:START_ID,:END_ID,relation,:TYPE</span><br><span class="line">20069,30156,相关,相关</span><br><span class="line">20069,30026,相关,相关</span><br><span class="line">20001,30063,相关,相关</span><br><span class="line">...</span><br></pre></td></tr></table></figure></li></ul><h2 id="Neo4j存储"><a href="#Neo4j存储" class="headerlink" title="Neo4j存储"></a>Neo4j存储</h2><h3 id="数据导入"><a href="#数据导入" class="headerlink" title="数据导入"></a>数据导入</h3><p>必须停止neo4j；只能生成新的数据库，而不能在已存在的数据库中插入数据。</p><p>通过下面的命令导入定义好的实体和关系数据：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line">#!&#x2F;bin&#x2F;sh</span><br><span class="line"># 脚本来执行将csv文件（节点和关系）导入neo4j</span><br><span class="line"># 注意：必须停止neo4j；只能生成新的数据库，而不能在已存在的数据库中插入数据。</span><br><span class="line"></span><br><span class="line">db_name&#x3D;MovieMTime.db</span><br><span class="line">neo4j_path&#x3D;&#x2F;Users&#x2F;wugang&#x2F;env&#x2F;neo4j-community-4.0.4</span><br><span class="line">base_path&#x3D;&#x2F;Users&#x2F;wugang&#x2F;code&#x2F;python&#x2F;moive-kg&#x2F;data&#x2F;mtime</span><br><span class="line"></span><br><span class="line">import() &#123;</span><br><span class="line">  cd $&#123;neo4j_path&#125;</span><br><span class="line">  .&#x2F;bin&#x2F;neo4j stop</span><br><span class="line">  rm -rf &#x2F;Users&#x2F;wugang&#x2F;env&#x2F;neo4j-community-4.0.4&#x2F;data&#x2F;databases&#x2F;$&#123;db_name&#125;</span><br><span class="line">  .&#x2F;bin&#x2F;neo4j-admin import --verbose \</span><br><span class="line">                        --database $&#123;db_name&#125; \</span><br><span class="line">                        --id-type STRING \</span><br><span class="line">                        --input-encoding&#x3D;UTF-8 \</span><br><span class="line">                        --ignore-extra-columns&#x3D;false \</span><br><span class="line">                        --trim-strings&#x3D;true \</span><br><span class="line">                        --delimiter&#x3D;, \</span><br><span class="line">                        --array-delimiter&#x3D;&#39;;&#39; \</span><br><span class="line">                        --processors&#x3D;4 \</span><br><span class="line">                        --nodes $&#123;base_path&#125;&#x2F;mtime_movie_entity.csv \</span><br><span class="line">                        --nodes $&#123;base_path&#125;&#x2F;mtime_actor_entity.csv \</span><br><span class="line">                        --nodes $&#123;base_path&#125;&#x2F;mtime_director_entity.csv \</span><br><span class="line">                        --relationships $&#123;base_path&#125;&#x2F;mtime_director_actor_relationship.csv \</span><br><span class="line">                        --relationships $&#123;base_path&#125;&#x2F;mtime_movie_actor_relationship.csv  \</span><br><span class="line">                        --relationships $&#123;base_path&#125;&#x2F;mtime_movie_director_relationship.csv</span><br><span class="line">  # 需要修改neo4j.conf配置文件中的默认db才能展示新建的db，否则还是默认的。（只能指定一个db）</span><br><span class="line">#  .&#x2F;bin&#x2F;neo4j start</span><br><span class="line">#  .&#x2F;bin&#x2F;neo4j stop</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">import</span><br></pre></td></tr></table></figure><h3 id="数据查看"><a href="#数据查看" class="headerlink" title="数据查看"></a>数据查看</h3><p>修改配置将默认db改为刚才新建的电影的db，否则还是默认的库。<br>vim conf/neo4j.conf</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">dbms.active_database&#x3D;MovieMTime.db</span><br></pre></td></tr></table></figure><p>启动neo4j服务（neo4j版本为4.0.3）:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">.&#x2F;bin&#x2F;neo4j start</span><br></pre></td></tr></table></figure><p>进入管理界面：<a href="http://127.0.0.1:7474/" target="_blank" rel="external nofollow noopener noreferrer">http://127.0.0.1:7474</a></p><p>查看实体数据：<br><img src="https://cdn.jsdelivr.net/gh/bubblewu/cdn/images/neo4j/neo4j-moviemtime-movie.png" alt="实体数据可视化"></p><p>查看关系数据：<br><img src="https://cdn.jsdelivr.net/gh/bubblewu/cdn/images/neo4j/moviemtime-relationships.png" alt="关系数据可视化"></p><h2 id="数据查询可视化"><a href="#数据查询可视化" class="headerlink" title="数据查询可视化"></a>数据查询可视化</h2><p>查询可视化基于Bottle框架的Web服务。<br>参考：<a href="https://github.com/bubblewu/movie-neo4j/blob/master/mtime/mtime_graph_show.py" target="_blank" rel="external nofollow noopener noreferrer">GitHub: 可视化</a></p><p>效果如下图：<br><img src="https://cdn.jsdelivr.net/gh/bubblewu/cdn/images/neo4j/moviemtime-web.png" alt="电影信息可视化"></p><h2 id="源码地址"><a href="#源码地址" class="headerlink" title="源码地址"></a>源码地址</h2><ul><li><a href="https://github.com/bubblewu/movie-neo4j" target="_blank" rel="external nofollow noopener noreferrer">movie-neo4j</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> Neo4j </category>
          
          <category> Python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Neo4j </tag>
            
            <tag> Python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>001 运行时数据区域和OutOfMemoryError异常</title>
      <link href="/ckd70wo7m001aqlyd0ltzhlb8/"/>
      <url>/ckd70wo7m001aqlyd0ltzhlb8/</url>
      
        <content type="html"><![CDATA[<p>本文主要讲解JVM运行时数据区域，并通过简单的案例来实现说明各个区域中的常见OOM异常。</p><a id="more"></a><h1 id="运行时数据区域"><a href="#运行时数据区域" class="headerlink" title="运行时数据区域"></a>运行时数据区域</h1><p>运行时数据区域图：<br><img src="https://cdn.jsdelivr.net/gh/bubblewu/cdn/images/jvm/jvm-rda.png" alt="运行时数据区域图"></p><p>Java内存区域：<br>JVM内存区域主要分为<code>线程私有区域</code>【程序计数器、虚拟机栈、本地方法栈】、<code>线程共享区域</code>【Java堆、方法区】、直接内存。<br><img src="https://cdn.jsdelivr.net/gh/bubblewu/cdn/images/jvm/jvm-mind.png" alt="JVM内存导图"></p><ul><li><p>线程私有区域：<br>线程私有数据区域生命周期与线程相同, 依赖用户线程的启动/结束 而 创建/销毁(在Hotspot VM内,每个线程都与操作系统的本地线程直接映射, 因此这部分内存区域的存/否跟随本地线程的生/死对应)。</p></li><li><p>线程共享区域：<br>线程共享区域随虚拟机的启动/关闭而创建/销毁。</p></li></ul><p><img src="https://cdn.jsdelivr.net/gh/bubblewu/cdn/images/jvm/jvm-rda2.png" alt="运行时数据区域图2"></p><h1 id="JVM主要区域溢出异常"><a href="#JVM主要区域溢出异常" class="headerlink" title="JVM主要区域溢出异常"></a>JVM主要区域溢出异常</h1><p>在Java虚拟机规范中规定，除了<code>程序计数器</code>外，虚拟机的其他几个运行时区域都有发生OOM异常的可能，如：<strong>方法区（运行时常量池）、Java堆、虚拟机栈（局部变量表）、本地方法栈和直接内存。</strong></p><p>下面将通过案例来验证各个运行时区域的溢出异常，并分析我们来如何解决和避免这些异常。</p><blockquote><p>注：下面的代码基于<strong>JDK8</strong>进行开发测试；</p></blockquote><h2 id="线程独占区"><a href="#线程独占区" class="headerlink" title="线程独占区"></a>线程独占区</h2><h3 id="程序计数器（无OOM）"><a href="#程序计数器（无OOM）" class="headerlink" title="程序计数器（无OOM）"></a>程序计数器（无OOM）</h3><p>程序计数器（Program Counter Register）是一块较小的内存空间, 是当前线程所执行的字节码的行号指示器，每条线程都要有一个独立的程序计数器，这类内存也称为<code>线程私有</code>的内存。</p><ul><li>正在执行java方法的话，计数器记录的是虚拟机字节码指令的地址(当前指令的地址)。</li><li>如果是Native方法，则为空（undefined）。</li></ul><p>这个内存区域是唯一一个在虚拟机中没有规定任何OutOfMemoryError 情况的区域。</p><h3 id="虚拟机栈和本地方法栈溢出"><a href="#虚拟机栈和本地方法栈溢出" class="headerlink" title="虚拟机栈和本地方法栈溢出"></a>虚拟机栈和本地方法栈溢出</h3><h4 id="虚拟机栈"><a href="#虚拟机栈" class="headerlink" title="虚拟机栈"></a>虚拟机栈</h4><p><strong>虚拟机栈描述的是<code>Java方法</code>执行的线程内存模型</strong>。</p><h5 id="栈帧（Stack-Frame）："><a href="#栈帧（Stack-Frame）：" class="headerlink" title="栈帧（Stack Frame）："></a><code>栈帧（Stack Frame）</code>：</h5><p>每个方法被执行的时候，Java虚拟机都会同步创建一个<code>栈帧</code>用于<strong>存储局部变量表、操作数栈、动态连接、方法出口等信息</strong>。<br>每一个方法被调用直至执行完毕的过程，就对应着一个栈帧在虚拟机栈中从入栈到出栈的过程。</p><p><img src="https://cdn.jsdelivr.net/gh/bubblewu/cdn/images/jvm/jvm-stack.png" alt="栈帧"></p><h5 id="局部变量表："><a href="#局部变量表：" class="headerlink" title="局部变量表："></a><code>局部变量表</code>：</h5><p>局部变量表存放了编译期可知的：</p><ul><li>各种<code>Java虚拟机基本数据类型</code>：boolean、byte、char、short、int、 float、long、double；</li><li><code>对象引用</code> ：reference类型，它并不等同于对象本身，可能是一个指向对象起始地址的引用指针，也可能是指向一个代表对象的句柄或者其他与此对象相关的位置；</li><li><code>returnAddress类型</code>：指向了一条字节码指令的地址。</li></ul><p>这些数据类型在局部变量表中的存储空间以<code>局部变量槽(Slot)</code>来表示。<br><strong>其中64位长度的long和double类型的数据会占用两个变量槽，其余的数据类型只占用一个</strong>。<br>局部变量表所需的内存空间在编译期间完成分配，当进入一个方法时，这个方法需要在栈帧中分配多大的局部变量空间是完全确定 的，<strong>在方法运行期间不会改变局部变量表的大小</strong>。</p><h5 id="两种异常：栈-堆溢出"><a href="#两种异常：栈-堆溢出" class="headerlink" title="两种异常：栈/堆溢出"></a>两种异常：栈/堆溢出</h5><ul><li>如果线程请求的栈深度大于虚拟机所允许的深度，将抛出<code>StackOverflowError异常</code>；</li><li>如果Java虚拟机栈容量可以动态扩展，当栈扩展时无法申请到足够的内存会抛出<code>OutOfMemoryError异常</code>。</li></ul><h4 id="虚拟机栈-amp-本地方法栈"><a href="#虚拟机栈-amp-本地方法栈" class="headerlink" title="虚拟机栈&amp;本地方法栈"></a>虚拟机栈&amp;本地方法栈</h4><p>Java虚拟机栈（Java Virtual Machine Stack）和本地方法栈（Native Method Stacks）非常相似，<code>都属于线程独占区</code>，区别是：</p><ul><li>虚拟机栈为虚拟机执行<code>Java方法（也就是字节码）服务</code>；</li><li>本地方法栈为虚拟机使用到的<code>本地方法（Native方法）服务</code>；</li></ul><p><strong>Hot-Spot虚拟机直接就把本地方法栈和虚拟机栈合二为一</strong>。与虚拟机栈一样，本地方法栈也会在栈深度溢出或者栈扩展失败时分别抛出<code>StackOverflowError</code>和<code>OutOfMemoryError</code>异常。</p><h4 id="虚拟机栈和本地方法栈溢出案例"><a href="#虚拟机栈和本地方法栈溢出案例" class="headerlink" title="虚拟机栈和本地方法栈溢出案例"></a>虚拟机栈和本地方法栈溢出案例</h4><h5 id="栈容量参数：-Xss"><a href="#栈容量参数：-Xss" class="headerlink" title="栈容量参数：-Xss"></a>栈容量参数：-Xss</h5><p>HotSpot虚拟机中并不区分虚拟机栈和本地方法栈，因此对于HotSpot来说，<code>-Xoss参数</code>(设置本地方法栈大小)虽然存在，但实际上是没有任何效果的，<code>栈容量只能由-Xss参数来设定</code>。</p><h5 id="栈-堆溢出的场景"><a href="#栈-堆溢出的场景" class="headerlink" title="栈/堆溢出的场景"></a>栈/堆溢出的场景</h5><p>《Java虚拟机规范》明确允许Java虚拟机实现自行选择是否支持栈的动态扩展，而HotSpot虚拟机的选择是不支持扩展。<br>所以除非<code>在创建线程申请内存时就因无法获得足够内存而出现 OutOfMemoryError异常</code>，否则<code>在线程运行时是不会因为扩展而导致内存溢出的，只会因为栈容量无法容纳新的栈帧而导致StackOverflowError异常</code>。</p><h5 id="测试案例"><a href="#测试案例" class="headerlink" title="测试案例"></a>测试案例</h5><p>将实验范围限制在<strong>单线程中操作</strong>，尝试下面两种行为是否能让HotSpot虚拟机产生OutOfMemoryError异常：</p><ul><li><p>使用<code>-Xss参数减少栈内存容量</code>。<br>结果：抛出StackOverflowError异常，异常出现时输出的堆栈深度相应缩小。 </p></li><li><p><code>定义大量的本地变量，增大此方法帧中本地变量表的长度</code>。<br>结果：抛出StackOverflowError异常，异常出现时输出的堆栈深度相应缩小。 </p></li></ul><h6 id="单线程下：使用-Xss参数减少栈内存容量（SOF异常）"><a href="#单线程下：使用-Xss参数减少栈内存容量（SOF异常）" class="headerlink" title="单线程下：使用-Xss参数减少栈内存容量（SOF异常）"></a>单线程下：使用<code>-Xss参数减少栈内存容量</code>（SOF异常）</h6><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Java虚拟机栈和本地方法机栈异常（单线程操作下）</span></span><br><span class="line"><span class="comment"> * VM Args: -Xss160k（Mac 64Bit要求最低栈内存为160K）</span></span><br><span class="line"><span class="comment"> * 使用-Xss参数减少栈内存容量。</span></span><br><span class="line"><span class="comment"> * 结果：抛出StackOverflowError异常，异常出现时输出的堆栈深度相应缩小。</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> wugang</span></span><br><span class="line"><span class="comment"> * date: 2020-06-04 15:23</span></span><br><span class="line"><span class="comment"> **/</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">VMStackSOF</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> stackLength = <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">stackLeak</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        stackLength++;</span><br><span class="line">        stackLeak();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        VMStackSOF stackSOF = <span class="keyword">new</span> VMStackSOF();</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            stackSOF.stackLeak();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Throwable e) &#123;</span><br><span class="line">            System.out.println(<span class="string">"stack length: "</span> + stackSOF.stackLength);</span><br><span class="line">            <span class="keyword">throw</span> e;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>输出：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">stack length: 773</span><br><span class="line">Exception in thread &quot;main&quot; java.lang.StackOverflowError</span><br><span class="line">at com.bubble.jvm.error.VMStackSOF.stackLeak(VMStackSOF.java:16)</span><br><span class="line">...</span><br></pre></td></tr></table></figure><h6 id="单线程下：定义大量的本地变量，增大此方法帧中本地变量表的长度（SOF异常）"><a href="#单线程下：定义大量的本地变量，增大此方法帧中本地变量表的长度（SOF异常）" class="headerlink" title="单线程下：定义大量的本地变量，增大此方法帧中本地变量表的长度（SOF异常）"></a>单线程下：定义大量的本地变量，增大此方法帧中本地变量表的长度（SOF异常）</h6><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Java虚拟机栈和本地方法机栈异常（单线程操作下）</span></span><br><span class="line"><span class="comment"> * 定义大量的本地变量，增大此方法帧中本地变量表的长度</span></span><br><span class="line"><span class="comment"> * 结果：抛出StackOverflowError异常，异常出现时输出的堆栈深度相应缩小。</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> wugang</span></span><br><span class="line"><span class="comment"> * date: 2020-06-04 15:23</span></span><br><span class="line"><span class="comment"> **/</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">VMStackSOF02</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">int</span> stackLength = <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">test</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">long</span> unused1, unused2, unused3, unused4, unused5, unused6, unused7, unused8, unused9, unused10,</span><br><span class="line">                unused11, unused12, unused13, unused14, unused15, unused16, unused17, unused18, unused19, unused20,</span><br><span class="line">                unused21, unused22, unused23, unused24, unused25, unused26, unused27, unused28, unused29, unused30,</span><br><span class="line">                unused31, unused32, unused33, unused34, unused35, unused36, unused37, unused38, unused39, unused40,</span><br><span class="line">                unused41, unused42, unused43, unused44, unused45, unused46, unused47, unused48, unused49, unused50,</span><br><span class="line">                unused51, unused52, unused53, unused54, unused55, unused56, unused57, unused58, unused59, unused60,</span><br><span class="line">                unused61, unused62, unused63, unused64, unused65, unused66, unused67, unused68, unused69, unused70,</span><br><span class="line">                unused71, unused72, unused73, unused74, unused75, unused76, unused77, unused78, unused79, unused80,</span><br><span class="line">                unused81, unused82, unused83, unused84, unused85, unused86, unused87, unused88, unused89, unused90,</span><br><span class="line">                unused91, unused92, unused93, unused94, unused95, unused96, unused97, unused98, unused99, unused100;</span><br><span class="line">        stackLength++;</span><br><span class="line">        test();</span><br><span class="line">        unused1 = unused2 = unused3 = unused4 = unused5 = unused6 = unused7 = unused8 = unused9 = unused10 = unused11 =</span><br><span class="line">                unused12 = unused13 = unused14 = unused15 = unused16 = unused17 = unused18 = unused19 = unused20 = unused21 = unused22 = unused23 = unused24 = unused25 = unused26 = unused27 = unused28 = unused29 = unused30 = unused31 = unused32 = unused33 = unused34 = unused35 = unused36 = unused37 = unused38 = unused39 = unused40 = unused41 = unused42 = unused43 = unused44 = unused45 = unused46 = unused47 = unused48 = unused49 = unused50 = unused51 = unused52 = unused53 = unused54 = unused55 = unused56 = unused57 = unused58 = unused59 = unused60 = unused61 = unused62 = unused63 = unused64 = unused65 = unused66 = unused67 = unused68 = unused69 = unused70 = unused71 = unused72 = unused73 = unused74 = unused75 = unused76 = unused77 = unused78 = unused79 = unused80 = unused81 = unused82 = unused83 = unused84 = unused85 = unused86 = unused87 = unused88 = unused89 = unused90 = unused91 = unused92 = unused93 = unused94 = unused95 = unused96 =</span><br><span class="line">                        unused97 = unused98 = unused99 = unused100 = <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            test();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Throwable e) &#123;</span><br><span class="line">            System.out.println(<span class="string">"stack length: "</span> + stackLength);</span><br><span class="line">            <span class="keyword">throw</span> e;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>输出：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">stack length: 8121Exception in thread &quot;main&quot; </span><br><span class="line">java.lang.StackOverflowError</span><br><span class="line">at com.bubble.jvm.error.VMStackSOF02.test(VMStackSOF02.java:26)</span><br><span class="line">...</span><br></pre></td></tr></table></figure><h6 id="多线程下：OOM异常"><a href="#多线程下：OOM异常" class="headerlink" title="多线程下：OOM异常"></a>多线程下：OOM异常</h6><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 多线程下，Java虚拟机栈和本地方法栈OOM异常</span></span><br><span class="line"><span class="comment"> * VM Args:-Xss2M</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> wugang</span></span><br><span class="line"><span class="comment"> * date: 2020-06-04 16:38</span></span><br><span class="line"><span class="comment"> **/</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">VMStackOOM</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">dontStop</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">while</span> (<span class="keyword">true</span>) &#123;</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">stackLeakByThread</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">while</span> (<span class="keyword">true</span>) &#123;</span><br><span class="line">            Thread thread = <span class="keyword">new</span> Thread(() -&gt; dontStop());</span><br><span class="line">            thread.start();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        VMStackOOM vmStackOOM = <span class="keyword">new</span> VMStackOOM();</span><br><span class="line">        vmStackOOM.stackLeakByThread();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>输出：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Exception in thread &quot;main&quot; java.lang.OutOfMemoryError: unable to create native thread</span><br></pre></td></tr></table></figure><h6 id="结论"><a href="#结论" class="headerlink" title="结论"></a>结论</h6><p>实验结果表明：</p><ul><li>单线程下：</li></ul><p><strong>无论是由于栈帧太大还是虚拟机栈容量太小，当新的栈帧内存无法分配的时候，HotSpot虚拟机抛出的都是StackOverflowError异常。</strong><br>如果在允许动态扩展栈容量大小的虚拟机上，相同代码则会导致不一样的情况，如第二个代码（定义大量的本地变量，增大此方法帧中本地变量表的长度）示例就会抛出OutOfMemoryError异常。</p><ul><li>多线程下：<br>如果通过不断建立线程的方式，在HotSpot上也是可以产生内存溢出异常的，如第三个代码。<br>但是这样<strong>产生的内存溢出异常和栈空间是否足够并不存在任何直接的关系</strong>，<strong>主要取决于操作系统本身的内存使用状态</strong>。<br>甚至可以说，在这种情况下，<code>给每个线程的栈分配的内存越大，反而越容易产生内存溢出异常</code>。</li></ul><blockquote><p>因为：<strong>操作系统分配给每个进程的内存是有限制的</strong>。<br>如32位Windows的单个进程最大内存限制为2GB。<br>HotSpot虚拟机提供了参数可以控制Java堆和方法区这两部分的内存的最大值，<br>那<code>剩余的内存（由虚拟机栈和本地方法栈来分配的内存）</code>为<strong>2GB(操作系统限制)减去最大堆容量，再减去最大方法区容量</strong>。</p><blockquote><p>注意：由于程序计数器消耗内存很小，可以忽略掉，如果把直接内存和虚拟机进程本身耗费的内存也去掉的话。</p></blockquote><p>因此<code>为每个线程分配到的栈内存越大，可以建立的线程数量自 然就越少，建立线程时就越容易把剩下的内存耗尽</code>。</p></blockquote><ul><li>通过<code>减少内存</code>的手段来解决内存溢出的方式：<br>如果是建立过多线程导致的内存溢出，在不能减少线程数量或者更换64位虚拟机的情况下，就只<strong>通过<code>减少最大堆</code>和<code>减少栈容量</code>来换取更多的线程</strong>。</li></ul><h2 id="线程共享区"><a href="#线程共享区" class="headerlink" title="线程共享区"></a>线程共享区</h2><h3 id="Java堆溢出"><a href="#Java堆溢出" class="headerlink" title="Java堆溢出"></a>Java堆溢出</h3><h4 id="概念"><a href="#概念" class="headerlink" title="概念"></a>概念</h4><p>Java堆（Java Heap）是虚拟机管理的内存中的最大一块区域，也是垃圾回收的主要区域，它属于<code>线程共享区</code>，用于<code>存储对象实例</code>。</p><h4 id="Java堆时垃圾收集器管理的内存区域"><a href="#Java堆时垃圾收集器管理的内存区域" class="headerlink" title="Java堆时垃圾收集器管理的内存区域"></a>Java堆时垃圾收集器管理的内存区域</h4><p>Java堆也被称为GC堆（Garbage Collected Heap）。</p><ul><li><p>从<strong>回收内存角度</strong>来看：<br>垃圾收集器大部分都是基于<code>分代收集理论</code>设计的，会有 <strong>新生代、老年代、永久代（JDK8改为元空间）、Eden空间、From Survivor空间、To Survivor空间</strong>等名词。<br>这些区域划分仅仅是一部分垃圾收集器的共同特性或者说设计风格，而非某个Java虚拟机具体实现的固有内存布局，更不是《Java虚拟机规范》里对Java堆的进一步细致划分。</p></li><li><p>从<strong>分配内存角度</strong>来看：<br>所有线程共享的Java堆中可以划分出多个线程私有的<code>分配缓冲区</code>（TLAB, Thread Local Allocation Buffer），可以提升对象分配时的效率。<br>不过无论从什么角度，无论如 何划分，都不会改变Java堆中存储内容的共性，无论是哪个区域，<strong>存储的都只能是对象的实例</strong>，将Java 堆细分的目的只是为了更好地回收内存，或者更快地分配内存。</p></li></ul><h4 id="物理存储空间"><a href="#物理存储空间" class="headerlink" title="物理存储空间"></a>物理存储空间</h4><p>Java堆可以处于<strong>物理上不连续的内存空间</strong>中，但在逻辑上它应该被视为连续的。<br>就像我们用磁盘空间去存储文件一样，并不要求每个文件都连续存放。</p><blockquote><p>注意：但对于<strong>大对象</strong>(典型的如数组对象)，多数虚拟机实现出于实现简单、存储高效的考虑，很可能会要求连续的内存空间。</p></blockquote><h4 id="配置参数"><a href="#配置参数" class="headerlink" title="配置参数"></a>配置参数</h4><p>Java堆可以设置为固定大小，也可以为可动态扩展的。<br>通过参数<code>-Xmx</code>和<code>-Xms</code>来设定堆的最大和最小内存容量。<strong>将堆的最小值-Xms参数与最大值-Xmx参数设置为一样即可避免堆自动扩展</strong>。</p><p>如果<strong>在Java堆中没有内存完成实例分配，并且堆也无法再扩展时</strong>，Java虚拟机将会抛出<code>OutOfMemoryError异常</code>。</p><h4 id="为什么会堆溢出？"><a href="#为什么会堆溢出？" class="headerlink" title="为什么会堆溢出？"></a>为什么会堆溢出？</h4><p>当我们不断地创建新对象时，并且使GC Roots到对象之间有可达路径来避免垃圾回收机制清除这些对象，这时候，对象数量不断增加，总容量超过最大堆的容量限制后，就会发生内存溢出异常。</p><h4 id="OMM的两种情况"><a href="#OMM的两种情况" class="headerlink" title="OMM的两种情况"></a>OMM的两种情况</h4><p>可以通过内存映像分析工具对dump出的堆存储快照进行分析。<br>首先应确认内存中导致OOM的对象是否是必要的，也就是要先分清楚到底是出现了内存泄漏(Memory Leak)还是内存溢出(Memory Overflow)。</p><h5 id="内存泄露（Memory-Leak）"><a href="#内存泄露（Memory-Leak）" class="headerlink" title="内存泄露（Memory Leak）"></a>内存泄露（Memory Leak）</h5><p>如果是内存泄漏（<code>内存中的对象不是必须存活的，垃圾收集器未收集</code>），可进一步通过工具查看泄漏对象到GC Roots的引用链，找到泄漏对象是通过怎 样的引用路径、与哪些GC Roots相关联，才导致<code>垃圾收集器无法回收它们</code>，根据泄漏对象的类型信息 以及它到GC Roots引用链的信息，一般可以比较准确地定位到这些对象创建的位置，进而找出产生内存泄漏的代码的具体位置。</p><h5 id="内存溢出（Memory-Overflow）"><a href="#内存溢出（Memory-Overflow）" class="headerlink" title="内存溢出（Memory Overflow）"></a>内存溢出（Memory Overflow）</h5><p>如果不是内存泄漏，换句话说就是<code>内存中的对象确实都是必须存活的</code>，那就应当：</p><ul><li>检查Java虚拟机的堆参数(-Xmx与-Xms)设置，与机器的内存对比，看看是否还有向上调整的空间。</li><li>再从代码上检查 是否存在某些对象生命周期过长、持有状态时间过长、存储结构设计不合理等情况，尽量减少程序运行期的内存消耗。</li></ul><h4 id="溢出案例和dump快照分析"><a href="#溢出案例和dump快照分析" class="headerlink" title="溢出案例和dump快照分析"></a>溢出案例和dump快照分析</h4><p>使用虚拟机参数：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">VM Args:-Xms20m -Xmx20m -XX:+HeapDumpOnOutOfMemoryError</span><br></pre></td></tr></table></figure><p>限制Java堆的大小为20M B，不可扩展。<br>通过参数<code>-XX:+HeapDumpOnOutOf-MemoryError</code>可以<strong>让虚拟机在出现内存溢出异常的时候Dump出当前的内存堆转储快照</strong>，以便进行事后分析。(文件存储在该项目父目录下，如：java_pid80802.hprof)</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Java堆内存异常测试</span></span><br><span class="line"><span class="comment"> * VM Args: -Xms20m -Xmx20m -XX:+HeapDumpOnOutOfMemoryError</span></span><br><span class="line"><span class="comment"> **/</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">JavaHeapOOM</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">OOMObject</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        List&lt;OOMObject&gt; list = Lists.newArrayList();</span><br><span class="line">        <span class="keyword">while</span> (<span class="keyword">true</span>) &#123;</span><br><span class="line">            list.add(<span class="keyword">new</span> OOMObject());</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>输出：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">java.lang.OutOfMemoryError: Java heap space</span><br><span class="line">Dumping heap to java_pid80802.hprof ...</span><br><span class="line">Heap dump file created [27964242 bytes in 0.193 secs]</span><br><span class="line">Exception in thread &quot;main&quot; java.lang.OutOfMemoryError: Java heap space</span><br><span class="line">at java.util.Arrays.copyOf(Arrays.java:3210)</span><br><span class="line">at java.util.Arrays.copyOf(Arrays.java:3181)</span><br><span class="line">at java.util.ArrayList.grow(ArrayList.java:265)</span><br><span class="line">at java.util.ArrayList.ensureExplicitCapacity(ArrayList.java:239)</span><br><span class="line">at java.util.ArrayList.ensureCapacityInternal(ArrayList.java:231)</span><br><span class="line">at java.util.ArrayList.add(ArrayList.java:462)</span><br><span class="line">at com.bubble.jvm.error.JavaHeapOOM.main(JavaHeapOOM.java:23)</span><br></pre></td></tr></table></figure><p>可以在目录/Users/wugang/code/java/multi-dev下看到java_pid80802.hprof文件。</p><ul><li>分析dump文件：<br>可以通过内存映像分析工具(如Eclipse Memory Analyzer)对Dump出来的堆转储快照进行分析，也可以通过JDK自带的工具jvisualvm来可视化分析。<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"># 控制行执行命令</span><br><span class="line">jvisualvm</span><br></pre></td></tr></table></figure>会打开下面的窗口，打开对应的堆dump文件：<br><img src="https://cdn.jsdelivr.net/gh/bubblewu/cdn/images/jvm/jvisualvm-01.png" alt="jvisualvm-起始页"></li></ul><p>主要内容为：<br><img src="https://cdn.jsdelivr.net/gh/bubblewu/cdn/images/jvm/jvisualvm-02.png" alt="jvisualvm-概要"><br>由上图可知：导致 OutOfMemoryError 异常错误的线程是 main</p><p>查看dump的类信息：<br><img src="https://cdn.jsdelivr.net/gh/bubblewu/cdn/images/jvm/jvisualvm-03.png" alt="jvisualvm-类信息"><br>由上图可知：dump文件记录的堆中的实例总大小约19M，指定的堆的固定大小为20M。</p><blockquote><p>用第一行的实例大小除以百分比就能算出来：<br>堆中实例大小：12965216B/1024/1024=12.36M，占了总大小的65%。<br>堆中实例总大小：12.36M/0.65=19.02M</p></blockquote><p>说明：dump文件中的实例列表其实是<strong>反映了使用的堆的情况</strong>，而使用的堆内存并没有达到预先设置的最大堆内存，只是在申请堆内存的过程中超出了预先设置的最大堆内存，然后内存溢出。</p><h3 id="方法区和运行时常量池溢出"><a href="#方法区和运行时常量池溢出" class="headerlink" title="方法区和运行时常量池溢出"></a>方法区和运行时常量池溢出</h3><h4 id="方法区（Method-Area）"><a href="#方法区（Method-Area）" class="headerlink" title="方法区（Method Area）"></a>方法区（Method Area）</h4><p><code>方法区</code>与Java堆一样，属于<code>线程共享区</code>，它用于<strong>存储已被虚拟机加载的类型信息、常量、静态变量、即时编译器编译后的代码缓存</strong>等数据。</p><p>《Java虚拟机规范》对方法区的约束是非常宽松的，除了和Java堆一样<strong>不需要连续的内存</strong>和<strong>可以选择固定大小</strong>或者<strong>可扩展</strong>外，甚至<strong>还可以选择不实现垃圾收集</strong>。</p><blockquote><p>注意：</p><ul><li><code>关于方法区和永久代（元空间）</code>：<br>在JDK8以前，很多人把方法区称呼为<code>永久代（Permanent Generation</code>，或将两者混为一谈。<br>本质上这两者并不是等价的，<strong>仅因为HotSpot使用永久代来实现方法区而已</strong>，使得HotSpot的垃圾收集器能够像管理Java堆一样管理这部分内存，省去专门为方法区编写内存管理代码的工作。<br>到了JDK 7的HotSpot，已经把原本放在永久代的字符串常量池、静态变量等移出；<br>而到了JDK 8，完全废弃了永久代的概念，改用与JRockit、J9一样在本地内存中实现的<code>元空间(Metaspace)</code>来代替，把JDK 7中永久代还剩余的内容(主要是类型信息)全部移到元空间中。</li></ul></blockquote><h5 id="参数"><a href="#参数" class="headerlink" title="参数"></a>参数</h5><h6 id="JDK8之前：老年代（Permanent-Gennration）"><a href="#JDK8之前：老年代（Permanent-Gennration）" class="headerlink" title="JDK8之前：老年代（Permanent Gennration）"></a>JDK8之前：老年代（Permanent Gennration）</h6><ul><li>如：<code>-XX:PermSize=10M</code> 指定老年代的初始空间大小（10M），以字节为单位。</li><li>如：<code>-XX:MaxPermSize=10M</code> 设置老年代最大值，默认是-1，即不限制，或者说只受限于本地内存大小。</li></ul><h6 id="JDK8始：元空间（Metaspace）"><a href="#JDK8始：元空间（Metaspace）" class="headerlink" title="JDK8始：元空间（Metaspace）"></a><code>JDK8始：元空间（Metaspace）</code></h6><p><strong>Metaspace使用的是本地内存，而不是堆内存</strong>，也就是说在<code>默认情况下Metaspace的大小只与本地内存大小有关</code>。</p><ul><li><code>-XX:MetaspaceSize</code>：指定<strong>元空间的初始空间大小</strong>，以字节为单位。</li></ul><p><strong>达到该值就会触发垃圾收集进行类型卸载，同时收集器会对该值进行调整</strong>：如果释放了大量的空间，就适当降低该值；如果释放了很少的空间，那么在不超过-XX:MaxMetaspaceSize(如果设置了的话)的情况下，适当提高该值。</p><blockquote><p>该值越大触发Metaspace GC的时机就越晚。<br>随着GC的到来，虚拟机会根据实际情况调控Metaspace的大小，可能增加上限也可能降低。<br>在默认情况下，这个值大小根据不同的平台在12M到20M浮动。<br>使用<code>java -XX:+PrintFlagsInitial</code>命令查看本机的初始化参数，-XX:Metaspacesize为21810376B（大约20.8M） 。</p></blockquote><ul><li><p><code>-XX:MaxMetaspaceSize</code>：设置<strong>元空间最大值</strong>，默认是-1，即不限制，或者说只受限于本地内存大小。</p><blockquote><p>防止因为某些情况导致Metaspace无限的使用本地内存，影响到其他程序。<br>在本机上该参数的默认值为4294967295B（大约4096MB）。</p></blockquote></li><li><p><code>-XX:MinMetaspaceFreeRatio</code>：作用是在Metaspace GC收集之后，控制最小的元空间剩余容量的百分比，可减少因为元空间不足导致的垃圾收集的频率。</p><blockquote><p>当进行过Metaspace GC之后，会计算当前Metaspace的空闲空间比。<br>如果空闲比小于这个参数，那么虚拟机将增长Metaspace的大小。<br>在本机该参数的默认值为40，也就是40%。<br>设置该参数可以控制Metaspace的增长的速度，太小的值会导致Metaspace增长的缓慢，Metaspace的使用逐渐趋于饱和，可能会影响之后类的加载。而太大的值会导致Metaspace增长的过快，浪费内存。</p></blockquote></li><li><p><code>-XX:MaxMetaspaceFreeRatio</code>：用于控制大的元空间剩余容量的百分比。</p><blockquote><p>当进行过Metaspace GC之后， 会计算当前Metaspace的空闲空间比，如果空闲比大于这个参数，那么虚拟机会释放Metaspace的部分空间。在本机该参数的默认值为70，也就是70%。</p></blockquote></li><li><p><code>-XX:MaxMetaspaceExpansion</code>： Metaspace增长时的最大幅度。在本机上该参数的默认值为5452592B（大约为5MB）。</p></li><li><p><code>-XX:MinMetaspaceExpansion</code>： Metaspace增长时的最小幅度。在本机上该参数的默认值为340784B（大约330KB为）。</p></li></ul><h5 id="运行时常量池（Runtime-Constant-Pool）"><a href="#运行时常量池（Runtime-Constant-Pool）" class="headerlink" title="运行时常量池（Runtime Constant Pool）"></a>运行时常量池（Runtime Constant Pool）</h5><p><strong>运行时常量池是方法区的一部分</strong>。<br>Class文件中除了有类的版本、字段、方法、接口等描述信息外，还有一项信息是<code>常量池表(Constant Pool Table)</code>，用于<strong>存放编译期生成的各种字面量与符号引用</strong>，这部分内容将在类加载后存放到方法区的运行时常量池中。</p><p>运行时常量池相对于Class文件常量池的另外一个重要特征是具备<strong>动态性</strong>，Java语言并不要求常量一定只有编译期才能产生，在运行期间也可以将新的常量放入池中，如使用<code>String类的intern()方法</code>。</p><h5 id="OOM异常"><a href="#OOM异常" class="headerlink" title="OOM异常"></a>OOM异常</h5><p>运行时常量池是方法区的一部分，自然受到方法区内存的限制，当常量池无法再申请到内存时会抛出OutOfMemoryError异常。</p><h4 id="案例"><a href="#案例" class="headerlink" title="案例"></a>案例</h4><p>HotSpot从JDK7开始逐步“去永久代”的计划，并在JDK8中完全<strong>使用<code>元空间</code>来代替永久代</strong>。</p><h5 id="方法区"><a href="#方法区" class="headerlink" title="方法区"></a>方法区</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 方法区的OOM异常：</span></span><br><span class="line"><span class="comment"> * - JDK8之前：指定老年代（方法区的大小固定为10M，不能进行自动扩展）</span></span><br><span class="line"><span class="comment"> * VM Args: -XX:PermSize=10M -XX:MaxPermSize=10M</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * - JDK8：完全废除了老年代，用元空间代替。</span></span><br><span class="line"><span class="comment"> * VM Args: -XX:MetaspaceSize=10M -XX:MaxMetaspaceSize=10M</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> wugang</span></span><br><span class="line"><span class="comment"> * date: 2020-06-04 18:44</span></span><br><span class="line"><span class="comment"> **/</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">JavaMethodAreaOOM</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">OOMObject</span> </span>&#123;&#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 借助CGLib使得方法区出现内存溢出异常：</span></span><br><span class="line"><span class="comment">     * 方法区的主要职责是用于存放类型的相关信息：如类名、访问修饰符、常量池、字段描述、方法描述等。</span></span><br><span class="line"><span class="comment">     * 对于这部分区域的测试，基本的思路是：运行时产生大量的类去填满方法区，直到溢出为止。</span></span><br><span class="line"><span class="comment">     * 所以：可以借助CGLib直接操作字节码，运行时生成了大量的动态类。</span></span><br><span class="line"><span class="comment">     * 注意：</span></span><br><span class="line"><span class="comment">     * 当前的很多主流框架，如Spring、Hibernate对类进行增强时，都会使用到 CGLib这类字节码技术，</span></span><br><span class="line"><span class="comment">     * 当增强的类越多，就需要越大的方法区以保证动态生成的新类型可以载入内存。</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">while</span> (<span class="keyword">true</span>) &#123;</span><br><span class="line">            Enhancer enhancer = <span class="keyword">new</span> Enhancer();</span><br><span class="line">            enhancer.setSuperclass(OOMObject<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line">            enhancer.setUseCache(<span class="keyword">false</span>);</span><br><span class="line">            enhancer.setCallback(<span class="keyword">new</span> MethodInterceptor() &#123;</span><br><span class="line">                <span class="meta">@Override</span></span><br><span class="line">                <span class="function"><span class="keyword">public</span> Object <span class="title">intercept</span><span class="params">(Object o, Method method, Object[] objects, MethodProxy methodProxy)</span> <span class="keyword">throws</span> Throwable </span>&#123;</span><br><span class="line">                    <span class="keyword">return</span> methodProxy.invokeSuper(o, args);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;);</span><br><span class="line">            enhancer.create();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>输出：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">Exception in thread &quot;main&quot; net.sf.cglib.core.CodeGenerationException: java.lang.reflect.InvocationTargetException--&gt;null</span><br><span class="line">at net.sf.cglib.core.AbstractClassGenerator.generate(AbstractClassGenerator.java:348)</span><br><span class="line">at net.sf.cglib.proxy.Enhancer.generate(Enhancer.java:492)</span><br><span class="line">at net.sf.cglib.core.AbstractClassGenerator$ClassLoaderData.get(AbstractClassGenerator.java:117)</span><br><span class="line">at net.sf.cglib.core.AbstractClassGenerator.create(AbstractClassGenerator.java:294)</span><br><span class="line">at net.sf.cglib.proxy.Enhancer.createHelper(Enhancer.java:480)</span><br><span class="line">at net.sf.cglib.proxy.Enhancer.create(Enhancer.java:305)</span><br><span class="line">at com.bubble.jvm.error.JavaMethodAreaOOM.main(JavaMethodAreaOOM.java:39)</span><br><span class="line">Caused by: java.lang.reflect.InvocationTargetException</span><br><span class="line">at sun.reflect.GeneratedMethodAccessor1.invoke(Unknown Source)</span><br><span class="line">at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)</span><br><span class="line">at java.lang.reflect.Method.invoke(Method.java:498)</span><br><span class="line">at net.sf.cglib.core.ReflectUtils.defineClass(ReflectUtils.java:459)</span><br><span class="line">at net.sf.cglib.core.AbstractClassGenerator.generate(AbstractClassGenerator.java:339)</span><br><span class="line">... 6 more</span><br><span class="line">Caused by: java.lang.OutOfMemoryError: Metaspace</span><br><span class="line">at java.lang.ClassLoader.defineClass1(Native Method)</span><br><span class="line">at java.lang.ClassLoader.defineClass(ClassLoader.java:763)</span><br><span class="line">... 11 more</span><br></pre></td></tr></table></figure><h5 id="运行时常量池"><a href="#运行时常量池" class="headerlink" title="运行时常量池"></a>运行时常量池</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.HashSet;</span><br><span class="line"><span class="keyword">import</span> java.util.Set;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 方法区（运行时常量池）的OOM异常，（方法区在JDK8后开始废除，之前也被称为永久代）</span></span><br><span class="line"><span class="comment"> * - 在JDK 6或更早之前的HotSpot虚拟机中，常量池都是分配在永久代中，</span></span><br><span class="line"><span class="comment"> * 我们可以通过-XX:PermSize和-XX:M axPermSize限制永久代的大小，即可间接限制其中常量池的容量。</span></span><br><span class="line"><span class="comment"> * 如：VM Args:-XX:PermSize=6M -XX:MaxPermSize=6M</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> wugang</span></span><br><span class="line"><span class="comment"> * date: 2020-06-04 17:36</span></span><br><span class="line"><span class="comment"> **/</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">RuntimeConstantPoolOOM</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * JDK6来运行代码，抛出异常：</span></span><br><span class="line"><span class="comment">     * Exception in thread "main" java.lang.OutOfMemoryError: PermGen space</span></span><br><span class="line"><span class="comment">     * at java.lang.String.intern(Native Method)</span></span><br><span class="line"><span class="comment">     * 说明运行时常量池是属于方法区(即JDK 6的HotSpot虚拟机中的永久代)的一部分。</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * 注意：</span></span><br><span class="line"><span class="comment">     * 无论是在JDK7中继续使用-XX:MaxPermSize参数或者在JDK8及以上版本使用-XX:MaxMeta-spaceSize参数</span></span><br><span class="line"><span class="comment">     * 把方法区容量同样限制在6MB，也都不会重现JDK6中的溢出异常，循环将一直进行下去，永不停歇。</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * 因为自JDK7起，原本存放在永久代的字符串常量池被移至Java堆之中，</span></span><br><span class="line"><span class="comment">     * 所以在JDK7及以上版本，限制方法区的容量对该测试用例来说是毫无意义的。</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * 但使用-Xmx参数限制最大堆到6MB就能够看到下面两种运行结果之一，具体取决于哪里的对象分配时产生了溢出：</span></span><br><span class="line"><span class="comment">     * - OOM异常一：</span></span><br><span class="line"><span class="comment">     * Exception in thread "main" java.lang.OutOfMemoryError: Java heap space</span></span><br><span class="line"><span class="comment">     * at java.base/java.lang.Integer.toString(Integer.java:440)</span></span><br><span class="line"><span class="comment">     * at java.base/java.lang.String.valueOf(String.java:3058)</span></span><br><span class="line"><span class="comment">     * - OOM异常二：</span></span><br><span class="line"><span class="comment">     * Exception in thread "main" java.lang.OutOfMemoryError: Java heap space</span></span><br><span class="line"><span class="comment">     * at java.base/java.util.HashMap.resize(HashMap.java:699)</span></span><br><span class="line"><span class="comment">     * at java.base/java.util.HashMap.putVal(HashMap.java:658)</span></span><br><span class="line"><span class="comment">     * at java.base/java.util.HashMap.put(HashMap.java:607)</span></span><br><span class="line"><span class="comment">     * at java.base/java.util.HashSet.add(HashSet.java:220)</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">runByJDK6</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 使用Set保持着常量池引用，避免Full GC回收常量池行为</span></span><br><span class="line">        Set&lt;String&gt; set = <span class="keyword">new</span> HashSet&lt;&gt;();</span><br><span class="line">        <span class="comment">// 在short范围内足以让6MB的PermSize产生OOM了</span></span><br><span class="line">        <span class="keyword">short</span> i = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">while</span> (<span class="keyword">true</span>) &#123;</span><br><span class="line">            set.add(String.valueOf(i++).intern());</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        runByJDK6();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="String-intern-方法"><a href="#String-intern-方法" class="headerlink" title="String::intern()方法"></a><code>String::intern()方法</code></h5><p><code>String::intern()</code>是一个Native方法，返回该对象在常量池中的引用。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">native</span> String <span class="title">intern</span><span class="params">()</span></span>;</span><br></pre></td></tr></table></figure><p>作用：如果字符串常量池中已经包含一个等于该String对象的字符串，则返回代表池中这个字符串的String对象的引用；否则，会将此String对象包含的字符串添加到常量池中，并且返回此String对象的引用。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * - 在JDK 6中运行，会得到三个false；</span></span><br><span class="line"><span class="comment"> * 在JDK 6中，intern()方法会把首次遇到的字符串实例复制到永久代（方法区）的字符串常量池中存储，</span></span><br><span class="line"><span class="comment"> * 返回的也是永久代里面这个字符串实例的引用，而由StringBuilder创建的字符串对象实例在Java堆上，</span></span><br><span class="line"><span class="comment"> * 所以必然不可能是同一个引用，结果将返回false。</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * - 而在JDK 7后中运行，会得到一个true、一个false和一个true；</span></span><br><span class="line"><span class="comment"> * 因为JDK7中，intern()方法实现就不需要再拷贝字符串的实例到永久代了，既然字符串常量池已经移到Java堆中，</span></span><br><span class="line"><span class="comment"> * 那只需要在常量池里记录一下首次出现的实例引用即可。</span></span><br><span class="line"><span class="comment"> * 因此intern()返回的引用和由StringBuilder创建的那个字符串实例就是同一个。</span></span><br><span class="line"><span class="comment"> * 而对str2比较返回false，这是因为java这个字符串在执行StringBuilder()之前就已经出现过了，(在加载sun.misc.Version这个类的时候进入常量池的)</span></span><br><span class="line"><span class="comment"> * 字符串常量池中已经有它的引用，不符合intern()方法要求“首次遇到”的原则，“JVM调优”这个字符串则是首次出现的，因此结果返回true。</span></span><br><span class="line"><span class="comment"> * 而str3和str1一样，"JDKJVM"这个字符串则是首次出现。</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">compare</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    String str1 = <span class="keyword">new</span> StringBuilder().append(<span class="string">"JVM"</span>).append(<span class="string">"调优"</span>).toString();</span><br><span class="line">    System.out.println(str1.intern() == str1);</span><br><span class="line">    <span class="comment">// java这个字符串在执行StringBuilder()之前就已经出现过了，在加载sun.misc.Version这个类的时候进入常量池的。</span></span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">     * 参考：https://www.zhihu.com/question/51102308/answer/124441115</span></span><br><span class="line"><span class="comment">     * sun.misc.Version类会在JDK类库的初始化过程中被加载并初始化，</span></span><br><span class="line"><span class="comment">     * 而在初始化时它需要对静态常量字段根据指定的常量值（ConstantValue）做默认初始化，</span></span><br><span class="line"><span class="comment">     * 此时被 sun.misc.Version.launcher 静态常量字段所引用的"java"字符串字面量就被intern到HotSpot VM的字符串常量池StringTable里了。</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    String str2 = <span class="keyword">new</span> StringBuilder().append(<span class="string">"ja"</span>).append(<span class="string">"va"</span>).toString();</span><br><span class="line">    System.out.println(str2.intern() == str2);</span><br><span class="line">    <span class="comment">// 而JDKJVM这个字符串则是首次出现</span></span><br><span class="line">    String str3 = <span class="keyword">new</span> StringBuilder().append(<span class="string">"JDK"</span>).append(<span class="string">"JVM"</span>).toString();</span><br><span class="line">    System.out.println(str3.intern() == str3);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * java中的String是引用类型。创建的String对象，实际上存储的是一个地址。</span></span><br><span class="line"><span class="comment"> * 所以下面a和b都是引用类型，其存储的是字符串的地址。它们本身存储在Java虚拟机栈的局部变量表中。</span></span><br><span class="line"><span class="comment"> * - a：直接将字符串存储在常量池中，然后将a指向常量池种中的"JVM"。</span></span><br><span class="line"><span class="comment"> * - b：先将字符串"JVM"存储在常量池中，然后在heap中创建一个对象，该对象指向常量池中的"JVM"，最后将b指向heap中创建的这个对象。</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * 也就是说，a和b存储的内容是一样的，都是"JVM"，但地址不一样：a中保存的是常量池中"JVM"的地址，b保存的是heap中那个对象的地址，</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * 双等于号"=="比较的是地址，equals()比较的是内容。</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">compareStr</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    String a = <span class="string">"JVM"</span>;</span><br><span class="line">    <span class="comment">// new一个对象</span></span><br><span class="line">    String b = <span class="keyword">new</span> String(<span class="string">"JVM"</span>);</span><br><span class="line">    <span class="comment">// == 比较地址是否相等</span></span><br><span class="line">    <span class="comment">// 都在运行时常量池中</span></span><br><span class="line">    System.out.println(<span class="string">"JVM"</span> == a); <span class="comment">// true</span></span><br><span class="line">    System.out.println(a.intern() == a); <span class="comment">// true</span></span><br><span class="line">    <span class="comment">// a为字符字面量（存储在运行时常量池中），b为对象（存储在堆中），所以不等。</span></span><br><span class="line">    System.out.println(a == b); <span class="comment">// false</span></span><br><span class="line">    System.out.println(a.intern() == b); <span class="comment">// false</span></span><br><span class="line"></span><br><span class="line">    System.out.println(a.equals(b));  <span class="comment">// true</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="其他（不受JVM-GC管理区域）"><a href="#其他（不受JVM-GC管理区域）" class="headerlink" title="其他（不受JVM GC管理区域）"></a>其他（不受JVM GC管理区域）</h2><h3 id="本机直接内存溢出"><a href="#本机直接内存溢出" class="headerlink" title="本机直接内存溢出"></a>本机直接内存溢出</h3><h4 id="直接内存（Direct-Memory）"><a href="#直接内存（Direct-Memory）" class="headerlink" title="直接内存（Direct Memory）"></a>直接内存（Direct Memory）</h4><p>直接内存并不是虚拟机运行时数据区的一部分，也不是《Java虚拟机规范》中定义的内存区域。</p><p>容量大小可通过<code>-XX:MaxDirectMemorySize</code>参数来指定，如果不去指定，则默认与Java堆最大值(由-Xmx指定)一致。</p><h5 id="NIO-New-Input-Output-类"><a href="#NIO-New-Input-Output-类" class="headerlink" title="NIO(New Input/Output)类"></a>NIO(New Input/Output)类</h5><p>NIO引入了一种<code>基于通道(Channel)</code>与<code>缓冲区 (Buffer)</code>的I/O方式，它可以<strong>使用Native函数库直接分配堆外内存</strong>，然后<strong>通过一个存储在Java堆里面的DirectByteBuffer对象作为这块内存的引用</strong>进行操作。<br>这样能在一些场景中显著提高性能，因为避免了在Java堆和Native堆中来回复制数据。</p><h5 id="OOM异常-1"><a href="#OOM异常-1" class="headerlink" title="OOM异常"></a>OOM异常</h5><p>当各个内存区域总和大于物理内存限制(包括物理的和操作系统级的限制)，从而导致动态扩展时出现 OutOfMemoryError异常。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> sun.misc.Unsafe;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Field;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 直接内存OOM异常：使用unsafe分配本机内存</span></span><br><span class="line"><span class="comment"> * VM Args: -Xmx20M -XX:MaxDirectMemorySize=10M</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> wugang</span></span><br><span class="line"><span class="comment"> * date: 2020-06-04 19:43</span></span><br><span class="line"><span class="comment"> **/</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DirectMemoryOOM</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> _1MB = <span class="number">1024</span> * <span class="number">1024</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 越过了DirectByteBuffer类直接通过反射获取Unsafe实例进行内存分配。</span></span><br><span class="line"><span class="comment">     * （Unsafe类的getUnsafe()方法指定只有引导类加载器才会返回实例，体现了设计者希望只有虚拟机标准类库里面的类才能使用Unsafe的功能，在JDK 10时才将Unsafe的部分功能通过VarHandle开放给外部使用）</span></span><br><span class="line"><span class="comment">     * 因为虽然使用DirectByteBuffer分配内存也会抛出内存溢出异常，但它抛出异常时并没有真正向操作系统申请分配内存，</span></span><br><span class="line"><span class="comment">     * 而是通过计算得知内存无法分配就会在代码里手动抛出溢出异常，真正申请分配内存的方法是Unsafe::allocateMemory ()。</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * 抛出异常：</span></span><br><span class="line"><span class="comment">     * Exception in thread "main" java.lang.OutOfMemoryError</span></span><br><span class="line"><span class="comment">     * at sun.misc.Unsafe.allocateMemory(Native Method)</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IllegalAccessException </span>&#123;</span><br><span class="line">        Field unsafeField = Unsafe.class.getDeclaredFields()[0];</span><br><span class="line">        unsafeField.setAccessible(<span class="keyword">true</span>);</span><br><span class="line">        Unsafe unsafe = (Unsafe) unsafeField.get(<span class="keyword">null</span>);</span><br><span class="line">        <span class="keyword">while</span> (<span class="keyword">true</span>) &#123;</span><br><span class="line">            unsafe.allocateMemory(_1MB);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>由直接内存导致的内存溢出，一个明显的特征是在Heap Dump文件中不会看见有什么明显的异常情况。<br>如果发现内存溢出之后产生的Dump文件很小，而程序中又直接或间接使用了DirectMemory(典型的间接使用就是NIO)，那就可以考虑重点检查一下直接内存方面的原因了。</p>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
          <category> JVM </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> JVM </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>生产者-消费者案例</title>
      <link href="/ckd70wo77000jqlyd8qx0g49p/"/>
      <url>/ckd70wo77000jqlyd8qx0g49p/</url>
      
        <content type="html"><![CDATA[<p>基于Java的生产者-消费者模式代码实现，可以此为Demo来用于具体的实际业务。</p><a id="more"></a><ul><li>生产者-消费者demo<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">import org.slf4j.Logger;</span><br><span class="line">import org.slf4j.LoggerFactory;</span><br><span class="line"></span><br><span class="line">import java.time.Duration;</span><br><span class="line">import java.time.Instant;</span><br><span class="line">import java.util.*;</span><br><span class="line">import java.util.concurrent.ArrayBlockingQueue;</span><br><span class="line">import java.util.concurrent.LinkedBlockingQueue;</span><br><span class="line">import java.util.concurrent.ThreadPoolExecutor;</span><br><span class="line">import java.util.concurrent.TimeUnit;</span><br><span class="line"></span><br><span class="line">&#x2F;**</span><br><span class="line"> * 推荐服务：生产者-消费者模式</span><br><span class="line"> *</span><br><span class="line"> * @author bubble</span><br><span class="line"> * date: 2018-10-22 15:03</span><br><span class="line"> **&#x2F;</span><br><span class="line">@Deprecated</span><br><span class="line">public class RecService &#123;</span><br><span class="line">    private static final Logger LOGGER &#x3D; LoggerFactory.getLogger(RecService.class);</span><br><span class="line">    &#x2F;&#x2F; 日志打印间隔</span><br><span class="line">    private static int DEFAULT_LOG_INTERVAL &#x3D; 1000 * 10;</span><br><span class="line">    &#x2F;&#x2F; 队列默认处理容量，为避免队列扩容造成额外性能损耗，默认不扩容，达到当前大小，进入等待，消费者处理一部分数据之后，生产者继续生产</span><br><span class="line">    private static int DEFAULT_QUEUE_DISPOSE_SIZE &#x3D; 1000 * 10;</span><br><span class="line">    &#x2F;&#x2F; 队列默认容量</span><br><span class="line">    private static int DEFAULT_QUEUE_SIZE &#x3D; DEFAULT_QUEUE_DISPOSE_SIZE + 200;</span><br><span class="line">    &#x2F;&#x2F; 每个队列满时默认休眠时间</span><br><span class="line">    private static int DEFAULT_SLEEP_TIME &#x3D; 1000;</span><br><span class="line">    &#x2F;&#x2F; 线程池默认消费者数量</span><br><span class="line">    private static int DEFAULT_CONSUMER_NUM &#x3D; 2;</span><br><span class="line">    &#x2F;&#x2F; 用户的phoneId队列</span><br><span class="line">    private LinkedBlockingQueue&lt;Long&gt; phoneIdQueue &#x3D; new LinkedBlockingQueue&lt;&gt;(DEFAULT_QUEUE_SIZE);</span><br><span class="line">    private Long STOP_FLAG &#x3D; -1L;</span><br><span class="line">    private Map&lt;Long, List&lt;FlightInfoBean&gt;&gt; flightInfoMap; &#x2F;&#x2F; 用户航班信息</span><br><span class="line"></span><br><span class="line">    private Map&lt;Long, List&lt;FlightInfoBean&gt;&gt; getFlightInfoMap() &#123;</span><br><span class="line">        return flightInfoMap;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    private void setFlightInfoMap(Map&lt;Long, List&lt;FlightInfoBean&gt;&gt; flightInfoMap) &#123;</span><br><span class="line">        this.flightInfoMap &#x3D; flightInfoMap;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    private RecJobBean recJob;</span><br><span class="line">    private TipRecService tipRecService;</span><br><span class="line">    private CarRecService carRecService;</span><br><span class="line">    private HotelRecService hotelRecService;</span><br><span class="line"></span><br><span class="line">    public RecService(RecJobBean recJob) &#123;</span><br><span class="line">        this.recJob &#x3D; recJob;</span><br><span class="line">        switch (recJob) &#123;</span><br><span class="line">            case TIP:</span><br><span class="line">                tipRecService &#x3D; Optional.ofNullable(tipRecService).orElse(new TipRecService());</span><br><span class="line">                break;</span><br><span class="line">            case CAR:</span><br><span class="line">                carRecService &#x3D; Optional.ofNullable(carRecService).orElse(new CarRecService());</span><br><span class="line">                break;</span><br><span class="line">            case HOTEL:</span><br><span class="line">                hotelRecService &#x3D; Optional.ofNullable(hotelRecService).orElse(new HotelRecService());</span><br><span class="line">                break;</span><br><span class="line">            default:</span><br><span class="line">                LOGGER.error(&quot;please enter the correct rec type, error type: &#123;&#125; &quot;, recJob.getType());</span><br><span class="line">                System.exit(0);</span><br><span class="line">                break;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public void rec(Map&lt;Long, List&lt;FlightInfoBean&gt;&gt; userFlightMap, int top) &#123;</span><br><span class="line">        LOGGER.info(&quot;start &#123;&#125; rec job.&quot;, recJob.getType());</span><br><span class="line">        if (userFlightMap &#x3D;&#x3D; null || userFlightMap.isEmpty()) &#123;</span><br><span class="line">            LOGGER.error(&quot;user flight is empty, rec job for &#123;&#125; exit.&quot;, recJob.getType());</span><br><span class="line">            System.exit(0);</span><br><span class="line">        &#125;</span><br><span class="line">        setFlightInfoMap(userFlightMap);</span><br><span class="line">        UserProducer userProducer &#x3D; new UserProducer();</span><br><span class="line">        userProducer.setName(&quot;producer&quot;);</span><br><span class="line">        userProducer.start();</span><br><span class="line">        UserConsumer userConsumer &#x3D; new UserConsumer(recJob, top);</span><br><span class="line">        ThreadPoolExecutor poolExecutor &#x3D; userConsumer.consumerAndRec();</span><br><span class="line">        threadMonitor(poolExecutor);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    &#x2F;**</span><br><span class="line">     * 监控ThreadPoolExecutor线程池，无活动线程就关闭线程池连接；</span><br><span class="line">     *&#x2F;</span><br><span class="line">    private void threadMonitor(ThreadPoolExecutor executor) &#123;</span><br><span class="line">        Runnable runnable &#x3D; () -&gt; &#123;</span><br><span class="line">            try &#123;</span><br><span class="line">                TimeUnit.SECONDS.sleep(2);</span><br><span class="line">                while (executor.getActiveCount() &gt; 0) &#123;</span><br><span class="line">                    TimeUnit.SECONDS.sleep(1);</span><br><span class="line">                &#125;</span><br><span class="line">                executor.shutdown();</span><br><span class="line">            &#125; catch (InterruptedException e) &#123;</span><br><span class="line">                LOGGER.error(&quot;thread monitor error.&quot;, e);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;;</span><br><span class="line">        new Thread(runnable).start();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    &#x2F;**</span><br><span class="line">     * 生产者: 可用phoneId集合</span><br><span class="line">     *&#x2F;</span><br><span class="line">    class UserProducer extends Thread &#123;</span><br><span class="line">        int i &#x3D; 0;</span><br><span class="line"></span><br><span class="line">        @Override</span><br><span class="line">        public void run() &#123;</span><br><span class="line">            addUser();</span><br><span class="line">            try &#123;</span><br><span class="line">                &#x2F;&#x2F; 给每个线程都在队列（FIFO）末尾添加标识</span><br><span class="line">                phoneIdQueue.put(STOP_FLAG);</span><br><span class="line">            &#125; catch (InterruptedException e) &#123;</span><br><span class="line">                LOGGER.error(&quot;save phoneId error.&quot;, e);</span><br><span class="line">            &#125;</span><br><span class="line">            LOGGER.info(&quot;[&#123;&#125;] thread altogether produces &#123;&#125; data&quot;, this.getName(), i);</span><br><span class="line">            LOGGER.info(&quot;[&#123;&#125;] thread produces done.&quot;, this.getName());</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        private void addUser() &#123;</span><br><span class="line">            try &#123;</span><br><span class="line">                int step &#x3D; 0;</span><br><span class="line">                LOGGER.info(&quot;add &#123;&#125; user in producer queue.&quot;, getFlightInfoMap().size());</span><br><span class="line">                Iterator iter &#x3D; getFlightInfoMap().entrySet().iterator();</span><br><span class="line"></span><br><span class="line">                while (iter.hasNext()) &#123;</span><br><span class="line">                    Map.Entry entry &#x3D; (Map.Entry) iter.next();</span><br><span class="line">                    long uid &#x3D; (long) entry.getKey();</span><br><span class="line">                    phoneIdQueue.put(uid);</span><br><span class="line">                    step++;</span><br><span class="line">                    while (phoneIdQueue.size() &gt; DEFAULT_QUEUE_DISPOSE_SIZE) &#123;</span><br><span class="line">                        Thread.sleep(DEFAULT_SLEEP_TIME);</span><br><span class="line">                    &#125;</span><br><span class="line">                    if (step &#x3D;&#x3D; DEFAULT_LOG_INTERVAL) &#123;</span><br><span class="line">                        i +&#x3D; step;</span><br><span class="line">                        step &#x3D; 0;</span><br><span class="line">                        LOGGER.info(&quot;[&#123;&#125;] thread has produced &#123;&#125; pieces of data&quot;, this.getName(), i);</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">                i +&#x3D; step;</span><br><span class="line">            &#125; catch (InterruptedException e) &#123;</span><br><span class="line">                LOGGER.error(&quot;save phoneId error.&quot;, e);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    &#x2F;**</span><br><span class="line">     * 消费者：取phoneId并进行推荐</span><br><span class="line">     *&#x2F;</span><br><span class="line">    class UserConsumer &#123;</span><br><span class="line">        private int top;</span><br><span class="line">        private RecJobBean recJob;</span><br><span class="line"></span><br><span class="line">        public UserConsumer(RecJobBean recJob, int top) &#123;</span><br><span class="line">            this.recJob &#x3D; recJob;</span><br><span class="line">            this.top &#x3D; top;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        public ThreadPoolExecutor consumerAndRec() &#123;</span><br><span class="line">            ThreadPoolExecutor poolExecutor &#x3D; new ThreadPoolExecutor(DEFAULT_CONSUMER_NUM,</span><br><span class="line">                    DEFAULT_CONSUMER_NUM &lt;&lt; 1,</span><br><span class="line">                    60 * 60 * 4,</span><br><span class="line">                    TimeUnit.SECONDS,</span><br><span class="line">                    new ArrayBlockingQueue&lt;&gt;(50),</span><br><span class="line">                    new ThreadPoolExecutor.CallerRunsPolicy());</span><br><span class="line">            LOGGER.info(&quot;Consumer start.&quot;);</span><br><span class="line"></span><br><span class="line">            for (int i &#x3D; 0; i &lt; DEFAULT_CONSUMER_NUM; i++) &#123;</span><br><span class="line">                Thread t &#x3D; new Thread() &#123;</span><br><span class="line">                    int step &#x3D; 0;</span><br><span class="line">                    int consumerNum &#x3D; 0;</span><br><span class="line"></span><br><span class="line">                    @Override</span><br><span class="line">                    public void run() &#123;</span><br><span class="line">                        while (!this.isInterrupted()) &#123;</span><br><span class="line">                            Long phoneId;</span><br><span class="line">                            try &#123;</span><br><span class="line">                                phoneId &#x3D; phoneIdQueue.take();</span><br><span class="line">                                if (phoneId.equals(STOP_FLAG)) &#123;</span><br><span class="line">                                    &#x2F;&#x2F; 该线程取到-1，说明产品队列中已无产品，可以结束线程，但是可能还有其他线程存活，需要通知其他线程已无数据</span><br><span class="line">                                    &#x2F;&#x2F; 因此，插入-1，同时跳出循环，线程归还线程池，等待监控线程发现其处于非活动状态，将其销毁，最终销毁线程池</span><br><span class="line">                                    phoneIdQueue.put(STOP_FLAG);</span><br><span class="line">                                    LOGGER.info(&quot;[&#123;&#125;] thread consumes done.&quot;, this.getName());</span><br><span class="line">                                    break;</span><br><span class="line">                                &#125;</span><br><span class="line">                                recOneUser(recJob, phoneId, top);</span><br><span class="line"></span><br><span class="line">                                consumerNum++;</span><br><span class="line">                                step++;</span><br><span class="line">                                if (step &#x3D;&#x3D; DEFAULT_LOG_INTERVAL) &#123;</span><br><span class="line">                                    step &#x3D; 0;</span><br><span class="line">                                    LOGGER.info(&quot;[&#123;&#125;] thread has consumed &#123;&#125; pieces of data&quot;, this.getName(), consumerNum);</span><br><span class="line">                                &#125;</span><br><span class="line"></span><br><span class="line">                            &#125; catch (InterruptedException e) &#123;</span><br><span class="line">                                LOGGER.error(&quot;read data from phoneIdQueue error.&quot;, e);</span><br><span class="line">                            &#125;</span><br><span class="line">                        &#125;</span><br><span class="line">                        LOGGER.info(&quot;[&#123;&#125;] thread altogether consumes &#123;&#125; user data&quot;, this.getName(), consumerNum);</span><br><span class="line">                        LOGGER.info(&quot;RecConsumer end.&quot;);</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;;</span><br><span class="line">                t.setName(&quot;RecConsumer-&quot; + i);</span><br><span class="line">                poolExecutor.execute(t);</span><br><span class="line">            &#125;</span><br><span class="line">            return poolExecutor;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    private void recOneUser(RecJobBean recJob, long uid, int top) &#123;</span><br><span class="line">        Instant begin &#x3D; Instant.now();</span><br><span class="line">        List&lt;FlightInfoBean&gt; userFlightInfoList &#x3D; getFlightInfoMap().get(uid);</span><br><span class="line">        if (userFlightInfoList !&#x3D; null &amp;&amp; !userFlightInfoList.isEmpty()) &#123;</span><br><span class="line">            List&lt;TipsUserLinkBean&gt; recItems &#x3D; new ArrayList&lt;&gt;();</span><br><span class="line">            switch (recJob) &#123;</span><br><span class="line">                case TIP:</span><br><span class="line">                    recItems &#x3D; tipRecService.rec(uid, userFlightInfoList, top);</span><br><span class="line">                    break;</span><br><span class="line">                case CAR:</span><br><span class="line">                    recItems &#x3D; carRecService.rec(uid, userFlightInfoList);</span><br><span class="line">                    break;</span><br><span class="line">                case HOTEL:</span><br><span class="line">                    recItems &#x3D; hotelRecService.rec(uid, userFlightInfoList, top);</span><br><span class="line">                    break;</span><br><span class="line">                default:</span><br><span class="line">                    LOGGER.error(&quot;please enter the correct rec type, error type: &#123;&#125; &quot;, recJob.getType());</span><br><span class="line">                    break;</span><br><span class="line">            &#125;</span><br><span class="line">            LOGGER.info(&quot;&#123;&#125; rec for user [&#123;&#125;] count is &#123;&#125;, costs &#123;&#125; ms&quot;, recJob.getType(), uid, recItems.size(), Duration.between(begin, Instant.now()).toMillis());</span><br><span class="line">            Instant saveStart &#x3D; Instant.now();</span><br><span class="line">            try &#123;</span><br><span class="line">                DataService.saveTipsUserLink(recItems, recJob);</span><br><span class="line">            &#125; catch (java.lang.NullPointerException np) &#123;</span><br><span class="line">                LOGGER.error(&quot;user [&#123;&#125;] saveTipsUserLink error.&quot;, uid, np);</span><br><span class="line">            &#125;</span><br><span class="line">            LOGGER.info(&quot;&#123;&#125; rec for user [&#123;&#125;] count is &#123;&#125;, save costs &#123;&#125; ms&quot;, recJob.getType(), uid, recItems.size(), Duration.between(saveStart, Instant.now()).toMillis());</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Bubble Sort</title>
      <link href="/ckd70wo75000hqlydauhj1t6k/"/>
      <url>/ckd70wo75000hqlydauhj1t6k/</url>
      
        <content type="html"><![CDATA[<p>经典面试题---进阶版冒泡排序</p><a id="more"></a><h2 id="常规版"><a href="#常规版" class="headerlink" title="常规版"></a>常规版</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/env python3</span></span><br><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">foo</span><span class="params">(data)</span>:</span></span><br><span class="line">    <span class="string">"""常规版"""</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(len(data)):</span><br><span class="line">        <span class="keyword">for</span> j <span class="keyword">in</span> range(len(data)-i<span class="number">-1</span>):</span><br><span class="line">            <span class="keyword">if</span> data[j] &gt; data[j+<span class="number">1</span>]:</span><br><span class="line">                data[j], data[j + <span class="number">1</span>] = data[j + <span class="number">1</span>], data[j]</span><br><span class="line">    <span class="keyword">return</span> data</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    data = [<span class="number">3</span>, <span class="number">0</span>, <span class="number">5</span>, <span class="number">4</span>, <span class="number">2</span>, <span class="number">6</span>, <span class="number">8</span>, <span class="number">1</span>, <span class="number">9</span>, <span class="number">7</span>]</span><br><span class="line">    print(data)</span><br><span class="line">    print(foo(data))</span><br></pre></td></tr></table></figure><h2 id="进阶版"><a href="#进阶版" class="headerlink" title="进阶版"></a>进阶版</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/env python3</span></span><br><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">bubble_sort</span><span class="params">(data)</span>:</span></span><br><span class="line">    <span class="string">"""</span></span><br><span class="line"><span class="string">    进阶版</span></span><br><span class="line"><span class="string">    最坏情况 时间复杂度 O(n**2)</span></span><br><span class="line"><span class="string">    最好情况 时间复杂度 O(n)</span></span><br><span class="line"><span class="string">    稳定排序法</span></span><br><span class="line"><span class="string">    空间复杂度最佳 只需要一个额外空间</span></span><br><span class="line"><span class="string">    适用于数据量小或有部分数据已经排过序的情况</span></span><br><span class="line"><span class="string">    :param data:</span></span><br><span class="line"><span class="string">    :return:</span></span><br><span class="line"><span class="string">    """</span></span><br><span class="line">    <span class="comment"># i 倒序循环列表排序</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(len(data)<span class="number">-1</span>, <span class="number">-1</span>, <span class="number">-1</span>):</span><br><span class="line">        flag = <span class="literal">False</span>  <span class="comment"># flag判断是否执行了交换操作</span></span><br><span class="line">        <span class="keyword">for</span> j <span class="keyword">in</span> range(i):  <span class="comment"># i 为倒序循环，所以j的最大值即是i 0～i</span></span><br><span class="line">            <span class="keyword">if</span> data[j] &gt; data[j + <span class="number">1</span>]:</span><br><span class="line">                data[j], data[j + <span class="number">1</span>] = data[j + <span class="number">1</span>], data[j]</span><br><span class="line">                flag = <span class="literal">True</span>  <span class="comment"># 执行过交换操作，把flag置为True</span></span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> flag:  <span class="comment"># 执行完一次扫描后，判断是否执行过交换操作，如果没有交换过数据，就表示此时数组已完成排序，故直接跳出循环</span></span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line">        print(<span class="string">'第&#123;0&#125;次排序: &#123;1&#125;'</span>.format(len(data)-i, data))</span><br><span class="line">    <span class="keyword">return</span> data</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    data = [<span class="number">3</span>, <span class="number">0</span>, <span class="number">5</span>, <span class="number">4</span>, <span class="number">2</span>, <span class="number">6</span>, <span class="number">8</span>, <span class="number">1</span>, <span class="number">9</span>, <span class="number">7</span>]</span><br><span class="line">    print(data)</span><br><span class="line">    print(bubble_sort(data))</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 面试 </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
